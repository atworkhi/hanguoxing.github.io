{"meta":{"title":"懒散的小星星","subtitle":"吃饭睡觉打豆豆","description":"我说自己很好看你信吗？？？","author":"韩星星","url":"http://atworking.cn","root":"/"},"pages":[{"title":"","date":"2019-05-17T06:33:42.744Z","updated":"2019-04-22T06:49:32.551Z","comments":true,"path":"404.html","permalink":"http://atworking.cn/404.html","excerpt":"","text":""},{"title":"关于","date":"2019-04-22T04:12:59.000Z","updated":"2019-04-23T02:12:16.323Z","comments":false,"path":"about/index.html","permalink":"http://atworking.cn/about/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-04-22T04:12:59.000Z","updated":"2019-04-22T07:29:57.680Z","comments":false,"path":"tags/index.html","permalink":"http://atworking.cn/tags/index.html","excerpt":"","text":""},{"title":"相册","date":"2019-04-22T04:12:59.000Z","updated":"2019-04-23T02:09:41.154Z","comments":false,"path":"photos/index.html","permalink":"http://atworking.cn/photos/index.html","excerpt":"","text":""},{"title":"分类","date":"2019-04-22T04:14:13.000Z","updated":"2019-04-22T07:29:47.904Z","comments":false,"path":"categories/index.html","permalink":"http://atworking.cn/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"C++基础知识03","slug":"C-基础知识03","date":"2019-05-21T06:28:17.000Z","updated":"2019-05-22T05:20:34.763Z","comments":true,"path":"2019/05/21/C-基础知识03/","link":"","permalink":"http://atworking.cn/2019/05/21/C-基础知识03/","excerpt":"第三章：复合类型","text":"第三章：复合类型 数组数组（array）是一种数据格式，能够存储多个同类型的值 数组声明和索引声明数组： 存储在每个元素中的值的类型； 数组名； 数组中的元素数。 typeName arrayName[arraySize] 数组元素下标从0开始，arrName[0]第一个元素. 数组初始化 typeName arrayName[arraySize]={xx,xx,xx}arrayName[index] = xxx //赋值arrName[] = {xx,xxx} //长度为2 只有在定义数组时才能使用初始化，此后就不能使用了，也不能将一个数组赋给另一个数组。可以使用下标分别给数组中的元素赋值。提供的值可以少于数组的元素数目,其他元素已0填充。初始化数组时方括号内（[ ]）为空，C++编译器将计算元素个数 字符串字符串是存储在内存的连续字节中的一系列字符(char数组)，并以空字符（null character）结尾，空字符被写作\\0，其ASCII码为0，用来标记字符串的结尾 字符串初始化 char str[3]={‘h’,’g’,’x’,’\\0’} //字符串char str[3]={‘h’,’g’,’x’,’h’} //非字符串char str[] = “hello” //包括”\\0”的字符串 字符数组初始化为字符串(“”包含原始字符和\\0) 字符串截取只需要在截取的字符数组的索引赋值“\\0” 字符串输入cin键盘输入字符串，不能使用空格字符(cin使用空格、制表符、和换行符来确定字符串借宿字符，所以只能接收一个单词，并自动在此单词后添加\\0)读取一行在istream中提供了面向行的成员函数“getline()”和“get()”,直到读取换行符。cin.getline()丢弃换行符,参数1：需要存储输入内容的名称，参数2：读取的字符数(10的话只能读取9个字符) cin.getline(name,size) cin.get()将换行符保留在输入序列中， 第一种是参数和getline类似。 第二种不带任何参数的get,可以读取下一个字符(包括换行符)因此可以用它来处理换行符，为读取下一行输入做好准备 123cin.get(name,size) //读取第一行cin.get() //读取换行cin.get(name,size) //读取第二行 第三种有参和无参结合使用. cin,get(name,size).get() 读取空行当getline( )或get( )读取空行时，将设置失效位，接下来的输入将被阻断，可以使用”cin.clear()”恢复使用数字和字符串12345678910cin &gt;&gt; year;char address[90];cin.getline(address,90)---------------------------------当用户输入year时回车直接运行程序，不回让输入address,因为cin.getline获取换行符，就默认没有内容，并不包含换行符，结速。解决办法：cin&gt;&gt;year; //cin.get();//获取换行符或(cin&gt;&gt;year).get() string类C++98标准通过添加string类扩展了C++库，因此现在可以string类型的变量（使用C++的话说是对象）而不是字符数组来存储字符串。注意：使用string类，必须包含头文件string(std空间)123#include&lt;iostream&gt;#include&lt;string&gt;using namespace std 可以使用数组表示法来访问存储在string对象中的字符 可以使用cout来显示string对象 可以使用cin来将键盘输入存储到string对象中 可以使用C-风格字符串来初始化string对象 声明并初始化 string str1 //声明string str2 = “Hello” //声明并初始化 赋值拼接一个string对象赋给另一个string对象,可以使用运算符+将两个string对象合并起来，还可以使用运算符+=将字符串附加到string对象的末尾。使用函数strcpy( )将字符串复制到字符数组中，使用函数strcat( )将字符串附加到字符数组末尾，注意数组大小 strcpy(charr1,charr2) //赋值2到1strcat(charr1,charr2) //追加2到1的末尾 结构初介绍结构是用户定义的类型，而结构声明定义了这种类型的数据属性。定义了类型后，便可以创建这种类型的变量。因此创建结构包括两步。首先，定义结构描述—它描述并标记了能够存储在结构中的各种数据类型。然后按描述创建结构变量（结构数据对象）关键字struct定义过结构后可以创建结构类型变量，在C++中，结构标记的用法与基本类型名相同。这种变化强调的是，结构声明定义了一种新类型。在C++中，省略struct不会出错 程序中使用结构结构的声明一般放在main()函数外面 并用struct修饰，C++不提倡使用外部变量，但是提倡使用外部结构声明。和数组一样，使用由逗号分隔值列表，并将这些值用花括号括起。在该程序中，每个值占一行，但也可以将它们全部放在同一行中。只是应用逗号将它们分开：12345678struct stu&#123; string name; int age;&#125;;int main()&#123; stu stu1=&#123;\"xiaoming\",18&#125;; return 0;&#125; 可将每个结构成员看作是相应类型的变量123stu stu2;stu2.name=\"xiaohong\";stu2.age=20; 可以将结构作为参数传递给函数，也可以让函数返回一个结构。另外，还可以使用赋值运算符（=）将结构赋给另一个同类型的结构，这样结构中每个成员都将被设置为另一个结构中相应成员的值，即使成员是数组 结构数组可以创建元素为结构的数组，方法和创建基本类型数组完全相同 要初始化结构数组，可以结合使用初始化数组的规则（用逗号分隔每个元素的值，并将这些值用花括号括起）和初始化结构的规则（用逗号分隔每个成员的值，并将这些值用花括号括起）。由于数组中的每个元素都是结构，因此可以使用结构初始化的方式来提供它的值。因此，最终结果为一个被括在花括号中、用逗号分隔的值列表，其中每个值本身又是一个被括在花括号中、用逗号分隔的值列表：1234stu stu1[1]=&#123; &#123;\"xx\",19&#125;, &#123;\"yy\",20&#125;&#125;; 共用体共用体（union）是一种数据格式，它能够存储不同的数据类型，但只能同时存储其中的一种类型，共用体的句法与结构相似，但含义不同12345union demo&#123; int int_val; long long_val; double double_val;&#125;; 可以使用one4all变量来存储int、long或double，条件是在不同的时间进行（共用体每次只能存储一个值，因此它必须有足够的空间来存储最大的成员，所以，共用体的长度为其最大成员的长度）当数据项使用两种或更多种格式（但不会同时使用）时，可节省空间 枚举C++的enum工具提供了另一种创建符号常量的方式，这种方式可以代替const。它还允许定义新类型，但必须按严格的限制进行。使用enum的句法与使用结构相似 enum color(red,yellow,green,blue) 让color成为新类型的名称；color被称为枚举 将red、yellow等作为符号常量(枚举量)，它们对应整数值0～3 可以用枚举名来声明这种类型的变量： “color band;”对于枚举，只定义了赋值运算符 设置枚举量可以使用赋值运算符来显式地设置枚举量的值,指定的值必须是整数,也可以只显式地定义其中一些枚举量的值 enum color(red=1,green=2,blue) //blue=3 指针指针是一个变量，其存储的是值的地址，而不是值本身只需对变量应用地址运算符（&amp;），就可以获得它的位置；例如，如果home是一个变量，则&amp;home是它的地址12int a =10;cout&lt;&lt;&amp;a&lt;&lt;endl; //取取值 处理存储数据的新策略刚好相反，将地址视为指定的量，而将值视为派生量。一种特殊类型的变量—指针用于存储值的地址。因此，指针名表示的是地址。*运算符被称为间接值（indirect velue）或解除引用（dereferencing）运算符，将其应用于指针，可以得到该地址处存储的值（这和乘法使用的符号相同。123int num =10;int *p； //指针p = &amp;num; //指针指向num地址 声明和初始化指针指针声明必须指定指针指向的数据的类型 char* p1,p2; 野指针在C++中创建指针时，计算机将分配用来存储地址的内存，但不会分配用来存储指针所指向的数据的内存。为数据提供空间是一个独立的步骤，忽略这一步无疑是自找麻烦一定要在对指针应用解除引用运算符（*）之前，将指针初始化为一个确定的、适当的地址 指针和数字指针不是整型，虽然计算机通常把地址当作整数来处理。从概念上看，指针与整数是截然不同的类型。 new在C语言中，可以用库函数malloc( )来分配内存；在C++中仍然可以这样做，但C++还有更好的方法—new运算符 程序员要告诉new，需要为哪种数据类型分配内存；new将找到一个长度正确的内存块，并返回该内存块的地址。程序员的责任是将该地址赋给一个指针。下面是一个这样的示例 int * p = new int; new int告诉程序，需要适合存储int的内存。new运算符根据类型来确定需要多少字节的内存。然后，它找到这样的内存，并返回其地址。接下来，将地址赋给pn，pn是被声明为指向int的指针 为一个数据对象（可以是结构，也可以是基本类型）获得并指定分配内存的通用格式如下 typeName * pointName= new typeName; 对于指针，需要指出的另一点是，new分配的内存块通常与常规变量声明分配的内存块不同。变量nights和pd的值都存储在被称为栈（stack）的内存区域中，而new从被称为堆（heap）或自由存储区（free store）的内存区域分配内存 delete释放内存当需要内存时，可以使用new来请求，这只是C++内存管理数据包中有魅力的一个方面。另一个方面是delete运算符，它使得在使用完内存后，能够将其归还给内存池，这是通向最有效地使用内存的关键一步。归还或释放（free）的内存可供程序的其他部分使用。使用delete时，后面要加上指向内存块的指针（这些内存块最初是用new分配的），释放内存，但不会删除指针本身，可以使他指向新的内存用，一定要和new成对用，否则会有内存泄漏危险。123int * p = new int;...delete ps； new来创建动态数组创建动态数组很容易；只要将数组的元素类型和元素数目告诉new即可。必须在类型名后加上方括号，其中包含元素数目 int *p = new int[10];dekete [] p; 它指向包含10个int值的内存块中的第1个元素，假设int占4个字节，则将手指沿正确的方向移动4个字节，手指将指向第2个元素。总共有10个元素，这就是手指的移动范围。因此，new语句提供了识别内存块中每个元素所需的全部信息。使用第一个元素p[0],第二个p[1]… 指针和数组在多数情况下，C++将数组名视为数组的第一个元素的地址，一种例外情况是，将sizeof运算符用于数组名用时，此时将返回整个数组的长度（单位为字节）。使用new来创建数组以及使用指针来访问不同的元素很简单。只要把指针当作数组名对待即可C++允许将指针和整数相加。加1的结果等于原来的地址值加上指向的对象占用的总字节数。还可以将一个指针减去另一个指针，获得两个指针的差。后一种运算将得到一个整数，仅当两个指针指向同一个数组（也可以指向超出结尾的一个位置）时，这种运算才有意义；这将得到两个元素的间隔。 数组的替代品vector模板类vector类似于string类，也是一种动态数组。您可以在运行阶段设置vector对象的长度，可在末尾附加新数据，还可在中间插入新数据。基本上，它是使用new创建动态数组的替代品。实际上，vector类确实使用new和delete来管理内存，但这种工作是自动完成的 vector vt(n_elem) //n_elem整型 vector类的功能比数组强大，但付出的代价是效率稍低。如果您需要的是长度固定的数组，使用数组是更佳的选择，但代价是不那么方便和安全。有鉴于此，C++11新增了模板类array，它也位于名称空间std中。与数组一样，array对象的长度也是固定的，也使用栈（静态内存分配），而不是自由存储区，因此其效率与数组相同，但更方便，更安全。要创建array对象，需要包含头文件array。array对象的创建语法与vector稍有不同： array&lt;typeName,n_elem&gt; arr 问答声明一个长度100个short数组 short arr[100]; 使用模版array声明上面数组 array&lt;short,100&gt;arr; 取数组第二个元素的值 arr[1]; char数组转为字符串 char str[]=”hello”; string对象声明和赋值string str=”Hello”; 结构体声明和初始化123456struct fish&#123; char kind[20]; int weight; float length;&#125;;fish petes=&#123;\"trout\",12,22.22&#125; 枚举的声明和指定值 enum response{yes=0,no=1,maybe=2} ted是double变量，声明一个指向ted的指针，并显示此值 double pd = &amp;ted；cout&lt;&lt; pd &lt;&lt;”\\n”; 声明一折指针指向长度10的float数组，并显示第一个和最后一个值 float *pt =arr;cout&lt;&lt;pt[0]&lt;&lt;pt[9]&lt;&lt;”\\n”; 输入正整数长度创建一个动态int数组，分别用new和vector对象 包含iostream 和vector头文件unsigned int size;cin &gt;&gt;size;int *p =new int(size);vector dv(size); （int *）”HelloWorld”打印什么 是有效的，打印字符串的地址，转化为int指针。 给上面结构体动态分配内存，在取出该结构体的成员值 fish *p = new fish;cout&lt;&lt;”输入 kind:”;cin &gt;&gt; p-&gt;kind; 声明一个vector对象和一个array对象，分别包含10个string对象，使用const指定要包含的string对象数1234567#include&lt;string&gt;#include&lt;vector&gt;#include&lt;array&gt;const int Num&#123;10&#125;; //const int Num=10...std::vector&lt;std::string&gt; vstr(Num);std::array&lt;std::string,Num&gt;astr; 代码1.get和getline练习1234567891011121314151617181920212223242526272829303132333435363738394041#include &lt;iostream&gt;#include &lt;string&gt;using std::cin;using std::cout;using std::endl;using std::string;int main(void)&#123; string strFirstname; cout &lt;&lt; \"What is your first name? \"; getline(cin, strFirstname); string strLastname; cout &lt;&lt; \"What is your last name? \"; cin &gt;&gt; strLastname; char chGrade; cout &lt;&lt; \"What letter grade do you deserve? \"; cin &gt;&gt; chGrade; unsigned unAge; cout &lt;&lt; \"What is your age? \"; cin &gt;&gt; unAge; cout &lt;&lt; \"Name: \" &lt;&lt; strLastname &lt;&lt; \", \" &lt;&lt; strFirstname &lt;&lt; endl; cout &lt;&lt; \"Grade: \" &lt;&lt; char(chGrade + 1) &lt;&lt; endl; cout &lt;&lt; \"Age: \" &lt;&lt; unAge &lt;&lt; endl; cout &lt;&lt; endl; return (0);&#125;-----------------------------------What is your first name? han gxWhat is your last name? xxWhat letter grade do you deserve? nWhat is your age? 18Name: xx, han gxGrade: oAge: 18 2.要求用户首先输入其名，然后输入其姓；然后程序使用一个逗号和空格将姓和名组合起来，并存储和显示组合结果。请使用string对象和头文件string中的函数。123456789101112131415161718192021222324#include &lt;iostream&gt;#include &lt;string&gt;using std::cin;using std::cout;using std::endl;using std::string;int main(void)&#123; string strFirstname; cout &lt;&lt; \"Enter your first name: \"; cin &gt;&gt; strFirstname; string strLastname; cout &lt;&lt; \"Enter your last name: \"; cin &gt;&gt; strLastname; string strInfo = strLastname + \", \" + strFirstname; cout &lt;&lt; \"Here’s the information in a single string: \" &lt;&lt; strInfo; cout &lt;&lt; endl; return (0);&#125; 3.结构CandyBar包含3个成员。第一个成员存储了糖块的品牌；第二个成员存储糖块的重量（可以有小数）；第三个成员存储了糖块的卡路里含量（整数）。请编写一个程序，声明这个结构，创建一个名为snack的CandyBar变量，并将其成员分别初始化为“Mocha Munch”、2.3和350。初始化应在声明snack时进行。最后，程序显示snack变量的内容。123456789101112131415161718192021222324#include &lt;iostream&gt;#include &lt;string&gt;using std::cout;using std::endl;using std::string;struct TCandyBar&#123; string name; double weight; double calories;&#125;;int main(void)&#123; TCandyBar snack = &#123;\"Mocha Munch\", 2.3, 350&#125;; cout &lt;&lt; snack.name &lt;&lt; \"\\n\" &lt;&lt; snack.weight &lt;&lt; \"\\n\" &lt;&lt; snack.calories &lt;&lt; endl; cout &lt;&lt; endl; return (0);&#125; 4.上面结构体包含三个成员，初始化并显示1234567891011121314151617181920212223242526#include &lt;iostream&gt;#include &lt;string&gt;using std::cout;using std::endl;using std::string;struct TCandyBar&#123; string name; double weight; double calories;&#125;;int main(void)&#123; TCandyBar snack[] = &#123;&#123;\"Mocha Munch\", 2.3, 350&#125;, &#123;\"阿尔卑斯\", 6.3, 310&#125;, &#123;\"优の良品\", 2.1, 291&#125;&#125;; cout &lt;&lt; snack[0].name &lt;&lt; \"\\t\" &lt;&lt; snack[0].weight &lt;&lt; \"\\t\" &lt;&lt; snack[0].calories &lt;&lt; endl; cout &lt;&lt; snack[1].name &lt;&lt; \"\\t\" &lt;&lt; snack[1].weight &lt;&lt; \"\\t\" &lt;&lt; snack[1].calories &lt;&lt; endl; cout &lt;&lt; snack[2].name &lt;&lt; \"\\t\" &lt;&lt; snack[2].weight &lt;&lt; \"\\t\" &lt;&lt; snack[2].calories &lt;&lt; endl; cout &lt;&lt; endl; return (0);&#125; 5.程序将请求用户输入信息，然后显示这些信息。请使用cin（或它的方法）和cout,使用结构体123456789101112131415161718192021222324252627282930313233#include &lt;iostream&gt;#include &lt;string&gt;using std::cin;using std::cout;using std::endl;using std::string;struct TPizza&#123; string company_name; double diameter; double weight;&#125;;int main(void)&#123; TPizza pizza; cout &lt;&lt; \"输入披萨名：\"; getline(cin, pizza.company_name); cout &lt;&lt; \"输入披萨直径（厘米）：\"; cin &gt;&gt; pizza.diameter; cout &lt;&lt; \"输入披萨重量（克）：\"; cin &gt;&gt; pizza.weight; cout &lt;&lt; pizza.company_name &lt;&lt; \"公司出品直径为\" &lt;&lt; pizza.diameter &lt;&lt; \"厘米重量为\" &lt;&lt; pizza.weight &lt;&lt; \"克的披萨\" &lt;&lt; endl; cout &lt;&lt; endl; return (0);&#125; 6.使用new来为结构分配内存（上方程序），而不是声明一个结构变量1234567891011121314151617181920212223242526272829303132333435363738#include &lt;iostream&gt;#include &lt;string&gt;using std::cout;using std::cin;using std::endl;using std::string;struct TPizza&#123; string company_name; double diameter; double weight;&#125;;intmain (void) &#123; TPizza* p_pizza = new TPizza; cout &lt;&lt; \"输入披萨直径（厘米）：\"; cin &gt;&gt; p_pizza-&gt;diameter; // cin忽略输入流中的空白符（回车符、空格符、制表符），回车符仍保留在输入流中 cout &lt;&lt; \"输入披萨名：\"; cin.get(); // 提取先前留在输入流中的回车符，否则下面的getline()不会等待输入，而直接读取输入流中已有的回车符 getline(cin, p_pizza-&gt;company_name); cout &lt;&lt; \"输入披萨重量（克）：\"; cin &gt;&gt; p_pizza-&gt;weight; cout &lt;&lt; p_pizza-&gt;company_name &lt;&lt; \"公司出品直径为\" &lt;&lt; p_pizza-&gt;diameter &lt;&lt; \"厘米重量为\" &lt;&lt; p_pizza-&gt;weight &lt;&lt; \"克的披萨\" &lt;&lt; endl; delete p_pizza; p_pizza = NULL; cout &lt;&lt; endl; return (0);&#125; 7.使用new来动态分配数组，而不是声明一个包含3个元素的CandyBar数组1234567891011121314151617181920212223242526272829303132333435363738394041#include &lt;iostream&gt;#include &lt;string&gt;using std::cout;using std::endl;using std::string;struct TCandyBar&#123; string name; double weight; double calories;&#125;;int main(void)&#123; const unsigned k_candybar_num = 3; TCandyBar *candybar_list = new TCandyBar[k_candybar_num]; candybar_list[0].name = \"Mocha Munch\"; candybar_list[0].weight = 2.3; candybar_list[0].calories = 350; candybar_list[1].name = \"阿尔卑斯\"; candybar_list[1].weight = 6.3; candybar_list[1].calories = 310; candybar_list[2].name = \"优の良品\"; candybar_list[2].weight = 2.1; candybar_list[2].calories = 291; cout &lt;&lt; candybar_list[0].name &lt;&lt; \"\\t\" &lt;&lt; candybar_list[0].weight &lt;&lt; \"\\t\" &lt;&lt; candybar_list[0].calories &lt;&lt; endl; cout &lt;&lt; candybar_list[1].name &lt;&lt; \"\\t\" &lt;&lt; candybar_list[1].weight &lt;&lt; \"\\t\" &lt;&lt; candybar_list[1].calories &lt;&lt; endl; cout &lt;&lt; candybar_list[2].name &lt;&lt; \"\\t\" &lt;&lt; candybar_list[2].weight &lt;&lt; \"\\t\" &lt;&lt; candybar_list[2].calories &lt;&lt; endl; delete[] candybar_list; candybar_list = NULL; cout &lt;&lt; endl; return (0);&#125; 8.编写一个程序，让用户输入三次40码跑的成绩，并显示次数和平均成绩。请使用一个array对象来存储数据1234567891011121314151617181920#include &lt;iostream&gt;#include &lt;array&gt;using std::array;using std::cin;using std::cout;using std::endl;int main(void)&#123; const unsigned k_times = 3; array&lt;unsigned, k_times&gt; dash_array; cout &lt;&lt; \"输入三次40米短跑成绩：\"; cin &gt;&gt; dash_array[0] &gt;&gt; dash_array[1] &gt;&gt; dash_array[2]; cout &lt;&lt; \"共计输入\" &lt;&lt; k_times &lt;&lt; \"笔短跑成绩，平均分为\" &lt;&lt; (dash_array[0] + dash_array[1] + dash_array[2]) / 3 &lt;&lt; endl; cout &lt;&lt; endl; return (0);&#125;","categories":[{"name":"C++","slug":"C","permalink":"http://atworking.cn/categories/C/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://atworking.cn/tags/C/"}]},{"title":"C++基础知识02","slug":"C-基础知识02","date":"2019-05-21T06:28:17.000Z","updated":"2019-05-21T09:02:40.134Z","comments":true,"path":"2019/05/21/C-基础知识02/","link":"","permalink":"http://atworking.cn/2019/05/21/C-基础知识02/","excerpt":"第二章：数据结构","text":"第二章：数据结构 简单变量变量名 在名称中只能使用字母字符、数字和下划线（_） 名称的第一个字符不能是数字 区分大写字符与小写字符 不能将C++关键字用作名称 以两个下划线或下划线和大写字母打头的名称被保留给实现（编译器及其使用的资源）使用。以一个下划线开头的名称被保留给实现，用作全局标识符。 C++对于名称的长度没有限制，名称中所有的字符都有意义，但有些平台有长度限制 整型整型就是没有小说部分的数字。char、short、int、long和long long (C++11)每种类型都分有符号版本和无符号版本。检查操作系统中整形的最大长度使用“sizeof”函数。climits头文件常用常量列表： 常量 表示 常量 表示 CHAR_BIT char的位数 CHAR_MAX char的最大值 CHAR_MIN char的最小值 SCHAR_MAX signed char的最大值 SCHAR_MIN signed char的最小值 UCHAR_MAX unsigned char的最大值 SHRT_MAX short的最大值 SHRT_MIN short的最小值 USHRT_MAX unsigned short的最大值 INT_MAX int的最大值 INT_MIN int的最小值 UNIT_MAX unsigned int的最大值 LONG_MAX long的最大值 LONG_MIN long的最小值 ULONG_MAX unsigned long的最大值 LLONG_MAX long long的最大值 LLONG_MIN long long的最小值 ULLONG_MAX unsigned long long的最大值 无符号类型unsigned short/int…假如short表示的范围为−32768到+32767，则无符号版本的表示范围为0-65535，仅当数值不回为负时才使用无符号类型。如果无符号类型为0时再减1，会变成65535，如果超越了限制就会从另一端取值 char类型为存储字母和数值（ASCII码对照表）在默认情况，char不是有符号也不是没符号，一般存储ASCII码 bool类型C++将非零值解释为true，将零解释为false constC++有一种更好的处理符号常量的方法，这种方法就是使用const关键字来修改变量声明和初始化 const int MOnths =12 常量被初始化后，其值就被固定了，编译器将不允许再修改该常量的值两个约定： 将名称的首字母大写，以提醒是个常量 将整个名称大写，使用#define创建常量时通常使用这种约定 浮点数浮点数能够表示带小数部分的数字。C++也有3种浮点类型：float、double和long double注意：1.0也是浮点数 类型转换将一种算术类型的值赋给另一种算术类型的变量时，C++将对值进行转换；表达式中包含不同的类型时，C++将对值进行转换；将参数传递给函数时，C++将对值进行转换.讲一个值赋给取值范围更大的类型不回有什么问题(float-&gt;double int-&gt;long)。将0赋给bool变量时，将被转换为false；而非零值将被转换为true。 潜在数值转换问题： double转换为float:精度（有效数位）降低，值可能超出目标类型的取值范围 浮点类型转换为整型:小数部分丢失，原来的值可能超出目标类型的取值范围 较大的整型转换为较小的整型:原来的值可能超出目标类型的取值范围，通常只复制右边的字节 表达式转换：当同一个表达式中包含两种不同的算术类型时，C++将执行两种自动转换，首先，一些类型在出现时便会自动转换；其次，有些类型在与其他类型同时出现在表达式中时将被转换。自动转换：在计算表达式时，C++将bool、char、unsigned char、signed char和short值转换为int，这些转换被称为整型提升。传递参数时的转换：传递参数时的类型转换通常由C++函数原型控制，C++将对char和short类型（signed和unsigned）应用整型提升。另外，为保持与传统C语言中大量代码的兼容性，在将参数传递给取消原型对参数传递控制的函数时，C++将float参数提升为double。强制类型转换：C++还允许通过强制类型转换机制显式地进行类型转换，强制类型转换不会修改变量本身，而是创建一个新的、指定类型的值，可以在表达式中使用这个值。 （typeName）value 或 typeName(value) 第一种来自C，第二种时C++C++还引入了4个强制类型转换运算符,static_cast&lt;&gt;可用于将值从一种数值类型转换为另一种数值类型,运算符static_cast&lt;&gt;比传统强制类型转换更严格 static_cast（value） C++11的auto声明C++11新增了一个工具，让编译器能够根据初始值的类型推断变量的类型。为此，它重新定义了auto的含义。auto是一个C语言关键字，但很少使用，在初始化声明中，如果使用关键字auto，而不指定变量的类型，编译器将把变量的类型设置成与初始值相同 auto n = 100 //intauto x = 1.5 //double 问答C++数据类型多样化意义： 可以根据需求选择最合适的数据类型。 声明和初始化 short num1=80unsigned int num2 =999 //无符号unsigned long num3 =300000000 //注意不能使用int C++放溢出 C++没有提供放置超过整形限制的功能，但是可以使用头文件“climits”来获取限制范围，选择合适的类型。 寻找编码的字符 char c = 65；cout&lt;&lt;c&lt;&lt;endl; //Acout.put(char(65));//Acout&lt;&lt;char(65)&lt;&lt;endl;cout&lt;&lt;(char)65&lt;&lt;endl; 强制类型转换(x1,x2位double) int(x1+x2) //先将x1+x2计算，在转换整数int(x1)+int(x2) //先将x1,x2转换为整数，再相加。 代码1.设置一个常量作，用户输入身高，转换为英尺1234567891011121314151617#include &lt;iostream&gt;using std::cin;using std::cout;using std::endl;int main(void)&#123; const int k_factorFeetToInch = 12; // 1英尺 = 12英寸 int inches; cout &lt;&lt; \"输入身高，__英寸：\"; cin &gt;&gt; inches; //整除 取余 cout &lt;&lt; \"也就\" &lt;&lt; inches / k_factorFeetToInch &lt;&lt; \"英尺又\" &lt;&lt; inches % k_factorFeetToInch &lt;&lt; \"英寸\"; cout &lt;&lt; endl; return (0);&#125; 2.用户(英尺 英寸)方式输入身高，用已磅为单位输入体重，计算体重指数。1234567891011121314151617181920212223242526272829303132333435363738394041#include &lt;iostream&gt;using std::cin;using std::cout;using std::endl;int main(void)&#123; double height, weight, bmi; // 输入身高以英尺和英寸为单位 int feet, inches; cout &lt;&lt; \"输入身高，__英尺又__英寸：\"; cin &gt;&gt; feet &gt;&gt; inches; // 获得以英寸为单位的身高 const int k_factorFeetToInches = 12; // 1英尺 = 12英寸 height = feet * k_factorFeetToInches + inches; // 获得以米为单位的身高 const double k_factorInchesToMeters = 0.0254; // 1英寸 = 0.0254米 height = height * k_factorInchesToMeters; // 输入体重以磅为单位 int pounds; cout &lt;&lt; \"输入以磅为单位的体重：\"; cin &gt;&gt; pounds; // 获得以千克为单位的体重 const double k_factorPoundsToKilograms = 1 / 2.2; // 1磅 = 1/2.2千克 weight = pounds * k_factorPoundsToKilograms; // 计算BMI bmi = weight / (height * height); // 显示BMI cout &lt;&lt; \"BMI：\" &lt;&lt; bmi &lt;&lt; endl; cout &lt;&lt; endl; return (0);&#125; 3.用户输入秒没然后已天、小时、分钟、秒显示此时间段，12345678910111213141516171819202122232425262728293031#include &lt;iostream&gt;using std::cin;using std::cout;using std::endl;int main(void)&#123; const long k_factorMinuteToSecond = 60; const long k_factorHourToMinute = 60; const long k_factorDayToHour = 24; cout &lt;&lt; \"Enter the number of seconds: \"; long secondsTotal; cin &gt;&gt; secondsTotal; long seconds = secondsTotal % k_factorMinuteToSecond; long minutesTotal = secondsTotal / k_factorMinuteToSecond; long minutes = minutesTotal % k_factorHourToMinute; long hoursTotal = minutesTotal / k_factorHourToMinute; long hours = hoursTotal % k_factorDayToHour; long days = hoursTotal / k_factorDayToHour; cout &lt;&lt; secondsTotal &lt;&lt; \" seconds = \" &lt;&lt; days &lt;&lt; \" days, \" &lt;&lt; hours &lt;&lt; \" hours, \" &lt;&lt; minutes &lt;&lt; \" minutes, \" &lt;&lt; seconds &lt;&lt; \" seconds\"; cout &lt;&lt; endl; return (0);&#125;","categories":[{"name":"C++","slug":"C","permalink":"http://atworking.cn/categories/C/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://atworking.cn/tags/C/"}]},{"title":"C++基础知识01","slug":"C-基础知识01","date":"2019-05-21T02:06:43.000Z","updated":"2019-05-21T06:25:32.075Z","comments":true,"path":"2019/05/21/C-基础知识01/","link":"","permalink":"http://atworking.cn/2019/05/21/C-基础知识01/","excerpt":"第一章：基础了解","text":"第一章：基础了解 基础知识：C++程序的基础模块叫什么 函数 #include什么作用 会在编译之前，使用iostream文件内容替换该编译指令 using namespace std什么作用 使程序可以使用std名称空间的定义，放在函数定义之前，让所有函数都能使用名称空间std中所有元素放在指定函数定义中，让该函数能够使用在特定的函数中使用using std::cout，让该函数能够使用指定元素cout。完全不使用编译指令，而使用命名空间元素时 使用 1std::cout&lt;&lt;\"Hello\"&lt;&lt;std:endl 打印hello并开始新的一行 12cout &lt;&lt; \"hello\\n\"; cout &lt;&lt; \"hello\" &lt;&lt; endl; 创建变量 类型 变量名 1int num 赋值 变量=值 键盘输入赋值 1cin &gt;&gt; num 打印拼接1cout &lt;&lt; \"num value is\"&lt;&lt; num &lt;&lt; \"，is int type\" &lt;&lt;endl 函数定义 返回值类型 函数名 （参数）在没有函数返回值的情况下可以不使用“return”，也可以使用“return;” 123int froop(double t); //函数传入double类型，返回int类型值void noreturn(int n); //传入一个int参数，没有返回值int prune(void); //没有参数传入，但是返回一个int类型值 代码：1.HelloWorld123456789//中文如果乱码将文件改成GBK编码#include &lt;iostream&gt;int main(void)&#123; using std::cout; using std::endl; cout &lt;&lt; \"我是小星星,河南人！！\" &lt;&lt;endl; cout &lt;&lt; endl; return(0);&#125; 2.用户键盘输入一个整形，并计算返回12345678910#include &lt;iostream&gt;int main(void)&#123; using namespace std; //命名空间 double inputNum; //定义一个双精度变量 cout &lt;&lt; \"输入一个double类型的数：\" &lt;&lt; endl; cin &gt;&gt; inputNum; //获取输入的值并赋给定义的变量 cout &lt;&lt; \"计算乘2减3的结果:\" &lt;&lt;inputNum * 2 -3 &lt;&lt; \"。结束计算\" &lt;&lt; endl; cout &lt;&lt; endl; return(0);&#125; 3.用户自定义函数12345678910111213141516171819202122232425#include &lt;iostream&gt;//命名空间using std::cin;using std::cout;using std::endl;//定义函数1void print_one(void)&#123; cout &lt;&lt; \"函数一\" &lt;&lt; endl;&#125;//定义函数2void print_two(void)&#123; cout &lt;&lt; \"函数二\" &lt;&lt; endl;&#125;int main(void)&#123; //调用函数 print_one(); print_two(); cout &lt;&lt; endl; return (0);&#125; 4.用户输入年两，计算包含多少月12345678910111213141516#include &lt;iostream&gt;int main (void) &#123; using std::cout; using std::cin; using std::endl; int age; cout &lt;&lt; \"Enter your age: \"; cin &gt;&gt; age; cout &lt;&lt; \"Your age in months is \" &lt;&lt; age * 12 &lt;&lt; endl; cout &lt;&lt; endl; return (0);&#125; 5.使用自定义函数完成华氏度和摄氏度的转换 华氏温度 = 1.8 * 摄氏度 + 32 12345678910111213141516#include &lt;iostream&gt;double cal(double celsius)&#123; return (1.8 * celsius + 32.0);&#125;int main(void)&#123; using namespace std; double celsius; cout &lt;&lt; \"请输入当前温度(摄氏度)：\"; cin &gt;&gt; celsius; cout &lt;&lt; \"当前华氏度：\" &lt;&lt; cal(celsius) &lt;&lt; \"华氏度\"; cout &lt;&lt; endl; return (0);&#125; 6.用户输入小时和分钟并格式化 xx:xx1234567891011121314151617181920#include &lt;iostream&gt;using std::cin;using std::cout;using std::endl;void fmtTime(int hour, int minute)&#123; cout &lt;&lt; \"当前时间：(\" &lt;&lt; hour &lt;&lt; \":\" &lt;&lt; minute &lt;&lt; \").\" &lt;&lt; endl;&#125;int main(void)&#123; int hour, minute; cout &lt;&lt; \"请输入当前小时:\"; cin &gt;&gt; hour; cout &lt;&lt; \"请输入分钟：\"; cin &gt;&gt; minute; fmtTime(hour, minute); cout &lt;&lt; endl; return (0);&#125;","categories":[{"name":"C++","slug":"C","permalink":"http://atworking.cn/categories/C/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://atworking.cn/tags/C/"}]},{"title":"VSCODE-C++环境配置","slug":"VSCODE-C-环境配置","date":"2019-05-20T02:51:28.000Z","updated":"2019-05-20T06:23:52.274Z","comments":true,"path":"2019/05/20/VSCODE-C-环境配置/","link":"","permalink":"http://atworking.cn/2019/05/20/VSCODE-C-环境配置/","excerpt":"七牛云图床快捷方式： 粘贴图片路径上传：CTRL+ALT+P 直接选择图片上传：CTRL+ALT+O 截屏图片上传： CTRL+ALT+V","text":"七牛云图床快捷方式： 粘贴图片路径上传：CTRL+ALT+P 直接选择图片上传：CTRL+ALT+O 截屏图片上传： CTRL+ALT+V VSCODE下载:VSCODE下载地址 mingw64离线包下载：mingw64离线包下载： 环境配置：mingw64\\bin配置到path变量 vscode 安装插件! 选择c++源码文件夹,新建.vscode目录 配置“launch.json” 1234567891011121314151617181920212223242526272829&#123; // 使用 IntelliSense 了解相关属性。 // 悬停以查看现有属性的描述。 // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387 \"version\": \"0.2.0\", \"configurations\": [ &#123; \"name\": \"(gdb) Launch\", // 配置名称，将会在启动配置的下拉菜单中显示 \"type\": \"cppdbg\", \"request\": \"launch\", \"program\": \"$&#123;workspaceRoot&#125;/$&#123;fileBasenameNoExtension&#125;.exe\",// 将要进行调试的程序的路径 \"args\": [], // 程序调试时传递给程序的命令行参数，一般设为空即可 \"stopAtEntry\": false, // 设为true时程序将暂停在程序入口处，一般设置为false \"cwd\": \"$&#123;workspaceRoot&#125;\", // 调试程序时的工作目录，一般为$&#123;workspaceRoot&#125;即代码所在目录 \"environment\": [], \"externalConsole\": true, // 调试时是否显示控制台窗口，一般设置为true显示控制台 \"MIMode\": \"gdb\", \"miDebuggerPath\": \"C:\\\\mingw64\\\\bin\\\\gdb.exe\", //注意这里要与MinGw的路径对应 \"setupCommands\": [ &#123; \"description\": \"Enable pretty-printing for gdb\", \"text\": \"-enable-pretty-printing\", \"ignoreFailures\": true &#125; ], \"preLaunchTask\": \"g++\", // 调试会话开始前执行的任务，一般为编译程序，c++为g++, c为gcc &#125; ]&#125; 配置tasks.json 1234567891011121314151617&#123; \"version\": \"2.0.0\", \"command\": \"g++\", \"args\": [\"-g\",\"$&#123;file&#125;\",\"-o\",\"$&#123;fileBasenameNoExtension&#125;.exe\"], // 编译命令参数 \"problemMatcher\": &#123; \"owner\": \"cpp\", \"fileLocation\": [\"relative\", \"$&#123;workspaceRoot&#125;\"], \"pattern\": &#123; \"regexp\": \"^(.*):(\\\\d+):(\\\\d+):\\\\s+(warning|error):\\\\s+(.*)$\", \"file\": 1, \"line\": 2, \"column\": 3, \"severity\": 4, \"message\": 5 &#125; &#125; &#125; 配置”settings.json” 12345678&#123; \"files.exclude\": &#123; \"**/.classpath\": true, \"**/.project\": true, \"**/.settings\": true, \"**/.factorypath\": true &#125;&#125;","categories":[{"name":"VSCODE","slug":"VSCODE","permalink":"http://atworking.cn/categories/VSCODE/"}],"tags":[{"name":"IDE","slug":"IDE","permalink":"http://atworking.cn/tags/IDE/"},{"name":"VSCODE","slug":"VSCODE","permalink":"http://atworking.cn/tags/VSCODE/"}]}]}