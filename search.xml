<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[C++基础知识02]]></title>
    <url>%2F2019%2F05%2F21%2FC-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%8602%2F</url>
    <content type="text"><![CDATA[第二章：数据结构 简单变量变量名 在名称中只能使用字母字符、数字和下划线（_） 名称的第一个字符不能是数字 区分大写字符与小写字符 不能将C++关键字用作名称 以两个下划线或下划线和大写字母打头的名称被保留给实现（编译器及其使用的资源）使用。以一个下划线开头的名称被保留给实现，用作全局标识符。 C++对于名称的长度没有限制，名称中所有的字符都有意义，但有些平台有长度限制 整型整型就是没有小说部分的数字。char、short、int、long和long long (C++11)每种类型都分有符号版本和无符号版本。检查操作系统中整形的最大长度使用“sizeof”函数。climits头文件常用常量列表： 常量 表示 常量 表示 CHAR_BIT char的位数 CHAR_MAX char的最大值 CHAR_MIN char的最小值 SCHAR_MAX signed char的最大值 SCHAR_MIN signed char的最小值 UCHAR_MAX unsigned char的最大值 SHRT_MAX short的最大值 SHRT_MIN short的最小值 USHRT_MAX unsigned short的最大值 INT_MAX int的最大值 INT_MIN int的最小值 UNIT_MAX unsigned int的最大值 LONG_MAX long的最大值 LONG_MIN long的最小值 ULONG_MAX unsigned long的最大值 LLONG_MAX long long的最大值 LLONG_MIN long long的最小值 ULLONG_MAX unsigned long long的最大值 无符号类型unsigned short/int…假如short表示的范围为−32768到+32767，则无符号版本的表示范围为0-65535，仅当数值不回为负时才使用无符号类型。如果无符号类型为0时再减1，会变成65535，如果超越了限制就会从另一端取值 char类型为存储字母和数值（ASCII码对照表）在默认情况，char不是有符号也不是没符号，一般存储ASCII码 bool类型C++将非零值解释为true，将零解释为false constC++有一种更好的处理符号常量的方法，这种方法就是使用const关键字来修改变量声明和初始化 const int MOnths =12 常量被初始化后，其值就被固定了，编译器将不允许再修改该常量的值两个约定： 将名称的首字母大写，以提醒是个常量 将整个名称大写，使用#define创建常量时通常使用这种约定 浮点数浮点数能够表示带小数部分的数字。C++也有3种浮点类型：float、double和long double注意：1.0也是浮点数 类型转换将一种算术类型的值赋给另一种算术类型的变量时，C++将对值进行转换；表达式中包含不同的类型时，C++将对值进行转换；将参数传递给函数时，C++将对值进行转换.讲一个值赋给取值范围更大的类型不回有什么问题(float-&gt;double int-&gt;long)。将0赋给bool变量时，将被转换为false；而非零值将被转换为true。 潜在数值转换问题： double转换为float:精度（有效数位）降低，值可能超出目标类型的取值范围 浮点类型转换为整型:小数部分丢失，原来的值可能超出目标类型的取值范围 较大的整型转换为较小的整型:原来的值可能超出目标类型的取值范围，通常只复制右边的字节 表达式转换：当同一个表达式中包含两种不同的算术类型时，C++将执行两种自动转换，首先，一些类型在出现时便会自动转换；其次，有些类型在与其他类型同时出现在表达式中时将被转换。自动转换：在计算表达式时，C++将bool、char、unsigned char、signed char和short值转换为int，这些转换被称为整型提升。传递参数时的转换：传递参数时的类型转换通常由C++函数原型控制，C++将对char和short类型（signed和unsigned）应用整型提升。另外，为保持与传统C语言中大量代码的兼容性，在将参数传递给取消原型对参数传递控制的函数时，C++将float参数提升为double。强制类型转换：C++还允许通过强制类型转换机制显式地进行类型转换，强制类型转换不会修改变量本身，而是创建一个新的、指定类型的值，可以在表达式中使用这个值。 （typeName）value 或 typeName(value) 第一种来自C，第二种时C++C++还引入了4个强制类型转换运算符,static_cast&lt;&gt;可用于将值从一种数值类型转换为另一种数值类型,运算符static_cast&lt;&gt;比传统强制类型转换更严格 static_cast（value） C++11的auto声明C++11新增了一个工具，让编译器能够根据初始值的类型推断变量的类型。为此，它重新定义了auto的含义。auto是一个C语言关键字，但很少使用，在初始化声明中，如果使用关键字auto，而不指定变量的类型，编译器将把变量的类型设置成与初始值相同 auto n = 100 //intauto x = 1.5 //double 问答C++数据类型多样化意义： 可以根据需求选择最合适的数据类型。 声明和初始化 short num1=80unsigned int num2 =999 //无符号unsigned long num3 =300000000 //注意不能使用int C++放溢出 C++没有提供放置超过整形限制的功能，但是可以使用头文件“climits”来获取限制范围，选择合适的类型。 寻找编码的字符 char c = 65；cout&lt;&lt;c&lt;&lt;endl; //Acout.put(char(65));//Acout&lt;&lt;char(65)&lt;&lt;endl;cout&lt;&lt;(char)65&lt;&lt;endl; 强制类型转换(x1,x2位double) int(x1+x2) //先将x1+x2计算，在转换整数int(x1)+int(x2) //先将x1,x2转换为整数，再相加。 代码1.设置一个常量作，用户输入身高，转换为英尺1234567891011121314151617#include &lt;iostream&gt;using std::cin;using std::cout;using std::endl;int main(void)&#123; const int k_factorFeetToInch = 12; // 1英尺 = 12英寸 int inches; cout &lt;&lt; "输入身高，__英寸："; cin &gt;&gt; inches; //整除 取余 cout &lt;&lt; "也就" &lt;&lt; inches / k_factorFeetToInch &lt;&lt; "英尺又" &lt;&lt; inches % k_factorFeetToInch &lt;&lt; "英寸"; cout &lt;&lt; endl; return (0);&#125; 2.用户(英尺 英寸)方式输入身高，用已磅为单位输入体重，计算体重指数。1234567891011121314151617181920212223242526272829303132333435363738394041#include &lt;iostream&gt;using std::cin;using std::cout;using std::endl;int main(void)&#123; double height, weight, bmi; // 输入身高以英尺和英寸为单位 int feet, inches; cout &lt;&lt; "输入身高，__英尺又__英寸："; cin &gt;&gt; feet &gt;&gt; inches; // 获得以英寸为单位的身高 const int k_factorFeetToInches = 12; // 1英尺 = 12英寸 height = feet * k_factorFeetToInches + inches; // 获得以米为单位的身高 const double k_factorInchesToMeters = 0.0254; // 1英寸 = 0.0254米 height = height * k_factorInchesToMeters; // 输入体重以磅为单位 int pounds; cout &lt;&lt; "输入以磅为单位的体重："; cin &gt;&gt; pounds; // 获得以千克为单位的体重 const double k_factorPoundsToKilograms = 1 / 2.2; // 1磅 = 1/2.2千克 weight = pounds * k_factorPoundsToKilograms; // 计算BMI bmi = weight / (height * height); // 显示BMI cout &lt;&lt; "BMI：" &lt;&lt; bmi &lt;&lt; endl; cout &lt;&lt; endl; return (0);&#125; 3.用户输入秒没然后已天、小时、分钟、秒显示此时间段，12345678910111213141516171819202122232425262728293031#include &lt;iostream&gt;using std::cin;using std::cout;using std::endl;int main(void)&#123; const long k_factorMinuteToSecond = 60; const long k_factorHourToMinute = 60; const long k_factorDayToHour = 24; cout &lt;&lt; "Enter the number of seconds: "; long secondsTotal; cin &gt;&gt; secondsTotal; long seconds = secondsTotal % k_factorMinuteToSecond; long minutesTotal = secondsTotal / k_factorMinuteToSecond; long minutes = minutesTotal % k_factorHourToMinute; long hoursTotal = minutesTotal / k_factorHourToMinute; long hours = hoursTotal % k_factorDayToHour; long days = hoursTotal / k_factorDayToHour; cout &lt;&lt; secondsTotal &lt;&lt; " seconds = " &lt;&lt; days &lt;&lt; " days, " &lt;&lt; hours &lt;&lt; " hours, " &lt;&lt; minutes &lt;&lt; " minutes, " &lt;&lt; seconds &lt;&lt; " seconds"; cout &lt;&lt; endl; return (0);&#125;]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[C++基础知识01]]></title>
    <url>%2F2019%2F05%2F21%2FC-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%8601%2F</url>
    <content type="text"><![CDATA[第一章：基础了解 基础知识：C++程序的基础模块叫什么 函数 #include什么作用 会在编译之前，使用iostream文件内容替换该编译指令 using namespace std什么作用 使程序可以使用std名称空间的定义，放在函数定义之前，让所有函数都能使用名称空间std中所有元素放在指定函数定义中，让该函数能够使用在特定的函数中使用using std::cout，让该函数能够使用指定元素cout。完全不使用编译指令，而使用命名空间元素时 使用 1std::cout&lt;&lt;"Hello"&lt;&lt;std:endl 打印hello并开始新的一行 12cout &lt;&lt; "hello\n"; cout &lt;&lt; "hello" &lt;&lt; endl; 创建变量 类型 变量名 1int num 赋值 变量=值 键盘输入赋值 1cin &gt;&gt; num 打印拼接1cout &lt;&lt; "num value is"&lt;&lt; num &lt;&lt; "，is int type" &lt;&lt;endl 函数定义 返回值类型 函数名 （参数）在没有函数返回值的情况下可以不使用“return”，也可以使用“return;” 123int froop(double t); //函数传入double类型，返回int类型值void noreturn(int n); //传入一个int参数，没有返回值int prune(void); //没有参数传入，但是返回一个int类型值 代码：1.HelloWorld123456789//中文如果乱码将文件改成GBK编码#include &lt;iostream&gt;int main(void)&#123; using std::cout; using std::endl; cout &lt;&lt; "我是小星星,河南人！！" &lt;&lt;endl; cout &lt;&lt; endl; return(0);&#125; 2.用户键盘输入一个整形，并计算返回12345678910#include &lt;iostream&gt;int main(void)&#123; using namespace std; //命名空间 double inputNum; //定义一个双精度变量 cout &lt;&lt; "输入一个double类型的数：" &lt;&lt; endl; cin &gt;&gt; inputNum; //获取输入的值并赋给定义的变量 cout &lt;&lt; "计算乘2减3的结果:" &lt;&lt;inputNum * 2 -3 &lt;&lt; "。结束计算" &lt;&lt; endl; cout &lt;&lt; endl; return(0);&#125; 3.用户自定义函数12345678910111213141516171819202122232425#include &lt;iostream&gt;//命名空间using std::cin;using std::cout;using std::endl;//定义函数1void print_one(void)&#123; cout &lt;&lt; "函数一" &lt;&lt; endl;&#125;//定义函数2void print_two(void)&#123; cout &lt;&lt; "函数二" &lt;&lt; endl;&#125;int main(void)&#123; //调用函数 print_one(); print_two(); cout &lt;&lt; endl; return (0);&#125; 4.用户输入年两，计算包含多少月12345678910111213141516#include &lt;iostream&gt;int main (void) &#123; using std::cout; using std::cin; using std::endl; int age; cout &lt;&lt; "Enter your age: "; cin &gt;&gt; age; cout &lt;&lt; "Your age in months is " &lt;&lt; age * 12 &lt;&lt; endl; cout &lt;&lt; endl; return (0);&#125; 5.使用自定义函数完成华氏度和摄氏度的转换 华氏温度 = 1.8 * 摄氏度 + 32 12345678910111213141516#include &lt;iostream&gt;double cal(double celsius)&#123; return (1.8 * celsius + 32.0);&#125;int main(void)&#123; using namespace std; double celsius; cout &lt;&lt; "请输入当前温度(摄氏度)："; cin &gt;&gt; celsius; cout &lt;&lt; "当前华氏度：" &lt;&lt; cal(celsius) &lt;&lt; "华氏度"; cout &lt;&lt; endl; return (0);&#125; 6.用户输入小时和分钟并格式化 xx:xx1234567891011121314151617181920#include &lt;iostream&gt;using std::cin;using std::cout;using std::endl;void fmtTime(int hour, int minute)&#123; cout &lt;&lt; "当前时间：(" &lt;&lt; hour &lt;&lt; ":" &lt;&lt; minute &lt;&lt; ")." &lt;&lt; endl;&#125;int main(void)&#123; int hour, minute; cout &lt;&lt; "请输入当前小时:"; cin &gt;&gt; hour; cout &lt;&lt; "请输入分钟："; cin &gt;&gt; minute; fmtTime(hour, minute); cout &lt;&lt; endl; return (0);&#125;]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VSCODE-C++环境配置]]></title>
    <url>%2F2019%2F05%2F20%2FVSCODE-C-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[七牛云图床快捷方式： 粘贴图片路径上传：CTRL+ALT+P 直接选择图片上传：CTRL+ALT+O 截屏图片上传： CTRL+ALT+V VSCODE下载:VSCODE下载地址 mingw64离线包下载：mingw64离线包下载： 环境配置：mingw64\bin配置到path变量 vscode 安装插件! 选择c++源码文件夹,新建.vscode目录 配置“launch.json” 1234567891011121314151617181920212223242526272829&#123; // 使用 IntelliSense 了解相关属性。 // 悬停以查看现有属性的描述。 // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387 "version": "0.2.0", "configurations": [ &#123; "name": "(gdb) Launch", // 配置名称，将会在启动配置的下拉菜单中显示 "type": "cppdbg", "request": "launch", "program": "$&#123;workspaceRoot&#125;/$&#123;fileBasenameNoExtension&#125;.exe",// 将要进行调试的程序的路径 "args": [], // 程序调试时传递给程序的命令行参数，一般设为空即可 "stopAtEntry": false, // 设为true时程序将暂停在程序入口处，一般设置为false "cwd": "$&#123;workspaceRoot&#125;", // 调试程序时的工作目录，一般为$&#123;workspaceRoot&#125;即代码所在目录 "environment": [], "externalConsole": true, // 调试时是否显示控制台窗口，一般设置为true显示控制台 "MIMode": "gdb", "miDebuggerPath": "C:\\mingw64\\bin\\gdb.exe", //注意这里要与MinGw的路径对应 "setupCommands": [ &#123; "description": "Enable pretty-printing for gdb", "text": "-enable-pretty-printing", "ignoreFailures": true &#125; ], "preLaunchTask": "g++", // 调试会话开始前执行的任务，一般为编译程序，c++为g++, c为gcc &#125; ]&#125; 配置tasks.json 1234567891011121314151617&#123; "version": "2.0.0", "command": "g++", "args": ["-g","$&#123;file&#125;","-o","$&#123;fileBasenameNoExtension&#125;.exe"], // 编译命令参数 "problemMatcher": &#123; "owner": "cpp", "fileLocation": ["relative", "$&#123;workspaceRoot&#125;"], "pattern": &#123; "regexp": "^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$", "file": 1, "line": 2, "column": 3, "severity": 4, "message": 5 &#125; &#125; &#125; 配置”settings.json” 12345678&#123; "files.exclude": &#123; "**/.classpath": true, "**/.project": true, "**/.settings": true, "**/.factorypath": true &#125;&#125;]]></content>
      <categories>
        <category>VSCODE</category>
      </categories>
      <tags>
        <tag>IDE</tag>
        <tag>VSCODE</tag>
      </tags>
  </entry>
</search>
