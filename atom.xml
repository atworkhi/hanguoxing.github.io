<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>懒散的小星星</title>
  
  <subtitle>吃饭睡觉打豆豆</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://atworking.cn/"/>
  <updated>2019-05-22T05:20:34.763Z</updated>
  <id>http://atworking.cn/</id>
  
  <author>
    <name>韩星星</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C++基础知识03</title>
    <link href="http://atworking.cn/2019/05/21/C-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%8603/"/>
    <id>http://atworking.cn/2019/05/21/C-基础知识03/</id>
    <published>2019-05-21T06:28:17.000Z</published>
    <updated>2019-05-22T05:20:34.763Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第三章：复合类型"><a href="#第三章：复合类型" class="headerlink" title="第三章：复合类型"></a>第三章：复合类型</h3><a id="more"></a><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>数组（array）是一种数据格式，能够存储多个同类型的值  </p><h6 id="数组声明和索引"><a href="#数组声明和索引" class="headerlink" title="数组声明和索引"></a>数组声明和索引</h6><p>声明数组：  </p><ol><li>存储在每个元素中的值的类型；  </li><li>数组名；  </li><li>数组中的元素数。  <blockquote><p>typeName arrayName[arraySize]</p></blockquote></li></ol><p>数组元素下标从0开始，arrName[0]第一个元素.<br><img src="http://mdimg.atworking.cn/2019-05-22-09-34-48.png" alt="数组与索引"></p><h6 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h6><blockquote><p>typeName arrayName[arraySize]={xx,xx,xx}<br>arrayName[index] = xxx //赋值<br>arrName[] = {xx,xxx} //长度为2</p></blockquote><p>只有在定义数组时才能使用初始化，此后就不能使用了，也不能将一个数组赋给另一个数组。<br>可以使用下标分别给数组中的元素赋值。<br>提供的值可以少于数组的元素数目,其他元素已0填充。<br>初始化数组时方括号内（[ ]）为空，C++编译器将计算元素个数  </p><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>字符串是存储在内存的连续字节中的一系列字符(char数组)，并以空字符（null character）结尾，空字符被写作\0，其ASCII码为0，用来标记字符串的结尾  </p><h6 id="字符串初始化"><a href="#字符串初始化" class="headerlink" title="字符串初始化"></a>字符串初始化</h6><blockquote><p>char str[3]={‘h’,’g’,’x’,’\0’} //字符串<br>char str[3]={‘h’,’g’,’x’,’h’} //非字符串<br>char str[] = “hello” //包括”\0”的字符串</p></blockquote><p>字符数组初始化为字符串(“”包含原始字符和\0)<br><img src="http://mdimg.atworking.cn/2019-05-22-09-49-47.png" alt="字符数组初始化为字符串"></p><h6 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h6><p>只需要在截取的字符数组的索引赋值“\0”<br><img src="http://mdimg.atworking.cn/2019-05-22-09-54-44.png" alt="字符串截取"></p><h6 id="字符串输入"><a href="#字符串输入" class="headerlink" title="字符串输入"></a>字符串输入</h6><p>cin键盘输入字符串，不能使用空格字符(cin使用空格、制表符、和换行符来确定字符串借宿字符，所以只能接收一个单词，并自动在此单词后添加\0)<br><strong>读取一行</strong><br>在istream中提供了面向行的成员函数“getline()”和“get()”,直到读取换行符。<br>cin.getline()丢弃换行符,参数1：需要存储输入内容的名称，参数2：读取的字符数(10的话只能读取9个字符)</p><blockquote><p>cin.getline(name,size)</p></blockquote><p>cin.get()将换行符保留在输入序列中，  </p><ol><li>第一种是参数和getline类似。  </li><li><p>第二种不带任何参数的get,可以读取下一个字符(包括换行符)因此可以用它来处理换行符，为读取下一行输入做好准备</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cin</span>.get(name,size) <span class="comment">//读取第一行</span></span><br><span class="line"><span class="built_in">cin</span>.get()  <span class="comment">//读取换行</span></span><br><span class="line"><span class="built_in">cin</span>.get(name,size)  <span class="comment">//读取第二行</span></span><br></pre></td></tr></table></figure></li><li><p>第三种有参和无参结合使用.</p><blockquote><p>cin,get(name,size).get()</p></blockquote></li></ol><p><strong>读取空行</strong><br>当getline( )或get( )读取空行时，将设置失效位，接下来的输入将被阻断，可以使用”cin.clear()”恢复<br><strong>使用数字和字符串</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cin</span> &gt;&gt; year;</span><br><span class="line"><span class="keyword">char</span> address[<span class="number">90</span>];</span><br><span class="line"><span class="built_in">cin</span>.getline(address,<span class="number">90</span>)</span><br><span class="line">---------------------------------</span><br><span class="line">当用户输入year时回车直接运行程序，不回让输入address,因为<span class="built_in">cin</span>.getline获取换行符，就默认没有内容，并不包含换行符，结速。</span><br><span class="line">解决办法：</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;year; <span class="comment">//</span></span><br><span class="line"><span class="built_in">cin</span>.get();<span class="comment">//获取换行符</span></span><br><span class="line">或</span><br><span class="line">(<span class="built_in">cin</span>&gt;&gt;year).get()</span><br></pre></td></tr></table></figure></p><h4 id="string类"><a href="#string类" class="headerlink" title="string类"></a>string类</h4><p>C++98标准通过添加string类扩展了C++库，因此现在可以string类型的变量（使用C++的话说是对象）而不是字符数组来存储字符串。<br><strong>注意：使用string类，必须包含头文件string(std空间)</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span></span><br></pre></td></tr></table></figure></p><ul><li>可以使用数组表示法来访问存储在string对象中的字符  </li><li>可以使用cout来显示string对象  </li><li>可以使用cin来将键盘输入存储到string对象中  </li><li>可以使用C-风格字符串来初始化string对象</li></ul><h6 id="声明并初始化"><a href="#声明并初始化" class="headerlink" title="声明并初始化"></a>声明并初始化</h6><blockquote><p>string str1  //声明<br>string str2 = “Hello” //声明并初始化</p></blockquote><h6 id="赋值拼接"><a href="#赋值拼接" class="headerlink" title="赋值拼接"></a>赋值拼接</h6><p>一个string对象赋给另一个string对象,可以使用运算符+将两个string对象合并起来，还可以使用运算符+=将字符串附加到string对象的末尾。<br>使用函数strcpy( )将字符串复制到字符数组中，使用函数strcat( )将字符串附加到字符数组末尾，注意数组大小</p><blockquote><p>strcpy(charr1,charr2) //赋值2到1<br>strcat(charr1,charr2) //追加2到1的末尾</p></blockquote><h4 id="结构初介绍"><a href="#结构初介绍" class="headerlink" title="结构初介绍"></a>结构初介绍</h4><p>结构是用户定义的类型，而结构声明定义了这种类型的数据属性。定义了类型后，便可以创建这种类型的变量。因此创建结构包括两步。首先，定义结构描述—它描述并标记了能够存储在结构中的各种数据类型。然后按描述创建结构变量（结构数据对象）<br><strong>关键字struct</strong><br><img src="http://mdimg.atworking.cn/2019-05-22-10-43-48.png" alt="结构类型"><br>定义过结构后可以创建结构类型变量，在C++中，结构标记的用法与基本类型名相同。这种变化强调的是，结构声明定义了一种新类型。在C++中，省略struct不会出错</p><h6 id="程序中使用结构"><a href="#程序中使用结构" class="headerlink" title="程序中使用结构"></a>程序中使用结构</h6><p>结构的声明一般放在main()函数外面 并用struct修饰，C++不提倡使用外部变量，但是提倡使用外部结构声明。<br>和数组一样，使用由逗号分隔值列表，并将这些值用花括号括起。在该程序中，每个值占一行，但也可以将它们全部放在同一行中。只是应用逗号将它们分开：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span>&#123;</span></span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">stu stu1=&#123;<span class="string">"xiaoming"</span>,<span class="number">18</span>&#125;;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可将每个结构成员看作是相应类型的变量<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stu stu2;</span><br><span class="line">stu2.name=<span class="string">"xiaohong"</span>;</span><br><span class="line">stu2.age=<span class="number">20</span>;</span><br></pre></td></tr></table></figure></p><p>可以将结构作为参数传递给函数，也可以让函数返回一个结构。另外，还可以使用赋值运算符（=）将结构赋给另一个同类型的结构，这样结构中每个成员都将被设置为另一个结构中相应成员的值，即使成员是数组</p><h6 id="结构数组"><a href="#结构数组" class="headerlink" title="结构数组"></a>结构数组</h6><p>可以创建元素为结构的数组，方法和创建基本类型数组完全相同</p><p>要初始化结构数组，可以结合使用初始化数组的规则（用逗号分隔每个元素的值，并将这些值用花括号括起）和初始化结构的规则（用逗号分隔每个成员的值，并将这些值用花括号括起）。由于数组中的每个元素都是结构，因此可以使用结构初始化的方式来提供它的值。因此，最终结果为一个被括在花括号中、用逗号分隔的值列表，其中每个值本身又是一个被括在花括号中、用逗号分隔的值列表：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">stu stu1[<span class="number">1</span>]=&#123;</span><br><span class="line">&#123;<span class="string">"xx"</span>,<span class="number">19</span>&#125;,</span><br><span class="line">&#123;<span class="string">"yy"</span>,<span class="number">20</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h4 id="共用体"><a href="#共用体" class="headerlink" title="共用体"></a>共用体</h4><p>共用体（union）是一种数据格式，它能够存储不同的数据类型，但只能同时存储其中的一种类型，共用体的句法与结构相似，但含义不同<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> demo&#123;</span><br><span class="line"><span class="keyword">int</span> int_val;</span><br><span class="line"><span class="keyword">long</span> long_val;</span><br><span class="line"><span class="keyword">double</span> double_val;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>可以使用one4all变量来存储int、long或double，条件是在不同的时间进行（共用体每次只能存储一个值，因此它必须有足够的空间来存储最大的成员，所以，共用体的长度为其最大成员的长度）<br>当数据项使用两种或更多种格式（但不会同时使用）时，可节省空间</p><h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><p>C++的enum工具提供了另一种创建符号常量的方式，这种方式可以代替const。它还允许定义新类型，但必须按严格的限制进行。使用enum的句法与使用结构相似</p><blockquote><p>enum color(red,yellow,green,blue)</p></blockquote><ul><li>让color成为新类型的名称；color被称为枚举</li><li>将red、yellow等作为符号常量(枚举量)，它们对应整数值0～3</li></ul><p>可以用枚举名来声明这种类型的变量： “color band;”<br>对于枚举，只定义了赋值运算符</p><h6 id="设置枚举量"><a href="#设置枚举量" class="headerlink" title="设置枚举量"></a>设置枚举量</h6><p>可以使用赋值运算符来显式地设置枚举量的值,指定的值必须是整数,也可以只显式地定义其中一些枚举量的值</p><blockquote><p>enum color(red=1,green=2,blue) //blue=3</p></blockquote><h4 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h4><p>指针是一个变量，其存储的是值的地址，而不是值本身<br>只需对变量应用地址运算符（&amp;），就可以获得它的位置；例如，如果home是一个变量，则&amp;home是它的地址<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a =<span class="number">10</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;&amp;a&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//取取值</span></span><br></pre></td></tr></table></figure></p><p>处理存储数据的新策略刚好相反，将地址视为指定的量，而将值视为派生量。一种特殊类型的变量—指针用于存储值的地址。因此，指针名表示的是地址。*运算符被称为间接值（indirect velue）或解除引用（dereferencing）运算符，将其应用于指针，可以得到该地址处存储的值（这和乘法使用的符号相同。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num =<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> *p； <span class="comment">//指针</span></span><br><span class="line">p = &amp;num;<span class="comment">//指针指向num地址</span></span><br></pre></td></tr></table></figure></p><h6 id="声明和初始化指针"><a href="#声明和初始化指针" class="headerlink" title="声明和初始化指针"></a>声明和初始化指针</h6><p>指针声明必须指定指针指向的数据的类型</p><blockquote><p>char* p1,p2;</p></blockquote><h6 id="野指针"><a href="#野指针" class="headerlink" title="野指针"></a>野指针</h6><p>在C++中创建指针时，计算机将分配用来存储地址的内存，但不会分配用来存储指针所指向的数据的内存。为数据提供空间是一个独立的步骤，忽略这一步无疑是自找麻烦<br>一定要在对指针应用解除引用运算符（*）之前，将指针初始化为一个确定的、适当的地址</p><h6 id="指针和数字"><a href="#指针和数字" class="headerlink" title="指针和数字"></a>指针和数字</h6><p>指针不是整型，虽然计算机通常把地址当作整数来处理。从概念上看，指针与整数是截然不同的类型。  </p><h6 id="new"><a href="#new" class="headerlink" title="new"></a>new</h6><p>在C语言中，可以用库函数malloc( )来分配内存；在C++中仍然可以这样做，但C++还有更好的方法—new运算符  </p><p>程序员要告诉new，需要为哪种数据类型分配内存；new将找到一个长度正确的内存块，并返回该内存块的地址。程序员的责任是将该地址赋给一个指针。下面是一个这样的示例</p><blockquote><p>int * p = new int;</p></blockquote><p>new int告诉程序，需要适合存储int的内存。new运算符根据类型来确定需要多少字节的内存。然后，它找到这样的内存，并返回其地址。接下来，将地址赋给pn，pn是被声明为指向int的指针  </p><p>为一个数据对象（可以是结构，也可以是基本类型）获得并指定分配内存的通用格式如下</p><blockquote><p>typeName * pointName= new typeName;</p></blockquote><p>对于指针，需要指出的另一点是，new分配的内存块通常与常规变量声明分配的内存块不同。变量nights和pd的值都存储在被称为栈（stack）的内存区域中，而new从被称为堆（heap）或自由存储区（free store）的内存区域分配内存</p><h6 id="delete释放内存"><a href="#delete释放内存" class="headerlink" title="delete释放内存"></a>delete释放内存</h6><p>当需要内存时，可以使用new来请求，这只是C++内存管理数据包中有魅力的一个方面。另一个方面是delete运算符，它使得在使用完内存后，能够将其归还给内存池，这是通向最有效地使用内存的关键一步。归还或释放（free）的内存可供程序的其他部分使用。使用delete时，后面要加上指向内存块的指针（这些内存块最初是用new分配的），释放内存，但不会删除指针本身，可以使他指向新的内存用，一定要和new成对用，否则会有内存泄漏危险。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int * p = new int;</span><br><span class="line">...</span><br><span class="line">delete ps；</span><br></pre></td></tr></table></figure></p><h6 id="new来创建动态数组"><a href="#new来创建动态数组" class="headerlink" title="new来创建动态数组"></a>new来创建动态数组</h6><p>创建动态数组很容易；只要将数组的元素类型和元素数目告诉new即可。必须在类型名后加上方括号，其中包含元素数目</p><blockquote><p>int *p = new int[10];<br>dekete [] p;</p></blockquote><p>它指向包含10个int值的内存块中的第1个元素，假设int占4个字节，则将手指沿正确的方向移动4个字节，手指将指向第2个元素。总共有10个元素，这就是手指的移动范围。因此，new语句提供了识别内存块中每个元素所需的全部信息。<br>使用第一个元素p[0],第二个p[1]…  </p><h6 id="指针和数组"><a href="#指针和数组" class="headerlink" title="指针和数组"></a>指针和数组</h6><p>在多数情况下，C++将数组名视为数组的第一个元素的地址，一种例外情况是，将sizeof运算符用于数组名用时，此时将返回整个数组的长度（单位为字节）。使用new来创建数组以及使用指针来访问不同的元素很简单。只要把指针当作数组名对待即可<br>C++允许将指针和整数相加。加1的结果等于原来的地址值加上指向的对象占用的总字节数。还可以将一个指针减去另一个指针，获得两个指针的差。后一种运算将得到一个整数，仅当两个指针指向同一个数组（也可以指向超出结尾的一个位置）时，这种运算才有意义；这将得到两个元素的间隔。</p><h4 id="数组的替代品vector"><a href="#数组的替代品vector" class="headerlink" title="数组的替代品vector"></a>数组的替代品vector</h4><p>模板类vector类似于string类，也是一种动态数组。您可以在运行阶段设置vector对象的长度，可在末尾附加新数据，还可在中间插入新数据。基本上，它是使用new创建动态数组的替代品。实际上，vector类确实使用new和delete来管理内存，但这种工作是自动完成的</p><blockquote><p>vector<typename> vt(n_elem) //n_elem整型</typename></p></blockquote><p>vector类的功能比数组强大，但付出的代价是效率稍低。如果您需要的是长度固定的数组，使用数组是更佳的选择，但代价是不那么方便和安全。有鉴于此，C++11新增了模板类array，它也位于名称空间std中。与数组一样，array对象的长度也是固定的，也使用栈（静态内存分配），而不是自由存储区，因此其效率与数组相同，但更方便，更安全。要创建array对象，需要包含头文件array。array对象的创建语法与vector稍有不同：</p><blockquote><p>array&lt;typeName,n_elem&gt; arr</p></blockquote><h4 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h4><p><strong>声明一个长度100个short数组</strong></p><blockquote><p>short arr[100];</p></blockquote><p><strong>使用模版array声明上面数组</strong></p><blockquote><p>array&lt;short,100&gt;arr;</p></blockquote><p><strong>取数组第二个元素的值</strong></p><blockquote><p>arr[1];</p></blockquote><p><strong>char数组转为字符串</strong></p><blockquote><p>char str[]=”hello”;</p></blockquote><p><strong>string对象声明和赋值</strong><br>string str=”Hello”;</p><p><strong>结构体声明和初始化</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fish</span>&#123;</span></span><br><span class="line"><span class="keyword">char</span> kind[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> weight;</span><br><span class="line"><span class="keyword">float</span> length;</span><br><span class="line">&#125;;</span><br><span class="line">fish petes=&#123;<span class="string">"trout"</span>,<span class="number">12</span>,<span class="number">22.22</span>&#125;</span><br></pre></td></tr></table></figure></p><p><strong>枚举的声明和指定值</strong></p><blockquote><p>enum response{yes=0,no=1,maybe=2}</p></blockquote><p><strong>ted是double变量，声明一个指向ted的指针，并显示此值</strong></p><blockquote><p>double <em>pd = &amp;ted；<br>cout&lt;&lt; </em>pd &lt;&lt;”\n”;</p></blockquote><p><strong>声明一折指针指向长度10的float数组，并显示第一个和最后一个值</strong></p><blockquote><p>float *pt =arr;<br>cout&lt;&lt;pt[0]&lt;&lt;pt[9]&lt;&lt;”\n”;</p></blockquote><p><strong>输入正整数长度创建一个动态int数组，分别用new和vector对象</strong></p><blockquote><p>包含iostream 和vector头文件<br>unsigned int size;<br>cin &gt;&gt;size;<br>int *p =new int(size);<br>vector<int> dv(size);</int></p></blockquote><p><strong>（int *）”HelloWorld”打印什么</strong></p><blockquote><p>是有效的，打印字符串的地址，转化为int指针。</p></blockquote><p><strong>给上面结构体动态分配内存，在取出该结构体的成员值</strong></p><blockquote><p>fish *p = new fish;<br>cout&lt;&lt;”输入 kind:”;<br>cin &gt;&gt; p-&gt;kind;</p></blockquote><p><strong>声明一个vector对象和一个array对象，分别包含10个string对象，使用const指定要包含的string对象数</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Num&#123;<span class="number">10</span>&#125;; <span class="comment">//const int Num=10</span></span><br><span class="line">...</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; vstr(Num);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>,Num&gt;astr;</span><br></pre></td></tr></table></figure></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>1.get和getline练习<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> strFirstname;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"What is your first name? "</span>;</span><br><span class="line">    getline(<span class="built_in">cin</span>, strFirstname);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> strLastname;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"What is your last name? "</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; strLastname;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> chGrade;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"What letter grade do you deserve? "</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; chGrade;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> unAge;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"What is your age? "</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; unAge;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Name: "</span> &lt;&lt; strLastname &lt;&lt; <span class="string">", "</span> &lt;&lt; strFirstname &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Grade: "</span> &lt;&lt; <span class="keyword">char</span>(chGrade + <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Age: "</span> &lt;&lt; unAge &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">-----------------------------------</span><br><span class="line">What is your first name? han gx</span><br><span class="line">What is your last name? xx</span><br><span class="line">What letter grade <span class="keyword">do</span> you deserve? n</span><br><span class="line">What is your age? <span class="number">18</span></span><br><span class="line">Name: xx, han gx</span><br><span class="line">Grade: o</span><br><span class="line">Age: <span class="number">18</span></span><br></pre></td></tr></table></figure></p><p>2.要求用户首先输入其名，然后输入其姓；然后程序使用一个逗号和空格将姓和名组合起来，并存储和显示组合结果。请使用string对象和头文件string中的函数。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> strFirstname;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter your first name: "</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; strFirstname;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> strLastname;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter your last name: "</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; strLastname;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> strInfo = strLastname + <span class="string">", "</span> + strFirstname;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Here’s the information in a single string: "</span> &lt;&lt; strInfo;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.结构CandyBar包含3个成员。第一个成员存储了糖块的品牌；第二个成员存储糖块的重量（可以有小数）；第三个成员存储了糖块的卡路里含量（整数）。请编写一个程序，声明这个结构，创建一个名为snack的CandyBar变量，并将其成员分别初始化为“Mocha Munch”、2.3和350。初始化应在声明snack时进行。最后，程序显示snack变量的内容。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TCandyBar</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">double</span> weight;</span><br><span class="line">    <span class="keyword">double</span> calories;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TCandyBar snack = &#123;<span class="string">"Mocha Munch"</span>, <span class="number">2.3</span>, <span class="number">350</span>&#125;;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; snack.name &lt;&lt; <span class="string">"\n"</span></span><br><span class="line">         &lt;&lt; snack.weight &lt;&lt; <span class="string">"\n"</span></span><br><span class="line">         &lt;&lt; snack.calories &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4.上面结构体包含三个成员，初始化并显示<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TCandyBar</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">double</span> weight;</span><br><span class="line"><span class="keyword">double</span> calories;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TCandyBar snack[] = &#123;&#123;<span class="string">"Mocha Munch"</span>, <span class="number">2.3</span>, <span class="number">350</span>&#125;,</span><br><span class="line"> &#123;<span class="string">"阿尔卑斯"</span>, <span class="number">6.3</span>, <span class="number">310</span>&#125;,</span><br><span class="line"> &#123;<span class="string">"优の良品"</span>, <span class="number">2.1</span>, <span class="number">291</span>&#125;&#125;;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; snack[<span class="number">0</span>].name &lt;&lt; <span class="string">"\t"</span> &lt;&lt; snack[<span class="number">0</span>].weight &lt;&lt; <span class="string">"\t"</span> &lt;&lt; snack[<span class="number">0</span>].calories &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; snack[<span class="number">1</span>].name &lt;&lt; <span class="string">"\t"</span> &lt;&lt; snack[<span class="number">1</span>].weight &lt;&lt; <span class="string">"\t"</span> &lt;&lt; snack[<span class="number">1</span>].calories &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; snack[<span class="number">2</span>].name &lt;&lt; <span class="string">"\t"</span> &lt;&lt; snack[<span class="number">2</span>].weight &lt;&lt; <span class="string">"\t"</span> &lt;&lt; snack[<span class="number">2</span>].calories &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>5.程序将请求用户输入信息，然后显示这些信息。请使用cin（或它的方法）和cout,使用结构体<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TPizza</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">string</span> company_name;</span><br><span class="line">    <span class="keyword">double</span> diameter;</span><br><span class="line">    <span class="keyword">double</span> weight;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TPizza pizza;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"输入披萨名："</span>;</span><br><span class="line">    getline(<span class="built_in">cin</span>, pizza.company_name);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"输入披萨直径（厘米）："</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; pizza.diameter;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"输入披萨重量（克）："</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; pizza.weight;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; pizza.company_name &lt;&lt; <span class="string">"公司出品直径为"</span> &lt;&lt; pizza.diameter &lt;&lt; <span class="string">"厘米重量为"</span> &lt;&lt; pizza.weight &lt;&lt; <span class="string">"克的披萨"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>6.使用new来为结构分配内存（上方程序），而不是声明一个结构变量<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span><span class="title">TPizza</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">string</span>company_name;</span><br><span class="line"><span class="keyword">double</span>diameter;</span><br><span class="line"><span class="keyword">double</span>weight;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span></span><br><span class="line">main (<span class="keyword">void</span>) </span><br><span class="line">&#123;     </span><br><span class="line">TPizza*p_pizza = <span class="keyword">new</span> TPizza;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输入披萨直径（厘米）："</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; p_pizza-&gt;diameter;<span class="comment">// cin忽略输入流中的空白符（回车符、空格符、制表符），回车符仍保留在输入流中</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输入披萨名："</span>;</span><br><span class="line"><span class="built_in">cin</span>.get(); <span class="comment">// 提取先前留在输入流中的回车符，否则下面的getline()不会等待输入，而直接读取输入流中已有的回车符</span></span><br><span class="line">getline(<span class="built_in">cin</span>, p_pizza-&gt;company_name);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输入披萨重量（克）："</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; p_pizza-&gt;weight;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p_pizza-&gt;company_name &lt;&lt; <span class="string">"公司出品直径为"</span> &lt;&lt; p_pizza-&gt;diameter &lt;&lt; <span class="string">"厘米重量为"</span> &lt;&lt; p_pizza-&gt;weight &lt;&lt; <span class="string">"克的披萨"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> p_pizza;</span><br><span class="line">p_pizza = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>7.使用new来动态分配数组，而不是声明一个包含3个元素的CandyBar数组<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TCandyBar</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">double</span> weight;</span><br><span class="line">    <span class="keyword">double</span> calories;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">unsigned</span> k_candybar_num = <span class="number">3</span>;</span><br><span class="line">    TCandyBar *candybar_list = <span class="keyword">new</span> TCandyBar[k_candybar_num];</span><br><span class="line"></span><br><span class="line">    candybar_list[<span class="number">0</span>].name = <span class="string">"Mocha Munch"</span>;</span><br><span class="line">    candybar_list[<span class="number">0</span>].weight = <span class="number">2.3</span>;</span><br><span class="line">    candybar_list[<span class="number">0</span>].calories = <span class="number">350</span>;</span><br><span class="line"></span><br><span class="line">    candybar_list[<span class="number">1</span>].name = <span class="string">"阿尔卑斯"</span>;</span><br><span class="line">    candybar_list[<span class="number">1</span>].weight = <span class="number">6.3</span>;</span><br><span class="line">    candybar_list[<span class="number">1</span>].calories = <span class="number">310</span>;</span><br><span class="line"></span><br><span class="line">    candybar_list[<span class="number">2</span>].name = <span class="string">"优の良品"</span>;</span><br><span class="line">    candybar_list[<span class="number">2</span>].weight = <span class="number">2.1</span>;</span><br><span class="line">    candybar_list[<span class="number">2</span>].calories = <span class="number">291</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; candybar_list[<span class="number">0</span>].name &lt;&lt; <span class="string">"\t"</span> &lt;&lt; candybar_list[<span class="number">0</span>].weight &lt;&lt; <span class="string">"\t"</span> &lt;&lt; candybar_list[<span class="number">0</span>].calories &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; candybar_list[<span class="number">1</span>].name &lt;&lt; <span class="string">"\t"</span> &lt;&lt; candybar_list[<span class="number">1</span>].weight &lt;&lt; <span class="string">"\t"</span> &lt;&lt; candybar_list[<span class="number">1</span>].calories &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; candybar_list[<span class="number">2</span>].name &lt;&lt; <span class="string">"\t"</span> &lt;&lt; candybar_list[<span class="number">2</span>].weight &lt;&lt; <span class="string">"\t"</span> &lt;&lt; candybar_list[<span class="number">2</span>].calories &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span>[] candybar_list;</span><br><span class="line">    candybar_list = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>8.编写一个程序，让用户输入三次40码跑的成绩，并显示次数和平均成绩。请使用一个array对象来存储数据<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">array</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">unsigned</span> k_times = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">array</span>&lt;<span class="keyword">unsigned</span>, k_times&gt; dash_array;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"输入三次40米短跑成绩："</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; dash_array[<span class="number">0</span>] &gt;&gt; dash_array[<span class="number">1</span>] &gt;&gt; dash_array[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"共计输入"</span> &lt;&lt; k_times &lt;&lt; <span class="string">"笔短跑成绩，平均分为"</span> &lt;&lt; (dash_array[<span class="number">0</span>] + dash_array[<span class="number">1</span>] + dash_array[<span class="number">2</span>]) / <span class="number">3</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;第三章：复合类型&quot;&gt;&lt;a href=&quot;#第三章：复合类型&quot; class=&quot;headerlink&quot; title=&quot;第三章：复合类型&quot;&gt;&lt;/a&gt;第三章：复合类型&lt;/h3&gt;
    
    </summary>
    
      <category term="C++" scheme="http://atworking.cn/categories/C/"/>
    
    
      <category term="C++" scheme="http://atworking.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++基础知识02</title>
    <link href="http://atworking.cn/2019/05/21/C-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%8602/"/>
    <id>http://atworking.cn/2019/05/21/C-基础知识02/</id>
    <published>2019-05-21T06:28:17.000Z</published>
    <updated>2019-05-21T09:02:40.134Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第二章：数据结构"><a href="#第二章：数据结构" class="headerlink" title="第二章：数据结构"></a>第二章：数据结构</h3><a id="more"></a><h4 id="简单变量"><a href="#简单变量" class="headerlink" title="简单变量"></a>简单变量</h4><h6 id="变量名"><a href="#变量名" class="headerlink" title="变量名"></a>变量名</h6><ol><li>在名称中只能使用字母字符、数字和下划线（_）  </li><li>名称的第一个字符不能是数字</li><li>区分大写字符与小写字符</li><li>不能将C++关键字用作名称</li><li>以两个下划线或下划线和大写字母打头的名称被保留给实现（编译器及其使用的资源）使用。以一个下划线开头的名称被保留给实现，用作全局标识符。</li><li>C++对于名称的长度没有限制，名称中所有的字符都有意义，但有些平台有长度限制  </li></ol><h6 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h6><p>整型就是没有小说部分的数字。<br>char、short、int、long和long long (C++11)每种类型都分有符号版本和无符号版本。<br>检查操作系统中整形的最大长度使用<strong>“sizeof”</strong>函数。<br>climits头文件常用常量列表：</p><table><thead><tr><th>常量</th><th>表示</th><th>常量</th><th>表示</th></tr></thead><tbody><tr><td>CHAR_BIT</td><td>char的位数</td><td>CHAR_MAX</td><td>char的最大值 </td></tr><tr><td>CHAR_MIN</td><td>char的最小值</td><td>SCHAR_MAX</td><td>signed char的最大值</td></tr><tr><td>SCHAR_MIN</td><td>signed char的最小值</td><td>UCHAR_MAX</td><td>unsigned char的最大值</td></tr><tr><td>SHRT_MAX</td><td>short的最大值</td><td>SHRT_MIN</td><td>short的最小值</td></tr><tr><td>USHRT_MAX</td><td>unsigned short的最大值</td><td>INT_MAX</td><td>int的最大值</td></tr><tr><td>INT_MIN</td><td>int的最小值</td><td>UNIT_MAX</td><td>unsigned int的最大值</td></tr><tr><td>LONG_MAX</td><td>long的最大值</td><td>LONG_MIN</td><td>long的最小值</td></tr><tr><td>ULONG_MAX</td><td>unsigned long的最大值</td><td>LLONG_MAX</td><td>long long的最大值</td></tr><tr><td>LLONG_MIN</td><td>long long的最小值</td><td>ULLONG_MAX</td><td>unsigned long long的最大值</td></tr></tbody></table><h6 id="无符号类型"><a href="#无符号类型" class="headerlink" title="无符号类型"></a>无符号类型</h6><p>unsigned short/int…<br>假如short表示的范围为−32768到+32767，则无符号版本的表示范围为0-65535，仅当数值不回为负时才使用无符号类型。<br>如果无符号类型为0时再减1，会变成65535，如果超越了限制就会从另一端取值<br><img src="http://mdimg.atworking.cn/2019-05-21-15-55-07.png" alt="整型溢出"></p><h6 id="char类型"><a href="#char类型" class="headerlink" title="char类型"></a>char类型</h6><p>为存储字母和数值（ASCII码对照表）<br>在默认情况，char不是有符号也不是没符号，一般存储ASCII码</p><h6 id="bool类型"><a href="#bool类型" class="headerlink" title="bool类型"></a>bool类型</h6><p>C++将非零值解释为true，将零解释为false</p><h4 id="const"><a href="#const" class="headerlink" title="const"></a>const</h4><p>C++有一种更好的处理符号常量的方法，这种方法就是使用const关键字来修改变量声明和初始化</p><blockquote><p>const int MOnths =12  </p></blockquote><p>常量被初始化后，其值就被固定了，编译器将不允许再修改该常量的值<br>两个约定：  </p><ol><li>将名称的首字母大写，以提醒是个常量  </li><li>将整个名称大写，使用#define创建常量时通常使用这种约定</li></ol><h4 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h4><p>浮点数能够表示带小数部分的数字。<br>C++也有3种浮点类型：float、double和long double<br>注意：1.0也是浮点数</p><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><p>将一种算术类型的值赋给另一种算术类型的变量时，C++将对值进行转换；表达式中包含不同的类型时，C++将对值进行转换；将参数传递给函数时，C++将对值进行转换.<br>讲一个值赋给取值范围更大的类型不回有什么问题(float-&gt;double int-&gt;long)。将0赋给bool变量时，将被转换为false；而非零值将被转换为true。</p><p><strong>潜在数值转换问题：</strong>  </p><ol><li>double转换为float:精度（有效数位）降低，值可能超出目标类型的取值范围</li><li>浮点类型转换为整型:小数部分丢失，原来的值可能超出目标类型的取值范围</li><li>较大的整型转换为较小的整型:原来的值可能超出目标类型的取值范围，通常只复制右边的字节  </li><li><strong>表达式转换：</strong><br>当同一个表达式中包含两种不同的算术类型时，C++将执行两种自动转换，首先，一些类型在出现时便会自动转换；其次，有些类型在与其他类型同时出现在表达式中时将被转换。<br><strong>自动转换：</strong>在计算表达式时，C++将bool、char、unsigned char、signed char和short值转换为int，这些转换被称为整型提升。<br><strong>传递参数时的转换：</strong>传递参数时的类型转换通常由C++函数原型控制，C++将对char和short类型（signed和unsigned）应用整型提升。另外，为保持与传统C语言中大量代码的兼容性，在将参数传递给取消原型对参数传递控制的函数时，C++将float参数提升为double。<br><strong>强制类型转换：</strong>C++还允许通过强制类型转换机制显式地进行类型转换，强制类型转换不会修改变量本身，而是创建一个新的、指定类型的值，可以在表达式中使用这个值。  <blockquote><p>（typeName）value 或 typeName(value)</p></blockquote></li></ol><p>第一种来自C，第二种时C++<br>C++还引入了4个强制类型转换运算符,static_cast&lt;&gt;可用于将值从一种数值类型转换为另一种数值类型,运算符static_cast&lt;&gt;比传统强制类型转换更严格</p><blockquote><p>static_cast<typename>（value）</typename></p></blockquote><h4 id="C-11的auto声明"><a href="#C-11的auto声明" class="headerlink" title="C++11的auto声明"></a>C++11的auto声明</h4><p>C++11新增了一个工具，让编译器能够根据初始值的类型推断变量的类型。为此，它重新定义了auto的含义。auto是一个C语言关键字，但很少使用，在初始化声明中，如果使用关键字auto，而不指定变量的类型，编译器将把变量的类型设置成与初始值相同</p><blockquote><p>auto n = 100 //int<br>auto x = 1.5 //double</p></blockquote><h4 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h4><p><strong>C++数据类型多样化意义：</strong></p><blockquote><p>可以根据需求选择最合适的数据类型。</p></blockquote><p><strong>声明和初始化</strong></p><blockquote><p>short num1=80<br>unsigned int num2 =999 //无符号<br>unsigned long num3 =300000000 //注意不能使用int</p></blockquote><p><strong>C++放溢出</strong></p><blockquote><p>C++没有提供放置超过整形限制的功能，但是可以使用头文件“climits”来获取限制范围，选择合适的类型。</p></blockquote><p><strong>寻找编码的字符</strong></p><blockquote><p>char c = 65；cout&lt;&lt;c&lt;&lt;endl; //A<br>cout.put(char(65));//A<br>cout&lt;&lt;char(65)&lt;&lt;endl;<br>cout&lt;&lt;(char)65&lt;&lt;endl;</p></blockquote><p><strong>强制类型转换(x1,x2位double)</strong></p><blockquote><p>int(x1+x2) //先将x1+x2计算，在转换整数<br>int(x1)+int(x2) //先将x1,x2转换为整数，再相加。</p></blockquote><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>1.设置一个常量作，用户输入身高，转换为英尺<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> k_factorFeetToInch = <span class="number">12</span>; <span class="comment">// 1英尺 = 12英寸</span></span><br><span class="line">    <span class="keyword">int</span> inches;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"输入身高，__英寸："</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; inches;</span><br><span class="line">    <span class="comment">//整除 取余</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"也就"</span> &lt;&lt; inches / k_factorFeetToInch &lt;&lt; <span class="string">"英尺又"</span> &lt;&lt; inches % k_factorFeetToInch &lt;&lt; <span class="string">"英寸"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.用户(英尺 英寸)方式输入身高，用已磅为单位输入体重，计算体重指数。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> height, weight, bmi;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输入身高以英尺和英寸为单位</span></span><br><span class="line">    <span class="keyword">int</span> feet, inches;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"输入身高，__英尺又__英寸："</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; feet &gt;&gt; inches;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得以英寸为单位的身高</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> k_factorFeetToInches = <span class="number">12</span>; <span class="comment">// 1英尺 = 12英寸</span></span><br><span class="line">    height = feet * k_factorFeetToInches + inches;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得以米为单位的身高</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">double</span> k_factorInchesToMeters = <span class="number">0.0254</span>; <span class="comment">// 1英寸 = 0.0254米</span></span><br><span class="line">    height = height * k_factorInchesToMeters;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输入体重以磅为单位</span></span><br><span class="line">    <span class="keyword">int</span> pounds;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"输入以磅为单位的体重："</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; pounds;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得以千克为单位的体重</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">double</span> k_factorPoundsToKilograms = <span class="number">1</span> / <span class="number">2.2</span>; <span class="comment">// 1磅 = 1/2.2千克</span></span><br><span class="line">    weight = pounds * k_factorPoundsToKilograms;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算BMI</span></span><br><span class="line">    bmi = weight / (height * height);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示BMI</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"BMI："</span> &lt;&lt; bmi &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.用户输入秒没然后已天、小时、分钟、秒显示此时间段，<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">long</span> k_factorMinuteToSecond = <span class="number">60</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">long</span> k_factorHourToMinute = <span class="number">60</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">long</span> k_factorDayToHour = <span class="number">24</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter the number of seconds: "</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> secondsTotal;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; secondsTotal;</span><br><span class="line">    <span class="keyword">long</span> seconds = secondsTotal % k_factorMinuteToSecond;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> minutesTotal = secondsTotal / k_factorMinuteToSecond;</span><br><span class="line">    <span class="keyword">long</span> minutes = minutesTotal % k_factorHourToMinute;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> hoursTotal = minutesTotal / k_factorHourToMinute;</span><br><span class="line">    <span class="keyword">long</span> hours = hoursTotal % k_factorDayToHour;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> days = hoursTotal / k_factorDayToHour;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; secondsTotal &lt;&lt; <span class="string">" seconds = "</span> &lt;&lt; days &lt;&lt; <span class="string">" days, "</span> &lt;&lt; hours &lt;&lt; <span class="string">" hours, "</span> &lt;&lt; minutes &lt;&lt; <span class="string">" minutes, "</span> &lt;&lt; seconds &lt;&lt; <span class="string">" seconds"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;第二章：数据结构&quot;&gt;&lt;a href=&quot;#第二章：数据结构&quot; class=&quot;headerlink&quot; title=&quot;第二章：数据结构&quot;&gt;&lt;/a&gt;第二章：数据结构&lt;/h3&gt;
    
    </summary>
    
      <category term="C++" scheme="http://atworking.cn/categories/C/"/>
    
    
      <category term="C++" scheme="http://atworking.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++基础知识01</title>
    <link href="http://atworking.cn/2019/05/21/C-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%8601/"/>
    <id>http://atworking.cn/2019/05/21/C-基础知识01/</id>
    <published>2019-05-21T02:06:43.000Z</published>
    <updated>2019-05-21T06:25:32.075Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一章：基础了解"><a href="#第一章：基础了解" class="headerlink" title="第一章：基础了解"></a>第一章：基础了解</h3><a id="more"></a><h4 id="基础知识："><a href="#基础知识：" class="headerlink" title="基础知识："></a>基础知识：</h4><p><strong>C++程序的基础模块叫什么</strong>  </p><blockquote><p>函数</p></blockquote><p><strong>#include<iostream>什么作用</iostream></strong></p><blockquote><p>会在编译之前，使用iostream文件内容替换该编译指令</p></blockquote><p><strong>using namespace std什么作用</strong></p><blockquote><p>使程序可以使用std名称空间的定义，<br>放在函数定义之前，让所有函数都能使用名称空间std中所有元素<br>放在指定函数定义中，让该函数能够使用<br>在特定的函数中使用using std::cout，让该函数能够使用指定元素cout。<br>完全不使用编译指令，而使用命名空间元素时 使用</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"Hello"</span>&lt;&lt;<span class="built_in">std</span>:<span class="built_in">endl</span></span><br></pre></td></tr></table></figure><p><strong>打印hello并开始新的一行</strong>  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"hello\n"</span>; </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"hello"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p><strong>创建变量</strong></p><blockquote><p>类型 变量名 </p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num</span><br></pre></td></tr></table></figure><p><strong>赋值</strong></p><blockquote><p>变量=值</p></blockquote><p><strong>键盘输入赋值</strong>  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cin &gt;&gt; num</span><br></pre></td></tr></table></figure><p><strong>打印拼接</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"num value is"</span>&lt;&lt; num &lt;&lt; <span class="string">"，is int type"</span> &lt;&lt;<span class="built_in">endl</span></span><br></pre></td></tr></table></figure></p><p><strong>函数定义</strong></p><blockquote><p>返回值类型 函数名 （参数）<br>在没有函数返回值的情况下可以不使用“return”，也可以使用“return;”</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">froop</span><span class="params">(<span class="keyword">double</span> t)</span></span>; <span class="comment">//函数传入double类型，返回int类型值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">noreturn</span><span class="params">(<span class="keyword">int</span> n)</span></span>; <span class="comment">//传入一个int参数，没有返回值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prune</span><span class="params">(<span class="keyword">void</span>)</span></span>; <span class="comment">//没有参数传入，但是返回一个int类型值</span></span><br></pre></td></tr></table></figure><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><p>1.HelloWorld<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//中文如果乱码将文件改成GBK编码</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"我是小星星,河南人！！"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.用户键盘输入一个整形，并计算返回<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; <span class="comment">//命名空间</span></span><br><span class="line">    <span class="keyword">double</span> inputNum; <span class="comment">//定义一个双精度变量</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"输入一个double类型的数："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; inputNum;    <span class="comment">//获取输入的值并赋给定义的变量</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"计算乘2减3的结果:"</span> &lt;&lt;inputNum * <span class="number">2</span> <span class="number">-3</span> &lt;&lt; <span class="string">"。结束计算"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.用户自定义函数<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//命名空间</span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//定义函数1</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_one</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"函数一"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义函数2</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_two</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"函数二"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//调用函数</span></span><br><span class="line">    print_one();</span><br><span class="line">    print_two();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4.用户输入年两，计算包含多少月<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">void</span>)</span> </span>&#123;     </span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>age;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter your age: "</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; age;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Your age in months is "</span> &lt;&lt; age * <span class="number">12</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>5.使用自定义函数完成华氏度和摄氏度的转换  </p><blockquote><p>华氏温度 = 1.8 * 摄氏度 + 32</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cal</span><span class="params">(<span class="keyword">double</span> celsius)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1.8</span> * celsius + <span class="number">32.0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">    <span class="keyword">double</span> celsius;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入当前温度(摄氏度)："</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; celsius;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"当前华氏度："</span> &lt;&lt; cal(celsius) &lt;&lt; <span class="string">"华氏度"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.用户输入小时和分钟并格式化 xx:xx<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fmtTime</span><span class="params">(<span class="keyword">int</span> hour, <span class="keyword">int</span> minute)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"当前时间：("</span> &lt;&lt; hour &lt;&lt; <span class="string">":"</span> &lt;&lt; minute &lt;&lt; <span class="string">")."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> hour, minute;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入当前小时:"</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; hour;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入分钟："</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; minute;</span><br><span class="line">    fmtTime(hour, minute);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;第一章：基础了解&quot;&gt;&lt;a href=&quot;#第一章：基础了解&quot; class=&quot;headerlink&quot; title=&quot;第一章：基础了解&quot;&gt;&lt;/a&gt;第一章：基础了解&lt;/h3&gt;
    
    </summary>
    
      <category term="C++" scheme="http://atworking.cn/categories/C/"/>
    
    
      <category term="C++" scheme="http://atworking.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>VSCODE-C++环境配置</title>
    <link href="http://atworking.cn/2019/05/20/VSCODE-C-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>http://atworking.cn/2019/05/20/VSCODE-C-环境配置/</id>
    <published>2019-05-20T02:51:28.000Z</published>
    <updated>2019-05-20T06:23:52.274Z</updated>
    
    <content type="html"><![CDATA[<p><code>七牛云图床快捷方式：粘贴图片路径上传：CTRL+ALT+P直接选择图片上传：CTRL+ALT+O截屏图片上传： CTRL+ALT+V</code><br><a id="more"></a></p><h3 id="VSCODE下载"><a href="#VSCODE下载" class="headerlink" title="VSCODE下载:"></a>VSCODE下载:</h3><p><a href="https://code.visualstudio.com/" target="_blank" rel="noopener">VSCODE下载地址</a>  </p><h3 id="mingw64离线包下载："><a href="#mingw64离线包下载：" class="headerlink" title="mingw64离线包下载："></a>mingw64离线包下载：</h3><p><a href="https://sourceforge.net/projects/mingw-w64/files/?source=navbar" target="_blank" rel="noopener">mingw64离线包下载：</a></p><h3 id="环境配置："><a href="#环境配置：" class="headerlink" title="环境配置："></a>环境配置：</h3><p>mingw64\bin配置到path变量</p><p>vscode 安装插件!  </p><p><img src="http://mdimg.atworking.cn/2019-05-20-11-59-03.png" alt="c/c++插件"></p><p>选择c++源码文件夹,新建.vscode目录 </p><p>配置“launch.json”</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // 使用 IntelliSense 了解相关属性。 </span><br><span class="line">    // 悬停以查看现有属性的描述。</span><br><span class="line">    // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span><br><span class="line">    "version": "0.2.0",</span><br><span class="line">    "configurations": [</span><br><span class="line">        &#123;</span><br><span class="line">            "name": "(gdb) Launch", // 配置名称，将会在启动配置的下拉菜单中显示  </span><br><span class="line">            "type": "cppdbg",</span><br><span class="line">            "request": "launch",</span><br><span class="line">            "program": "$&#123;workspaceRoot&#125;/$&#123;fileBasenameNoExtension&#125;.exe",// 将要进行调试的程序的路径</span><br><span class="line">            "args": [], // 程序调试时传递给程序的命令行参数，一般设为空即可</span><br><span class="line">            "stopAtEntry": false, // 设为true时程序将暂停在程序入口处，一般设置为false</span><br><span class="line">            "cwd": "$&#123;workspaceRoot&#125;", // 调试程序时的工作目录，一般为$&#123;workspaceRoot&#125;即代码所在目录   </span><br><span class="line">            "environment": [],</span><br><span class="line">            "externalConsole": true, // 调试时是否显示控制台窗口，一般设置为true显示控制台</span><br><span class="line">            "MIMode": "gdb",</span><br><span class="line">            "miDebuggerPath": "C:\\mingw64\\bin\\gdb.exe", //注意这里要与MinGw的路径对应</span><br><span class="line">            "setupCommands": [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"description"</span>: <span class="string">"Enable pretty-printing for gdb"</span>,</span><br><span class="line">                    <span class="attr">"text"</span>: <span class="string">"-enable-pretty-printing"</span>,</span><br><span class="line">                    <span class="attr">"ignoreFailures"</span>: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            "preLaunchTask": "g++", // 调试会话开始前执行的任务，一般为编译程序，c++为g++, c为gcc  </span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置tasks.json</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"2.0.0"</span>, </span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"g++"</span>, </span><br><span class="line">    "args": ["-g","$&#123;file&#125;","-o","$&#123;fileBasenameNoExtension&#125;.exe"], // 编译命令参数 </span><br><span class="line">    "problemMatcher": &#123; </span><br><span class="line">        "owner": "cpp", </span><br><span class="line">        "fileLocation": ["relative", "$&#123;workspaceRoot&#125;"], </span><br><span class="line">        "pattern": &#123; </span><br><span class="line">            "regexp": "^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$", </span><br><span class="line">            "file": 1, </span><br><span class="line">            "line": 2, </span><br><span class="line">            "column": 3, </span><br><span class="line">            "severity": 4, </span><br><span class="line">            "message": 5 </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>配置”settings.json”</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"files.exclude"</span>: &#123;</span><br><span class="line">        <span class="attr">"**/.classpath"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"**/.project"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"**/.settings"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"**/.factorypath"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;七牛云图床快捷方式：
粘贴图片路径上传：CTRL+ALT+P
直接选择图片上传：CTRL+ALT+O
截屏图片上传： CTRL+ALT+V&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
      <category term="VSCODE" scheme="http://atworking.cn/categories/VSCODE/"/>
    
    
      <category term="IDE" scheme="http://atworking.cn/tags/IDE/"/>
    
      <category term="VSCODE" scheme="http://atworking.cn/tags/VSCODE/"/>
    
  </entry>
  
</feed>
