<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>懒散的小星星</title>
  
  <subtitle>吃饭睡觉打豆豆</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://atworking.cn/"/>
  <updated>2019-06-17T13:22:05.248Z</updated>
  <id>http://atworking.cn/</id>
  
  <author>
    <name>韩星星</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git和GitHub</title>
    <link href="http://atworking.cn/2019/06/17/Git%E5%92%8CGitHub/"/>
    <id>http://atworking.cn/2019/06/17/Git和GitHub/</id>
    <published>2019-06-17T13:19:22.000Z</published>
    <updated>2019-06-17T13:22:05.248Z</updated>
    
    <content type="html"><![CDATA[<p><code>PicGO图床快捷方式：粘贴图片路径上传：CTRL+ALT+U选择图片文件上传: CTRL+ALT+E从输入框上传图片：CTRL+ALT+O</code></p><a id="more"></a><h1 id="Git和GitHub"><a href="#Git和GitHub" class="headerlink" title="Git和GitHub"></a>Git和GitHub</h1><h3 id="Git基本使用："><a href="#Git基本使用：" class="headerlink" title="Git基本使用："></a>Git基本使用：</h3><p>Git的工作域：</p><p><img src="http://mdimg.atworking.cn/img/2019-6-11-15-17-22.png" alt="Git 四工作区域"></p><ol><li><p>下载git: <a href="https://git-scm.com" target="_blank" rel="noopener">https://git-scm.com</a></p></li><li><p>初始化：</p><blockquote><p>git config –global user.name “用户名”</p><p>git config –global user.email “邮箱”</p></blockquote></li><li><p>clone代码到本地仓库</p><blockquote><p>git clone <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:hanguoxing/xxx.git</p><p>git clone <a href="https://github.com/hanguoxing/xxx.git" target="_blank" rel="noopener">https://github.com/hanguoxing/xxx.git</a></p></blockquote></li><li><p>先本地仓库添加当前修改</p><blockquote><p>git add .   //所有修改</p><p>git add -p  //某个文件</p></blockquote></li><li><p>查看状态</p><blockquote><p>git status</p></blockquote></li><li><p>显示帮助信息</p><blockquote><p>git help -g</p></blockquote></li><li><p>回到远程仓库状态(抛弃本地所有修改，回到远程仓库状态)</p><blockquote><p>git fetch –all  &amp;&amp;  git reset –hard origin/master</p></blockquote></li><li><p>重设第一个commit(将所有修改重放回工作区，并清空所有commit)</p><blockquote><p>git update -ref -d HEAD</p></blockquote></li><li><p>输出工作区和暂存区的区别</p><blockquote><p>git diff</p></blockquote></li><li><p>显示本地仓库中任意两个commit文件变动</p><blockquote><p>git diff <commitid> <commitid></commitid></commitid></p></blockquote></li><li><p>显示暂存区和最近版本不同</p><blockquote><p>git diff –cached</p></blockquote></li><li><p>显示工作区、暂存区和本地最近的版本(commit)的不同</p><blockquote><p>git diff HEAD</p></blockquote></li><li><p>快速切换分支</p><blockquote><p>git checkout -</p></blockquote></li><li><p>删除已合并到master的分支</p><blockquote><p>git branch –merged master | grep -v ‘^*| master’ | xargs -n 1 git branch -d </p></blockquote></li><li><p>显示本地分支关联远程仓库的清空</p><blockquote><p>git branch -vv</p></blockquote></li><li><p>关联远程分支</p><blockquote><p>git branch -u origin/branchName</p></blockquote></li><li><p>推送到远程仓库</p><blockquote><p>git push origin/branchName -u</p></blockquote></li><li><p>列出所有远程分支</p><blockquote><p>git branch -r</p></blockquote></li><li><p>列出本地和远程分支</p><blockquote><p>git branch -a</p></blockquote></li><li><p>创建并切换到本地分支</p><blockquote><p>git checkout -b <branchname></branchname></p></blockquote></li><li><p>创建并切换远程分支</p><blockquote><p>git checkout -b <branchname> origin/<branchname></branchname></branchname></p></blockquote></li><li><p>删除本地分支</p><blockquote><p>git branch -d  <localbranchname></localbranchname></p></blockquote></li><li><p>删除远程分支</p><blockquote><p>git push origin –delete <remotebranchname></remotebranchname></p><p>git push origin :<remotebranchname></remotebranchname></p></blockquote></li><li><p>重命名本地分支</p><blockquote><p>git branch -m <newbranchname></newbranchname></p></blockquote></li><li><p>查看标签</p><blockquote><p>git tag</p></blockquote></li><li><p>显示当前分支最近的tag</p><blockquote><p>git describe –tags –abbrev=0 </p></blockquote></li><li><p>创建本地标签</p><blockquote><p>git tag <version-number></version-number></p></blockquote></li><li><p>默认tag是在最近一次commit，执行commit打tag</p><blockquote><p>git tag -a <version-number> -m “描述”  <commit-id></commit-id></version-number></p></blockquote></li><li><p>推送本地标签到远程仓库</p><blockquote><p>git push origin <localversionnumber></localversionnumber></p></blockquote></li><li><p>一次推送所有标签，同步到远程仓库</p><blockquote><p>git push origin –tags</p></blockquote></li><li><p>删除本地标签</p><blockquote><p>git tag -d <tag-name></tag-name></p></blockquote></li><li><p>删除远程标签(需要先删除本地标签)</p><blockquote><p>git push origin :refs/tags/<tag-name></tag-name></p></blockquote></li><li><p>切回某个标签</p><blockquote><p>git checkout -b branch_name tag_name</p></blockquote></li><li><p>放弃工作区的修改</p><blockquote><p>git checkout <file-name></file-name></p></blockquote></li><li><p>放弃所有修改</p><blockquote><p>git checkout .</p></blockquote></li><li><p>恢复删除的文件</p><blockquote><p>git rev-list -n 1 HEAD – &lt;file_path&gt; #得到 deleting_commit </p><p>git checkout &lt;deleting_commit&gt;^ – &lt;file_path&gt; #回到删除文件 deleting_commit 之前的状态 </p></blockquote></li><li><p>以新增一个commit的方式还原某一个commit的修改 </p><blockquote><p>git revert <commit-id> </commit-id></p></blockquote></li><li><p>回到某个commit的状态， 并删除后面的commit </p><blockquote><p>git reset <commit-id>  #默认就是-mixed参数。<br>git reset –mixed HEAD^  #回退至上个版本， 它将重置HEAD到另外一个commit,并且重置暂存区以便和HEAD相匹配， 但是也到此为止。 工作区<br>不会被更改。<br>git reset –soft HEAD~3  #回退至三个版本之前， 只回退了commit的信息， 暂存区和工作区与回退之前保持一致。 如果还要提交， 直接commit<br>即可<br>git reset –hard <commit-id>  #彻底回退到指定commit-id的状态， 暂存区和工作区也会变为指定commit-id版本的内容 </commit-id></commit-id></p></blockquote></li><li><p>修改上一个commit的描述</p><blockquote><p>git commit –amend</p></blockquote></li><li><p>查看commit历史</p><blockquote><p>git log</p></blockquote></li><li><p>查看某段代码谁写的</p><blockquote><p>git blame <file-name></file-name></p></blockquote></li><li><p>显示本地更新过HEAD的git命令记录 </p><blockquote><p>git  reflog</p></blockquote></li><li><p>修改作者名</p><blockquote><p>git commit –amend –author=’Author Name <a href="mailto:&#x65;&#x6d;&#97;&#x69;&#x6c;&#x40;&#x61;&#x64;&#x64;&#114;&#x65;&#x73;&#115;&#46;&#x63;&#111;&#x6d;" target="_blank" rel="noopener">&#x65;&#x6d;&#97;&#x69;&#x6c;&#x40;&#x61;&#x64;&#x64;&#114;&#x65;&#x73;&#115;&#46;&#x63;&#111;&#x6d;</a>‘ </p></blockquote></li><li><p>修改远程仓库url</p><blockquote><p>git remote set-url origin <url> </url></p></blockquote></li><li><p>增加远程仓库</p><blockquote><p>git remote add origin <remote-url> </remote-url></p></blockquote></li><li><p>列出所有远程仓库</p><blockquote><p>git remote</p></blockquote></li><li><p>查看两个星期内的改动 </p><blockquote><p>git whatchanged –since=’2 weeks ago’ </p></blockquote></li><li><p>把A分支的某一个commit， 放到B分支上 </p><blockquote><p>git checkout <branch-name> &amp;&amp; git cherry-pick <commit-id> </commit-id></branch-name></p></blockquote></li><li><p>给git命令起别名 简化操作</p><blockquote><p>git config –global alias.st statu  # git status 简化 git st</p></blockquote></li><li><p>存储当前修改但不执行提交commit</p><blockquote><p>git stash</p></blockquote></li><li><p>保存当前状态， 包括untracked的文件(新建文件)</p><blockquote><p> git stash -u</p></blockquote></li><li><p>显示所有的stashes</p><blockquote><p>git stash list</p></blockquote></li><li><p>回到某个stash的状态</p><blockquote><p>git stash apply \&lt;stash@{n}> </p></blockquote></li><li><p>回到最后一个stash的状态， 并删除这个stash </p><blockquote><p>git stash pop</p></blockquote></li><li><p>删除所有的stash </p><blockquote><p>git stash clear</p></blockquote></li><li><p>从stash中拿出某个文件的修改 </p><blockquote><p>git checkout &lt;stash@{n}&gt; – <file-path> </file-path></p></blockquote></li><li><p>显示所有的tracked文件</p><blockquote><p>git ls-files -t </p></blockquote></li><li><p>显示所有untracked文件</p><blockquote><p>git ls-files –others</p></blockquote></li><li><p>显示所有忽略的文件</p><blockquote><p>git ls-files –others -i –exclude-standard </p></blockquote></li><li><p>强制删除untracked的文件 不会影响tracked的文件的改动 </p><blockquote><p>git clean <file-name> -f</file-name></p></blockquote></li><li><p>强制删除untracked的目录 </p><blockquote><p>git clean <directory-name> -df </directory-name></p></blockquote></li><li><p>显示commit历史(简化)</p><blockquote><p>git log –pretty=oneline –graph –decorate –all </p></blockquote></li><li><p>把某个分支导出成一个文件</p><blockquote><p>git bundle create <file> <branch-name> </branch-name></file></p></blockquote></li><li><p>从包中导入分支 ,新建一个分支， 分支内容就是上面 git bundle create 命令导出的内容 </p><blockquote><p>git clone repo.bundle <repo-dir> -b <branch-name> </branch-name></repo-dir></p></blockquote></li><li><p>执行rebase之前自动stash </p><blockquote><p>git rebase –autostash </p></blockquote></li><li><p>从远程仓库根据ID， 拉下某一状态， 到本地分支 </p><blockquote><p>git fetch origin pull/<id>/head:<branch-name> </branch-name></id></p></blockquote></li><li><p>详细展示一行中的修改 </p><blockquote><p>git diff –word-diff </p></blockquote></li><li><p>清除gitignore文件中记录的文件 </p><blockquote><p>git clean -X -f </p></blockquote></li><li><p>展示忽略的文件 </p><blockquote><p>git status –ignored </p></blockquote></li><li><p>commit历史中显示Branch1有的， 但是Branch2没有commit </p><blockquote><p>git log Branch1 ^Branch2 </p></blockquote></li><li><p>在commit log中显示GPG签名</p><blockquote><p>git log –show-signature </p></blockquote></li><li><p>显示所有的alias和配置</p><blockquote><p>git config –global –list (全局)  # local为当前</p></blockquote></li><li><p>删除全局配置</p><blockquote><p>git config –global –unset <entry-name> </entry-name></p></blockquote></li><li><p>新建并切换到新分支上， 同时这个分支没有任何commit </p><blockquote><p>git checkout –orphan <branch-name> </branch-name></p></blockquote></li><li><p>展示任意分支某一文件的内容 </p><blockquote><p>git show <branch-name>:<file-name> </file-name></branch-name></p></blockquote></li><li><p>clone下来指定的单一分支 </p><blockquote><p>git clone -b <branch-name> –single-branch <a href="https://github.com/user/repo.git" target="_blank" rel="noopener">https://github.com/user/repo.git</a> </branch-name></p></blockquote></li><li><p>忽略某个文件改动</p><blockquote><p>关闭 track 指定文件的改动， 也就是 Git 将不会在记录这个文件的改动 </p><p>git update-index –assume-unchanged path/to/file </p><p>恢复 track 指定文件的改动 </p><p>git update-index –no-assume-unchanged path/to/file </p></blockquote></li><li><p>忽略文件的权限变化</p><blockquote><p>git config core.fileMode false </p></blockquote></li><li><p>以最后提交的顺序列出所有Git分支 (最新放到嘴上)</p><blockquote><p>git for-each-ref –sort=-committerdate –format=’%(refname:short)’ refs/heads/ </p></blockquote></li><li><p>在commit log中查找相关内容 （查找字段）</p><blockquote><p>git log –all –grep=’<given-text> </given-text></p></blockquote></li><li><p>把暂存区的指定file放到工作区中 </p><blockquote><p>git reset <file-name> </file-name></p></blockquote></li><li><p>强制推送 </p><blockquote><p>git push -f <remote-name> <branch-name> </branch-name></remote-name></p></blockquote></li></ol><h3 id="Git-的基本命令"><a href="#Git-的基本命令" class="headerlink" title="Git 的基本命令"></a>Git 的基本命令</h3><h4 id="config"><a href="#config" class="headerlink" title="config:"></a>config:</h4><p>git config –list : 显示所有配置信息</p><p>git config –global  user.name :配置全局用户名,”global”改为”local”表示配置局部用户名</p><h4 id="help"><a href="#help" class="headerlink" title="help:"></a>help:</h4><p>git help :显示一些常见的命令和意义</p><h4 id="init"><a href="#init" class="headerlink" title="init:"></a>init:</h4><p>git init : 在本地初始化一个git仓库</p><h4 id="clone"><a href="#clone" class="headerlink" title="clone:"></a>clone:</h4><p>git clone xxxx: 从远程服务器克隆一个仓库到本地</p><h4 id="add："><a href="#add：" class="headerlink" title="add："></a>add：</h4><p>git add README: 添加工作目录的文件到暂存区</p><h4 id="status"><a href="#status" class="headerlink" title="status:"></a>status:</h4><p>git status: 显示工作树的状态</p><ol><li>Untracked files : 未被跟踪的文件，表示目录新增的文件</li><li>Changes not staged for commit: 工作目录修改文件，未添加到暂存区</li><li>Changes to be committed: 添加到暂存区文件，等待提交</li></ol><h4 id="commit："><a href="#commit：" class="headerlink" title="commit："></a>commit：</h4><p>git commit -m “提交消息”：提交暂存区的文件，并写提交消息</p><p>git commit -a -m “提交消息”：跳过暂存区，字节提交工作目录中所有改变的文件，但不能提交本地目录新增的文件</p><p>git commit –author=xxx -m “提交消息”:重写提交作者并提交暂存区</p><p>git commit –date=12.13.2019T09:00:00 -m “提交消息”：重写提交日期</p><p>git commit –amend -m “提交消息”: 通过创建一个新的提交，替换当前分支的前端(在最新一次提交的基础上进行提交)。</p><h4 id="reset"><a href="#reset" class="headerlink" title="reset:"></a>reset:</h4><p>git reset: 将暂存区的我所有文件充值到当前分支的HEAD</p><p>git reset <commit> files: 将暂存区的指定文件终止到指定的commit,没有commit 默认是HEAD。</commit></p><p>git reset [–hard|soft|mixed|merge|keep] [<commit>]:将当前分支重设到指定的commit,并根据mode有可能更新账户安全和工作目录。</commit></p><blockquote><p>hard：充值暂存区和工作目录到指定提交,删除commit之后的所有提交，并将head指向该提交(慎用)</p><p>soft: 暂存区和工作目录不会变化，仅仅删除commit之后的所有提交并将head指定该提交</p><p>mixed: 默认方式，充值暂存区到指定提交，删除commit之后的所有提交并将head指向该提交</p><p>merge|keep: 基本不用</p></blockquote><p><strong>HEAD是指向当前分支引用的指针，该指针指向在该分支上的最后一个提交的指针。这意味着HEAD将是下一个创建的提交的父亲。一般来说，把你的HEAD作为你最后一次提交的快照，是最简单的。HEAD~1表示HEAD的前一次提交，HEAD~2表示HEAD的前两次提交，以此类推</strong></p><h4 id="rm"><a href="#rm" class="headerlink" title="rm:"></a>rm:</h4><p>git rm files : 删除工作目录的文件</p><p>git rm -f files：强制删除工作目录的文件，不做更新检查</p><p>git rm –cached files: 删除暂存区的文件</p><h4 id="mv"><a href="#mv" class="headerlink" title="mv:"></a>mv:</h4><p>git mv oldfile newfile :重命名文件</p><p>git mv files dir: 移动文件到指定目录</p><p>git mv -f oldfile newfile: 强制为文件重命名，即使目标文件已经存在</p><p>git mv -f files dir: 强制移动文件到指定目录</p><h4 id="branch"><a href="#branch" class="headerlink" title="branch:"></a>branch:</h4><p>git branch: 查看所有分支</p><p>git branch branchname: 创建分支</p><p>git branch branchname <commit>：以特定提交为基础创建分支</commit></p><p>git branch -d branchname: 删除分支</p><p>git branch -D branchname: 强制删除分支</p><p>git branch -m [oldname] newname: 移动或者删除分支</p><p>git branch -M [oldname] newname: 强制移动或删除分支</p><p>git branch -r: 列出所有被跟踪的远程分支</p><p>git branch -r  -d branchnam: 删除被跟踪的远程分支</p><p>git branch -a : 列出所有本地分支与被跟踪的远程分支</p><h4 id="checkout"><a href="#checkout" class="headerlink" title="checkout"></a>checkout</h4><p>git checkout ：检查本地仓库分支与远程仓库分支差异</p><p>git checkout branchname|tagname: 切换分支或切换到指定tag,同名优先切换分支</p><p>git checkout tags/tagname: 切换到指定的tag</p><p>git checkout -b branchname: 新建分支并切换到该分支</p><p>git checkout -B branchname: 强制新建分支并切换到该分支</p><h4 id="merge"><a href="#merge" class="headerlink" title="merge:"></a>merge:</h4><p>git merge branchname -m “提交消息”：将指定分支合并到当前分支(带提交操作)，-m “提交消息”可省略</p><p>git merge <commit>: 将指定提交合并到当前分支上</commit></p><p>git merge branchname1 branchname2: 将分支1和分支2合并到当前分支</p><p>git merge –squash branchname: 将指定分支上的所有修改放入当前分支工作目录与暂存区，不提交</p><p>git merge no–squash branchname: 将指定分支上所有修改放入当前分支工作目录与暂存区，并提交</p><h4 id="mergetool"><a href="#mergetool" class="headerlink" title="mergetool:"></a>mergetool:</h4><p>git mergetool: 在”merge”命令执行之后出现冲突时执行该命令，用来解决合并的冲突，冲突解决完后不要忘了提交。</p><h4 id="stash"><a href="#stash" class="headerlink" title="stash:"></a>stash:</h4><p>git stash：储藏工作目录和暂存区的状态到堆栈中</p><p>git stash pop [stash@{id}]: 恢复到指定储藏状态，默认最近一次的状态，并从对战中移除该储藏</p><p>git stash apply [stash@{id}]: 恢复到指定的储藏状态</p><p>git stash drop [stash@{id}]: 从对战中移除指定储藏</p><p>git stash list: 显示所有储藏信息</p><h4 id="tag"><a href="#tag" class="headerlink" title="tag:"></a>tag:</h4><p>git tag:  列出所有标签</p><p>git tag -l ‘v1.*’:  列出更符合一定条件的标签</p><p>git tag tagname: 新建标签</p><h4 id="fetch"><a href="#fetch" class="headerlink" title="fetch:"></a>fetch:</h4><p>git fetch: 下载远程仓库”origin”到本地</p><p>git fetch remoterepository: 下载指定远程仓库到本地‘</p><p>git fetch remoterepository  branchname: 下载指定远程仓库指定分支到本地</p><h4 id="pull"><a href="#pull" class="headerlink" title="pull:"></a>pull:</h4><p>git pull remoterepository branchname[:localbranch]：拉取指定远程仓库指定分支到本地仓库指定分支（默认是当前分支）</p><h4 id="push："><a href="#push：" class="headerlink" title="push："></a>push：</h4><p>git push remoterepository localbranch[:remotebranch] [–tags]：推送本地仓库指定分支到远程仓库指定分支（默认是与本地分支同名的远程分支），默认是不推送标签到远程仓库的，加上<code>--tags</code>就会推送标签</p><h4 id="remote"><a href="#remote" class="headerlink" title="remote:"></a>remote:</h4><p>git remote： 查看所有与本地仓库关联的远程仓库</p><p>git remoter -V: 查看所有与本地仓库关联的远程仓库，并显示url</p><p>git remote add remote-name remote-url: 添加与本地仓库关联的远程仓库</p><p>git remote rename oldname newname: 为远程仓库重命名</p><p>git remote remove remote-name: 移除远程仓库</p><h4 id="submodule"><a href="#submodule" class="headerlink" title="submodule:"></a>submodule:</h4><p>git submodule add repository-url dir: 添加仓库到指定目录，是指成为本仓库的子模块</p><p>git submodule init: 初始化子模块</p><p>git submodule update: 更新子模块</p><p><strong>子模块是本仓库依赖的另一个仓库，但是我们不会对所依赖的仓库（子模块）进行修改，只会在必要的时候进行更新操作。</strong></p><h4 id="show"><a href="#show" class="headerlink" title="show:"></a>show:</h4><p>git show [-times]: 显示最近times次，默认一次，提交所有对象信息</p><h4 id="log："><a href="#log：" class="headerlink" title="log："></a>log：</h4><p>git log : 查看提交记录</p><p>git log –all: 查看所有提交记录</p><p>git log –oneline: 查看提交记录，并以oneline形式显示。</p><p>git log -p -times: 表示查看最近times次提交改变的内容</p><p>git log -stat [-times]: 查看最近times次(默认所有)提交记录，并显示差异分析</p><h4 id="diff"><a href="#diff" class="headerlink" title="diff:"></a>diff:</h4><p>git diff: 查看工作目录和暂存区的差异</p><p>git diff –cached [<commit>]: 查看暂存区和指定提交(默认HEAD)的差异</commit></p><p>git diff <commit>: 查看工作目录和指定提交的差异</commit></p><p>git diff <commit> <commit>: 查看两次提交的差异</commit></commit></p><p>git diff branchname: 查看工作目录与指定分支的差异</p><p>git diff branchname branchname: 查看两个分支的差异</p><p>上面的所有操作后面都可以加上<code>-- dir</code>表示查看该目录下面的差异，在后面加上<code>&gt;patchname.patch</code>表示将差异生成补丁，<code>patchname</code>是补丁的名字</p><h4 id="shortlog"><a href="#shortlog" class="headerlink" title="shortlog:"></a>shortlog:</h4><p>git shortlog: 显示总提交次数与每次提交的提交消息</p><h4 id="describe"><a href="#describe" class="headerlink" title="describe:"></a>describe:</h4><p>git describe [<commit>|<tag>]: 查看指定提交或指定标间的注解标签信息</tag></commit></p><p>git describe –tags [<commit>|<tag>]: 查看指定提交或者指定标签的标签信息</tag></commit></p><p>git describe –all [<commit>|<tag>]:  查看指定提交或指定标签的引用信息</tag></commit></p><h4 id="reflog"><a href="#reflog" class="headerlink" title="reflog:"></a>reflog:</h4><p>git reflog: 显示所有提交、下拉、推送、与切换分支操作</p><p>git reflog –all: 显示所有提交、下拉、推送操作</p><h4 id="apply"><a href="#apply" class="headerlink" title="apply:"></a>apply:</h4><p>git apply [–index|–cached] patchname.patch: 将暂存区与工作目录或暂存区(默认工作目录)打补丁</p><p>git apply –reverse|-R pathname.patch: 方向打补丁</p><p>git apply –reject pathname.patch: 打不定，将没有冲突的文件合并，将有冲突的文件标记出来，并生成对应的.rej文件</p><h4 id="cherry-pick"><a href="#cherry-pick" class="headerlink" title="cherry-pick:"></a>cherry-pick:</h4><p>git cherry-pick <commit>: 将另一个分支上面的指定提交应用到当前分支上</commit></p><p>git cherry-pick banchname: 将指定分支上的最后一次提交应用到当前分支上。</p><h4 id="rebase"><a href="#rebase" class="headerlink" title="rebase:"></a>rebase:</h4><p>git rebase branchname: 将指定分支上所有修改引用到当前分支</p><p>git rebase branchname branchname: 将第一个指定分支上所有修改引用到第二个分支上</p><p>在rebase 加上-i 会提供交付的变基操作</p><h4 id="revert"><a href="#revert" class="headerlink" title="revert:"></a>revert:</h4><p>git revert <commit>: 恢复一个指定提交</commit></p><h4 id="bisect："><a href="#bisect：" class="headerlink" title="bisect："></a>bisect：</h4><p>git bisect start: 开始二分查找</p><p>git bisect bad [<commit>]: 设置指定提交为bad</commit></p><p>git bisect good [<commit>]: 设置指定提交为good</commit></p><p>输入了上面三个命令后就会自动开始二分查找，我们之后只需要标记当前提交时bad还是good就行了，如果当前找的的提交时bad就输入<code>git bisect bad</code>，否则输入<code>git bisect good</code>直到找到有bug的提交</p><h4 id="blame"><a href="#blame" class="headerlink" title="blame:"></a>blame:</h4><p>git blame filename: 查看指定文件的所有操作者</p><h4 id="grep"><a href="#grep" class="headerlink" title="grep:"></a>grep:</h4><p>git grep keys: 在工作目录中所有文件中搜索keys</p><p>git grep –cached keys: 在暂存区中所有文件搜索keys</p><h3 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h3><p>四大提供代码托管服务的网站：Google Code，CodePlex，SourceForge，Github。</p><h4 id="在git上配置github"><a href="#在git上配置github" class="headerlink" title="在git上配置github"></a>在git上配置github</h4><ol><li><p>下载git并初始化</p><blockquote><p>git config –global user.name “”</p><p>git config –global user.email “”</p></blockquote></li><li><p>生成密钥(win默认在user/用户/.ssh)</p><blockquote><p>ssh-keygen -t rsa -C  “github邮箱”</p></blockquote></li><li><p>打开github-&gt;settings-&gt;ssh，配置id_rsa内容</p></li></ol><h4 id="git与github简单操作"><a href="#git与github简单操作" class="headerlink" title="git与github简单操作"></a>git与github简单操作</h4><ol><li><p>clone项目到本地</p><blockquote><p>git clone 仓库的git地址</p></blockquote></li><li><p>在本地初始化一个git仓库</p><blockquote><p>git init </p></blockquote></li><li><p>添加本地仓库建立连接的远程仓库</p><blockquote><p>git remote add 远程仓库起别名 关联的远程仓库</p></blockquote></li><li><p>添加你本地仓库修改了文件</p><blockquote><p>git add (文件名/.)</p></blockquote></li><li><p>提交修改</p><blockquote><p>git commit -m “提交说明”</p></blockquote></li><li><p>将修改内容上传到远程仓库</p><blockquote><p>git push 远程仓库别名 所上传到远程仓库的分支名 （git push origin master）</p></blockquote></li><li><p>从远程仓库下载最新内容到本地仓库</p><blockquote><p>git pull 远程仓库别名 下载内容所在的远程仓库分支名</p></blockquote></li><li><p>删除本地仓库与远程仓库的关联</p><blockquote><p>git remote rm 远程仓库别名</p></blockquote></li></ol><h4 id="fork仓库"><a href="#fork仓库" class="headerlink" title="fork仓库"></a>fork仓库</h4><ol><li><p>在github上fork别人仓库到自己github上，clone 自己的该仓库到本地</p><blockquote><p>git clone 自己fork下来的的仓库地址</p></blockquote></li><li><p>修改本地仓库文件，并将文件添加到暂存区</p><blockquote><p>git add .</p></blockquote></li><li><p>提交修改</p><blockquote><p>git commit -m “提交说明”</p></blockquote></li><li><p>将你本地仓库修改文件上传到github</p><blockquote><p>git push origin master</p></blockquote></li><li><p>到自己的github的该仓库页面进行pull request</p><p><img src="http://mdimg.atworking.cn/img/2019-6-11-17-2-53.png" alt="github-pr-01"></p><p><img src="http://mdimg.atworking.cn/img/2019-6-11-17-4-2.png" alt="github-pr-02"></p><p><img src="http://mdimg.atworking.cn/img/2019-6-11-17-4-52.png" alt="github-pr-03"></p><p><img src="http://mdimg.atworking.cn/img/2019-6-11-17-5-42.png" alt="github-pr-04"></p></li></ol><h4 id="处理他人提交的pull-request"><a href="#处理他人提交的pull-request" class="headerlink" title="处理他人提交的pull request"></a>处理他人提交的pull request</h4><p><img src="http://mdimg.atworking.cn/img/2019-6-11-17-7-23.png" alt="处理他人提交pr-1"></p><p><img src="http://mdimg.atworking.cn/img/2019-6-11-17-8-14.png" alt="处理他人提交pr-2"></p><p><img src="http://mdimg.atworking.cn/img/2019-6-11-17-10-45.png" alt="处理他人提交pr-3"></p><p><img src="http://mdimg.atworking.cn/img/2019-6-11-17-11-50.png" alt="处理他人提交pr-4"></p><p><img src="http://mdimg.atworking.cn/img/2019-6-11-17-12-40.png" alt="处理他人提交pr-5"></p><h4 id="对别人仓库-issues"><a href="#对别人仓库-issues" class="headerlink" title="对别人仓库 issues"></a>对别人仓库 issues</h4><p>如果使用他人想买出现bug或又问题 可以发起issues</p><p><img src="http://mdimg.atworking.cn/img/2019-6-11-17-14-50.png" alt="fork-isuues-1"></p><p><img src="http://mdimg.atworking.cn/img/2019-6-11-17-15-33.png" alt="fork-isuues-2"></p><p><img src="http://mdimg.atworking.cn/img/2019-6-11-17-16-12.png" alt="fork-isuues-3"></p><h4 id="处理自己仓库的issues"><a href="#处理自己仓库的issues" class="headerlink" title="处理自己仓库的issues:"></a>处理自己仓库的issues:</h4><p><img src="http://mdimg.atworking.cn/img/2019-6-11-17-17-35.png" alt="me-isuues-1"></p><p><img src="http://mdimg.atworking.cn/img/2019-6-11-17-18-37.png" alt="me-isuues-2"></p><h4 id="Wiki"><a href="#Wiki" class="headerlink" title="Wiki:"></a>Wiki:</h4><p>为自己仓库创建wiki:</p><p><img src="http://mdimg.atworking.cn/img/2019-6-11-17-20-5.png" alt="wiki-1"></p><p><img src="http://mdimg.atworking.cn/img/2019-6-11-17-20-54.png" alt="wiki-2"></p><p><img src="http://mdimg.atworking.cn/img/2019-6-11-17-21-44.png" alt="wiki-3"></p><h4 id="分支："><a href="#分支：" class="headerlink" title="分支："></a>分支：</h4><p><img src="http://mdimg.atworking.cn/img/2019-6-11-17-23-0.png" alt="branch-1"></p><p><img src="http://mdimg.atworking.cn/img/2019-6-11-17-24-17.png" alt="branch-2"></p><h4 id="发布："><a href="#发布：" class="headerlink" title="发布："></a>发布：</h4><p><img src="http://mdimg.atworking.cn/img/2019-6-11-17-25-39.png" alt="release-1"></p><p><img src="http://mdimg.atworking.cn/img/2019-6-11-17-26-36.png" alt="release-2"></p><p><img src="http://mdimg.atworking.cn/img/2019-6-11-17-28-7.png" alt="release-3"></p><p><img src="http://mdimg.atworking.cn/img/2019-6-11-17-29-13.png" alt="release-4"></p><p><img src="http://mdimg.atworking.cn/img/2019-6-11-17-29-46.png" alt="release-5"></p><p>标记和发布是共存的。</p><ol><li><p>为当前提交添加标记</p><blockquote><p>git tag “v1”</p></blockquote></li><li><p>添加修改当前暂存区</p><blockquote><p>git add .</p></blockquote></li><li><p>提交修改</p><blockquote><p>git commit -m “添加标记”</p></blockquote></li><li><p>推送提交到远程仓库，包含标记</p><blockquote><p>git push –tags origin master</p></blockquote></li></ol><h4 id="Gist管理"><a href="#Gist管理" class="headerlink" title="Gist管理"></a>Gist管理</h4><p>gist是用来即时分享代码，注释，和片段代码的。</p><p><img src="http://mdimg.atworking.cn/img/2019-6-11-17-33-23.png" alt="gist-1"></p><p><img src="http://mdimg.atworking.cn/img/2019-6-11-17-34-25.png" alt="gist-2"></p><p><img src="http://mdimg.atworking.cn/img/2019-6-11-17-35-4.png" alt="gist-3"></p><h4 id="重要文件说明"><a href="#重要文件说明" class="headerlink" title="重要文件说明"></a>重要文件说明</h4><p>github仓库中三个重要文件</p><ul><li>README.md: 显示在仓库下面的说明文档，markdown语法</li><li>LICENSE：代表本场客所遵循的开源协议</li><li>.gitignore: 代表git忽略文件</li></ul><p>markdown语法 <a href="https://guides.github.com/features/mastering-markdown/" target="_blank" rel="noopener">https://guides.github.com/features/mastering-markdown/</a></p><p>.gitignore文件中每一行表示忽略一个文件，支持通配符”*”</p><p>忽略目录 :  /dir</p><p>忽略一类文件： *.bat</p><p>不忽略某个文件(和上面匹配)： ！test.bat</p><h3 id="Githug小游戏-windows"><a href="#Githug小游戏-windows" class="headerlink" title="Githug小游戏(windows)"></a>Githug小游戏(windows)</h3><h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><p>安装 git: <a href="https://git-scm.com/download/" target="_blank" rel="noopener">git</a></p><p>安装ruby: <a href="https://rubyinstaller.org/downloads/" target="_blank" rel="noopener">ruby</a></p><p>查看是否配置环境变量： ruby  –version</p><p>换源：</p><p>gem sources -l</p><p>gem sources –add <a href="https://gems.ruby-china.com" target="_blank" rel="noopener">https://gems.ruby-china.com</a> –remove <a href="https://rubygems.org/" target="_blank" rel="noopener">https://rubygems.org/</a></p><p>更新缓存</p><p>gem sources -u </p><p>安装github小游戏: gem install githug</p><p>注意： 如果出现rake冲突，删除不用的rake (gem uninstall rake)</p><h4 id="githug"><a href="#githug" class="headerlink" title="githug"></a>githug</h4><p>githug是设计学习git的小游戏，一共55关，每一关都需要用git命令获取正确答案</p><p>常用命令：</p><ul><li>githug: 开始闯关或者下一关</li><li>githug hint: 过关提示</li><li>githug levels: 显示关卡列表</li><li>githug reset [关卡名]： 重启甭管或者重启到指定关卡名的关卡</li><li>githug play：验证操作，成功会进入下一个关卡</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br></pre></td><td class="code"><pre><span class="line">#1: init 初始化</span><br><span class="line">&gt; githug (输入开始闯关)，输入y在当前目录创建一个git_hug的子目录</span><br><span class="line">&gt; git init(进入目录 输入命令)</span><br><span class="line">&gt; git play</span><br><span class="line"></span><br><span class="line">#2: config 配置用户名和邮箱</span><br><span class="line">&gt; git config --local user.name xxx</span><br><span class="line">&gt; git config --local user.email xxx@xx</span><br><span class="line">&gt; git play</span><br><span class="line"></span><br><span class="line">#3: add 添加文件</span><br><span class="line">&gt; git add README （添加readme）</span><br><span class="line">&gt; githug play</span><br><span class="line"></span><br><span class="line">#4: commit 提交添加文件</span><br><span class="line">&gt; git commit -m &quot;add readme&quot;</span><br><span class="line">&gt; githug play</span><br><span class="line"></span><br><span class="line">#5: clone 克隆下载仓库</span><br><span class="line">&gt; git clone https://github.com/Gazler/cloneme</span><br><span class="line">&gt; githug play</span><br><span class="line"></span><br><span class="line">#6: clone_to_folder 克隆并指定文件夹名</span><br><span class="line">&gt; git clone https://github.com/Gazler/cloneme my_cloned_repo</span><br><span class="line">&gt; githug play</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#7: ignore 忽略所有swp后缀的文件</span><br><span class="line">&gt; vim .gitignore</span><br><span class="line">$ *.swp</span><br><span class="line">&gt; githug play</span><br><span class="line"></span><br><span class="line">#8: include 除了 lib.a文件，其他所有.a都被忽略</span><br><span class="line">&gt; vim .gitignore</span><br><span class="line">$ #ignore all file with &apos;.a&apos; extensions except &apos;lib.a&apos; file 注释</span><br><span class="line">$ *.a</span><br><span class="line">$ !lib.a</span><br><span class="line">&gt; githug play</span><br><span class="line"></span><br><span class="line">#9: status 查看untracked状态文件</span><br><span class="line">&gt; git status</span><br><span class="line">&gt; git play （database.yml）</span><br><span class="line">untracked: 仓库新建的文件，被用红字显示在查询结果的 &quot;Untrakced files&quot; 段落中</span><br><span class="line">modified：被编辑过的文件的状态就变为 &quot;modified&quot;，它们被用红字显示在查询结果的 &quot;Changes not staged for commit&quot; 段落中</span><br><span class="line">staged:通过 git add 命令加入到暂存区的文件的状态就变为 &quot;staged&quot;，它们被用绿字显示在查询结果的 &quot;Changes to be committed&quot; 段落中</span><br><span class="line"></span><br><span class="line">#10: number_of_files_committed 查看staged状态文件个数，黄色就是</span><br><span class="line">&gt; git status</span><br><span class="line">&gt; git play (2)</span><br><span class="line"></span><br><span class="line">#11: rm 有个文件从硬盘删除，当时并未从git仓库中删除，找到并从git仓库删除(删除也是修改，可以直接提交这个修改)</span><br><span class="line">&gt; git status</span><br><span class="line">&gt; git add deleteme.rb</span><br><span class="line">&gt; git commit -m &quot;remove deleteme.rb&quot;</span><br><span class="line">&gt; githug play</span><br><span class="line"></span><br><span class="line">#12: rm_cached 一个文件以外地加入到你的暂存区，找出这个文件并将它从暂存区移除(--cached)。不要将它从文件系统中移除(--f)，仅仅将它git中移除。</span><br><span class="line">&gt; git status </span><br><span class="line">&gt; git rm --cached deleteme.rb</span><br><span class="line">&gt; githug play</span><br><span class="line"></span><br><span class="line">#13: stash 做了一些修改，并且向稍后再它们上面工作。你应该保存它们，但是不提交它们,git中维护一个栈保存,如果需要恢复某次提交，使用 git stash apply（git stash 把当前环境&quot;保护不提交&quot;，git stash list:列出被保护不提交对象, git stash pop：恢复被保护不提交的环境）</span><br><span class="line">&gt; git status</span><br><span class="line">&gt; git stash</span><br><span class="line">&gt; git status</span><br><span class="line">&gt; githug play</span><br><span class="line"></span><br><span class="line">#14: rename 重命名文件。首先这个文件需要是已经是已追踪状态，才可以使用 git mv 命令，操作完成后自动处于 staging 状态</span><br><span class="line">&gt; ls</span><br><span class="line">&gt; git mv oldfile.txt newfile.txt</span><br><span class="line">&gt; git status</span><br><span class="line">&gt; githug play</span><br><span class="line"></span><br><span class="line">#15: restructure 移动所有 .html 文件到 src 文件夹。git mv 后面的第二个参数可以接受文件或目录，如果是目录，则文件会直接放入目录内，可以使用正则（glob模式）匹配所有 .html 文件</span><br><span class="line">&gt; mkdir src</span><br><span class="line">&gt; git mv *.html src</span><br><span class="line">&gt; git status</span><br><span class="line">&gt; githug play</span><br><span class="line"></span><br><span class="line">#16: log 找到最新的 commit 的 hash 值。使用 git log 查看历史提交记录, 找到最新的 commit 的 hash 值(git log --pretty=oneline: 把例子以紧凑格式显示)</span><br><span class="line">&gt; git log</span><br><span class="line">&gt; githug play (输入hash)</span><br><span class="line"></span><br><span class="line">#17: tag 为最新的 commit 打 tag。不加额外参数就是为当前 commit 记录 tag (git tag name hash：给指定提交打标签,git tag -d name:删除标签，git tag:显示所有标签)</span><br><span class="line">&gt; git tag new_tag</span><br><span class="line">&gt; githug play</span><br><span class="line"></span><br><span class="line">#18: push_tags 将所有本地 tag 都推送到远端。--tags 参数代表将所有的 tags 都推送到远端(默认tag是不会上传到远端的)</span><br><span class="line">&gt; git push --tags origin master</span><br><span class="line">&gt; githug play</span><br><span class="line"></span><br><span class="line">#19: commit_amend 某个文件在上次提交中遗漏了，在那次提交中补上这个文件。 其实，使用 git commit --amend 会进入编辑界面修改备注信息，我这里直接 :wq 保存并退出(git commit --amend:出现编辑器，编写提交说明，git commit -amend -m &quot;new message&quot;：更新提交说明，git commit --amend -C HEAD:直接使用原有的提交说明，其中 -C 表示使用已提交过的说明，HEAD 表示最近一次提交)</span><br><span class="line">&gt; git status</span><br><span class="line">&gt; git add forgotten_file.rb</span><br><span class="line">&gt; git commit --amend</span><br><span class="line">&gt; githug play</span><br><span class="line"></span><br><span class="line">#20: commit_in_future 为提交指定一个未来的时间</span><br><span class="line">&gt; git status</span><br><span class="line">&gt; git commit --date=06.13.2019T21:00:00 -m &quot;指定提交时间为明天&quot;</span><br><span class="line">&gt;githug play</span><br><span class="line"></span><br><span class="line">#21: reset </span><br><span class="line">两个文件都被添加到了 staging area, 但是只想提交其中一个。使用 git reset 可以用仓库中的版本覆盖 staging area 的版本。</span><br><span class="line">git reset 使用仓库中的版本覆盖 staging area 中的，如果 working directory 该文件没有其他修改，则 staging area 中的修改将应用到 working directory 中。反之working directory 中的版本将被保留，丢弃 staging area 中的修改。</span><br><span class="line">git checkout 则是使用 staging area 的中的版本覆盖 working directory。</span><br><span class="line">&gt; git status</span><br><span class="line">&gt; git reset HEAD to_commit_second.rb</span><br><span class="line">&gt; git status</span><br><span class="line">&gt; git commit -m &quot;add to_commit_first.rb&quot;</span><br><span class="line">&gt; githug play</span><br><span class="line"></span><br><span class="line">#22: reset_soft 撤销上一次提交。</span><br><span class="line">--soft 参数将上一次的修改放入 staging area</span><br><span class="line">--mixed 参数将上一次的修改放入 working directory</span><br><span class="line">--hard 参数直接将上一次的修改抛弃</span><br><span class="line">&gt; git status</span><br><span class="line">&gt; git reset --soft HEAD~1</span><br><span class="line">&gt; git status</span><br><span class="line">&gt; githug play</span><br><span class="line"></span><br><span class="line">#23: checkout_file 抛弃某一次的修改，使用上次提交的版本。checkout 和 reset 的区别参照第二十一关</span><br><span class="line">&gt; git status</span><br><span class="line">&gt; git checkout config.rb</span><br><span class="line">&gt; githug play</span><br><span class="line"></span><br><span class="line">#24: remote 查看远端仓库，加这个参数只是可以将地址也一起输出</span><br><span class="line">&gt; git remote</span><br><span class="line">&gt; githug play (my_remote_repo)</span><br><span class="line"></span><br><span class="line">#25: remote_url 查看远端仓库的 URL 加上参数 -v</span><br><span class="line">&gt; git remote -v</span><br><span class="line">&gt; githug play（https://github.com/githug/not_a_repo）</span><br><span class="line"></span><br><span class="line">#26: pull 拉取远端仓库(git pull 远端别名 分支名)</span><br><span class="line">指定分支：git pull origin remote : local</span><br><span class="line">对应推送：git push origin local : remote</span><br><span class="line">&gt; git remote -v</span><br><span class="line">&gt; git pull origin master</span><br><span class="line">&gt; githug play</span><br><span class="line"></span><br><span class="line">#27: remote_add 添加一个远端仓库</span><br><span class="line">&gt;  git remote add origin https://github.com/githug/githug</span><br><span class="line">&gt; githug play</span><br><span class="line"></span><br><span class="line">#28: push 推送本地修改到远端</span><br><span class="line">&gt; git status</span><br><span class="line">&gt; git rebase origin/master</span><br><span class="line">&gt; git push origin master</span><br><span class="line">&gt; githug play</span><br><span class="line"></span><br><span class="line">#29: diff 查看 staging area 和 working directory 中文件的差异。</span><br><span class="line">git diff: 查看 working directory 与 staging area 之间的差异</span><br><span class="line">git diff --cached: 查看 repository 与 staging area 之间的差异</span><br><span class="line">git diff HEAD: 查看 working directory 与 repository 之间的差异</span><br><span class="line">&gt; git diff</span><br><span class="line">&gt;githug play（26）</span><br><span class="line"></span><br><span class="line">#30: blame 有人将密码放进了“config.rb”文件中，找出是谁。  </span><br><span class="line">&gt; git blame config.rb</span><br><span class="line">&gt; githug play (Spider Man)</span><br><span class="line"></span><br><span class="line">#31: branch 创建一个分支 </span><br><span class="line">&gt; git branch test_code</span><br><span class="line">&gt; git branch</span><br><span class="line">&gt; githug play</span><br><span class="line"></span><br><span class="line">#32: checkout 创建一个分支，并切换过去。其实，git checkout -b my_branch 就是创建一个分支，并切换过去(git checkout name：切换分支，git checkout -: 切换到上次分支)</span><br><span class="line">&gt; git checkout -b my_branch</span><br><span class="line">&gt; git branch</span><br><span class="line">&gt;githug play</span><br><span class="line"></span><br><span class="line">#33: checkout_tag 切换到某个特定的 tag</span><br><span class="line">&gt; git tag</span><br><span class="line">&gt; git checkout v1.2</span><br><span class="line">&gt; githug play</span><br><span class="line"></span><br><span class="line">#34: checkout_tag_over_branch 切换到某个特定的分支，但是分支名和标签名重叠了</span><br><span class="line">&gt; git checkout tags/v1.2</span><br><span class="line">&gt; githug play</span><br><span class="line"></span><br><span class="line">#35: branch_at 根据一个特定的提交创建新分支(git branch name hash)</span><br><span class="line">&gt; git branch test_branch HEAD~1</span><br><span class="line">&gt; githug play</span><br><span class="line"></span><br><span class="line">#36: delete_branch 删除一个分支</span><br><span class="line">&gt; git branch -d delete_me</span><br><span class="line">&gt; githug play</span><br><span class="line"></span><br><span class="line">#37: push_branch 将分支推送到远端仓库</span><br><span class="line">&gt; git branch</span><br><span class="line">&gt; git push origin test_branch:test_branch</span><br><span class="line">&gt; githug play</span><br><span class="line"></span><br><span class="line">#38: merge 合并分支。为了简化分支模型，可以使用 rebase 代替，后续关卡会遇到,执行这条命令之前，要先切换到主线（一般是 master 分支），然后把待合并的分支名作为参数。</span><br><span class="line">&gt; git branch</span><br><span class="line">&gt; git merge feature</span><br><span class="line">&gt; githug play</span><br><span class="line"></span><br><span class="line">#39: fetch  获取远端的修改，但是并不合并到当前分支。其实，git pull 就是 git fetch 和 git merge 组成的</span><br><span class="line">&gt; git fetch origin</span><br><span class="line">&gt; githug play</span><br><span class="line"></span><br><span class="line">#40: rebase 我们用“git rebase”工作流与“feature”分支准备进入“master”分支。将“feature”分支上的改变合并到“master”上。  </span><br><span class="line">git rebase 一个分支的所有修改在另一个分支上重新应用一遍，所以在提交记录上看，会发现一个分支的所有提交在另一个分支之前或者之后。然后删除另一个被合并的分支，保持分支简洁。</span><br><span class="line">git rebase master feature 表示将 feature 上的修改在 master 上重新应用一遍</span><br><span class="line">&gt; git log --graph --all</span><br><span class="line">&gt; git rebase master feature</span><br><span class="line">&gt; git log --graph --all</span><br><span class="line">&gt; git checkout feature</span><br><span class="line">&gt; git merge master</span><br><span class="line">&gt; githug play</span><br><span class="line">对应第一个 git log --graph -all ，--graph会用图形化将提交记录显示出来，而--all 会显示所有分支的提交记录</span><br><span class="line">对应第而二个 git log --graph -all ，可以发现只保留了一个分支，看起来简洁了很多。</span><br><span class="line">在使用此命令的时候，需要非常注意的是，不要 rebase 哪些已经推送到公共库的更新</span><br><span class="line"></span><br><span class="line">#41 rebase_onto 通过查找，在git rebase中有以下用法：</span><br><span class="line">&gt; git rebase --onto master wrong_branch readme-update</span><br><span class="line">&gt; githug play</span><br><span class="line"></span><br><span class="line">#42: repack 将版本库未打包的松散对象打包,它们被存储在 .git/objects/ 目录下：</span><br><span class="line">&gt; git repack</span><br><span class="line">&gt; git repack -d</span><br><span class="line">&gt; githug play</span><br><span class="line"></span><br><span class="line">#43: cherry-pick 应用某一个提交的修改,如果你创建了一个分支，在其中进行了多次提交，而在合并时不想把分支上所有的提交都合并到主线，只想选取其中的1个提交合并到主线</span><br><span class="line">&gt; git branch</span><br><span class="line">&gt; git log --all</span><br><span class="line">&gt; git cherry-pick ca32a6d</span><br><span class="line">&gt; githug play</span><br><span class="line"></span><br><span class="line">#44: grep git grep支持各种条件搜索及正则表达式，平时用的不多，但感觉功能强大</span><br><span class="line">&gt; git grep TODO</span><br><span class="line">&gt; githug play(4)</span><br><span class="line"></span><br><span class="line">#45: rename_commit 重命名提交。当涉及提交修改时，应该想到 git rebase -i 命令，它接受可以一个参数（提交的哈希值），它将罗列出此提交之后的所有提交，然后可以对个个提交做对应的操作。</span><br><span class="line">&gt; git log (发现有个提交&quot;First coommit&quot;单词拼写错误)</span><br><span class="line">&gt; git rebase -i “hash-code”（找到拼写错误的上一次提交的hash）</span><br><span class="line">修改第一行 reword xxx First coommit 保存关闭</span><br><span class="line">**pick：执行此次提交 reword修改备注内容在提交**</span><br><span class="line">修改 coommit 为 commit 关闭</span><br><span class="line">&gt; githug play</span><br><span class="line"></span><br><span class="line">#46: squash 合并多个提交。如果要把多次合并合并成一次提交，可以用 git rebase -i 的 squash 命令</span><br><span class="line">&gt; git log --pretty=oneline（查看提交日志）</span><br><span class="line">&gt; git rebase -i hash(第一次的hash,因为第二条添加readme后提交了三次)</span><br><span class="line">打开文本吧 Adding readme 后面的三个pick改成&quot;squash&quot;</span><br><span class="line">保存退出会弹出更新说明</span><br><span class="line">&gt; git log --pretty=oneline(发现adding readme上面的上次提交合并了这个提交上)</span><br><span class="line">&gt;githug play</span><br><span class="line"></span><br><span class="line">#47: merge_squash 把名为 long-feature-branch 的分支合并到主干，把分支中的多次提交合并为主干上的一次提交</span><br><span class="line">如果分支曾经提交过多次，那么用上面的语句合并之后，主干的日志也会出现多次提交记录。为了符合本关题意，把分支的多次提交合并为主干上的一次提交，要加一个 squash 参数(记得手动提交，添加参数不会自动提交)</span><br><span class="line">&gt; git merge long-feature-branch --squash</span><br><span class="line">&gt; git commit -m &quot;merge_squash&quot;</span><br><span class="line">&gt; githug play</span><br><span class="line"></span><br><span class="line">#48: reorder 你提交过几次，但是提交的顺序错了，请调整提交顺序</span><br><span class="line">&gt;  git log --pretty=oneline(查看提交日志发现第二次和第三次反了)</span><br><span class="line">&gt; git rebase -i hash(initial)</span><br><span class="line">打开编辑器把第二行和第三方内容调整下，保存</span><br><span class="line">&gt; githug play</span><br><span class="line"></span><br><span class="line">#49: bisect 在开发过程中引入了一个 bug。已知运行 &quot;ruby prog.rb 5&quot; 应该输入 15，你也可以运行 &quot;make test&quot; 进行测试。你需要确定引入 bug 的那次提交的哈希值的前7位</span><br><span class="line">这时就可以借助 Git 提供的 bisect 工具来查找是哪次提交引入了 bug。bisect 是用二分法来查找的，就像用二分查找法查找数组元素那样。</span><br><span class="line">运行 make test 可以测试程序是否正确执行，它会先执行 &quot;ruby prog.rb 5&quot; 语句，然后再分析输出结果是否等于15，如果不等于15，就会显示 make: *** [test] Error 1</span><br><span class="line">&gt; git log --pretty=oneline(查看提交历史，一共20次提交)</span><br><span class="line"># 启动bisect查找流程</span><br><span class="line">&gt; git bisect start </span><br><span class="line">&gt; git bisect good f608824</span><br><span class="line">&gt; git bisect bad 12628f4</span><br><span class="line">第2行和第3行是定义 bisect 的查找范围，git bisect good 和 git bisect bad 表示当前程序通过或没有通过测试，在第2行后面以第一次提交的哈希值为参数，在第3行后面以最后一次提交的哈希值为参数，说明查找范围是全部20次提交。接着 Git 定位了位于中间那个提交，它的哈希值是 &quot;fdbfc0d403e5a&quot;，并计算出剩余的提交还有9次，大约还需要3次二分查找</span><br><span class="line">这时，我们对程序进行测试，测试通过，所以我们反馈 good</span><br><span class="line">&gt; make test</span><br><span class="line">&gt; git bisect good</span><br><span class="line">Git 继续进行二分查找，这次定位的哈希值是 &quot;18ed2ac1522a01&quot;，我们再对程序测试，测试没有通过，所以我们反馈 bad</span><br><span class="line">&gt; make test</span><br><span class="line">&gt; git bisect bad</span><br><span class="line">//继续</span><br><span class="line">&gt; make test</span><br><span class="line">&gt; git bisect good</span><br><span class="line">&gt; make test</span><br><span class="line">&gt; git bisect good</span><br><span class="line">&gt; githug play(18ed2ac)</span><br><span class="line"></span><br><span class="line">#50: stage_lines 你修改了一个文件的多处代码，这些代码分属于2个不同的功能，代码还没有提交到暂存区。仅提交第1个功能相关的代码到暂存区</span><br><span class="line">用 git add 命令可以把文件添加到暂存区，但如果你不想把文件中的全部修改都提交到暂存区，或者说你只想把文件中的部分修改提交到缓存区，那么你需要加上 edit 参数</span><br><span class="line">&gt; git status -s（查看文件状态）</span><br><span class="line">&gt; git diff feature.rb（从最后2行可以看出，新增的代码分别对应2个不同的功能，如果我们只想提交第1个功能的代码，删除掉最后一行即可）</span><br><span class="line">&gt; git add feature.rb --edit</span><br><span class="line">删除最后一行保存</span><br><span class="line">&gt; git status -s</span><br><span class="line">&gt; git diff feature.rb</span><br><span class="line">&gt; githug play</span><br><span class="line"></span><br><span class="line">#51: find_old_branch 你在一个分支上工作时，被分派处理一个重要的问题，可是处理完这个问题之后，你忘了刚才是在哪个分支上工作了。切换回那个分支。</span><br><span class="line">git reflog命令不仅与文件相关的 git commit 操作被记录了，连你 git checkout 操作也都记下来了，现在，你就知道此前是怎么在各个分支之间跳转的了。</span><br><span class="line">&gt; git branch</span><br><span class="line">&gt; git reflog</span><br><span class="line">&gt; git checkout solve_world_hunger</span><br><span class="line">&gt; githug play</span><br><span class="line"></span><br><span class="line">#52: revert 你提交了多次，但想取消中间的某次提交。所有提交的内容都已经推送到服务端了，所以你不能改变已有的历史</span><br><span class="line">我们曾用过修改提交历史的 git rebase -i 命令，用此方法可以取消多次提交中的某次提交，不过，这只是针对还没有推送到服务端的情况，如果已经提交到服务端，你就不能改变已有的历史了，只能想别的办法解决了。</span><br><span class="line">Git 提供了 revert 工具来解决这种问题，它相当于是对某次提交的逆操作，比如你提交时新建了一个文件，那么 Git 就会创建一个删除此文件的提交</span><br><span class="line">git revert hash; git revert hash --no-edit;其中的 hash 就是你要取消的提交的哈希值。第2条命令中的 no-edit 参数表示由系统自动生成一句提交说明，如果没有这个参数，Git 会自动调用文本编辑器请你编写提交说明</span><br><span class="line">&gt; git log --pretty=oneline</span><br><span class="line">&gt; git revert hash --no-edit(bad hash)</span><br><span class="line">&gt; git log --pretty=oneline</span><br><span class="line">&gt; githug play</span><br><span class="line"></span><br><span class="line">#53: restore 你决定用 git reset --hard HEAD^ 删除最后一次提交（一个不太明智的决定），然后你又反悔了，想回退到这条命令之前。请恢复被删除的提交</span><br><span class="line">&gt; git log --pretty=oneline(查看提交历史两条)</span><br><span class="line">&gt; git reflog</span><br><span class="line">有过第3次提交，不过被 git reset --hard HEAD^ 删除掉了。git reset --hard HEAD^ 用于删除最后一次提交，使工作区恢复到上一次提交时的状态，仔细观察上面的操作日志也能发现，其中 &quot;HEAD@&#123;2&#125;&quot; 和 &quot;HEAD@&#123;0&#125;&quot; 的哈希值是一样的（git reset --hard hash:撤销删除命令）</span><br><span class="line">&gt; git reset --hard 38c8689(HEAD@&#123;1&#125;)</span><br><span class="line">&gt; git reflog</span><br><span class="line">&gt; githug play</span><br><span class="line"></span><br><span class="line">#54: conflict  你要把名为 mybranch 的分支合并到当前分支 master 中，但是可能有些地方的修改会引起冲突。请解决冲突，完成合并</span><br><span class="line">&gt; git branch</span><br><span class="line">&gt; git merge mybranch(合并存在冲突)</span><br><span class="line">&gt; vim poem.txt</span><br><span class="line">7个左尖括号 &lt;&lt;&lt;&lt;&lt;&lt;&lt; 和7个右尖括号 &gt;&gt;&gt;&gt;&gt;&gt;&gt; 之间的区域是冲突的部分，而中间的7个等号 ======= 则把有冲突的代码分开，上部分是你的代码（通常是主线代码），下部分是别人的代码（通常是开发分支的代码）。编辑这部分内容，保留你想要的，删除你不要的(特殊符号也需要删除)，保存退出，再单独提交这个文件即可</span><br><span class="line">&gt; git status -s</span><br><span class="line">&gt; git add poem.txt</span><br><span class="line">&gt; git commit -m &quot;解决冲突&quot;</span><br><span class="line">&gt; githug play</span><br><span class="line"></span><br><span class="line">#55: submodule 如果你想把别人的仓库代码作为自己项目一个库来使用，可以采用模块化的思路，把这个库作为模块进行管理。Git 专门提供了相应的工具（git submodule add url）</span><br><span class="line">&gt;  git submodule add https://github.com/jackmaney/githug-include-me</span><br><span class="line">&gt; githug play</span><br><span class="line"></span><br><span class="line">#56: contribute 这是最后一关，目标是让你在 Github 上提交一个 pull request 贡献。设计本关的目的就是鼓励你向 Githug 提交贡献，而不是测试你使用 pull request 的技能。贡献包括新的关卡、修复BUG和改善文档</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;PicGO图床快捷方式：
粘贴图片路径上传：CTRL+ALT+U
选择图片文件上传: CTRL+ALT+E
从输入框上传图片：CTRL+ALT+O&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="VSCODE" scheme="http://atworking.cn/categories/VSCODE/"/>
    
    
      <category term="Git" scheme="http://atworking.cn/tags/Git/"/>
    
      <category term="GitHub" scheme="http://atworking.cn/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>C++基础知识07</title>
    <link href="http://atworking.cn/2019/05/29/C-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%8607/"/>
    <id>http://atworking.cn/2019/05/29/C-基础知识07/</id>
    <published>2019-05-29T11:29:01.000Z</published>
    <updated>2019-06-03T03:10:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>第七章：函数探幽<br><a id="more"></a></p><h3 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h3><p>内联函数是C++为提高程序运行速度所做的一项改进。常规函数和内联函数之间的主要区别不在于编写方式，而在于C++编译器如何将它们组合到程序中。内联函数的编译代码与其他程序代码“内联”起来了。也就是说，编译器将使用相应的函数代码替换函数调用。对于内联代码，程序无需跳到另一个位置处执行代码，再跳回来。因此，内联函数的运行速度比常规函数稍快，但代价是需要占用更多内存。</p><p><img src="http://mdimg.atworking.cn/img/2019-5-31-10-54-45.png" alt="内联函数"></p><p>使用：</p><ul><li>在函数声明前加上关键字inline；</li><li>在函数定义前加上关键字inline。</li></ul><p>程序员请求将函数作为内联函数时，编译器并不一定会满足这种要求。它可能认为该函数过大或注意到函数调用了自己（内联函数不能递归），因此不将其作为内联函数；而有些编译器没有启用或实现这种特性。</p><h3 id="引用变量"><a href="#引用变量" class="headerlink" title="引用变量"></a>引用变量</h3><p>C++新增了一种复合类型——引用变量。引用是已定义的变量的别名（另一个名称），引用变量的主要用途是用作函数的形参。通过将引用变量用作参数，函数将使用原始数据，而不是其副本。这样除指针之外，引用也为函数处理大型结构提供了一种非常方便的途径，同时对于设计类来说，引用也是必不可少的。</p><h4 id="创建引用变量"><a href="#创建引用变量" class="headerlink" title="创建引用变量"></a>创建引用变量</h4><p>C和C++使用&amp;符号来指示变量的地址。C++给&amp;符号赋予了另一个含义，将其用来声明引用。</p><p>“int a=10;    int &amp; rodents =a;”  &amp;不是地址运算符，而是将rodents的类型声明为int &amp;，即指向int变量的引用,引用声明允许将a和rodents互换，它们指向相同的值和内存单元</p><p>int <em> pt =&a; 这是指向a的指针，rodents 和</em>pt都可以和a互换，表达式&amp;rodents和pt都可以和&amp;a互换。引用和指针在表示方法不同，必须在声明引用时将其初始化，不能像执政一样，先声明在初始化(int a; int &yy; yy=a; //错误)。</p><p>引用接近const指针，必须在创建时初始化，并且不能改变</p><blockquote><p>int &amp; rodents =a;   //引用     int * const pr = &a; //伪指针表示</p></blockquote><h4 id="将引用作为函数参数"><a href="#将引用作为函数参数" class="headerlink" title="将引用作为函数参数"></a>将引用作为函数参数</h4><p>引用经常被用作函数参数，使得函数中的变量名成为调用程序中的变量的别名。这种传递参数的方法称为按引用传递。按引用传递允许被调用的函数能够访问调用函数中的变量。</p><p><img src="http://mdimg.atworking.cn/img/2019-5-31-11-18-37.png" alt="按值/引用传递"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//交换两个变量的值</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swapA</span><span class="params">(<span class="keyword">int</span> &amp;a, <span class="keyword">int</span> &amp;b)</span></span>; <span class="comment">//引用</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swapB</span><span class="params">(<span class="keyword">int</span> *p, <span class="keyword">int</span> *q)</span></span>; <span class="comment">//指针</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swapC</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;   <span class="comment">//值</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">    <span class="keyword">int</span> num1 = <span class="number">300</span>;</span><br><span class="line">    <span class="keyword">int</span> num2 = <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"num1 = $"</span> &lt;&lt; num1;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"num2 = $"</span> &lt;&lt; num2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//使用引用交换</span></span><br><span class="line">    swapA(num1, num2);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"num1 = $"</span> &lt;&lt; num1;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"num2 = $"</span> &lt;&lt; num2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">//使用指针进行交换</span></span><br><span class="line">    swapB(&amp;num1, &amp;num2);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"num1 = $"</span> &lt;&lt; num1;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"num2 = $"</span> &lt;&lt; num2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// 使用值 进行交换(不可以修改原始数据，所以失败)</span></span><br><span class="line">    swapC(num1, num2);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"num1 = $"</span> &lt;&lt; num1;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"num2 = $"</span> &lt;&lt; num2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swapA</span><span class="params">(<span class="keyword">int</span> &amp;a, <span class="keyword">int</span> &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp;</span><br><span class="line">    tmp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swapB</span><span class="params">(<span class="keyword">int</span> *a, <span class="keyword">int</span> *b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp;</span><br><span class="line">    tmp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = tmp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swapC</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tmp;</span><br><span class="line">    tmp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = tmp;</span><br><span class="line">&#125;</span><br><span class="line">---------------------------------------------</span><br><span class="line"><span class="comment">/* 按引用传递和按值传递看起来相同,然而，地址运算符（&amp;）使得按地址传递.</span></span><br><span class="line"><span class="comment">swapA( )中，变量a和b是别名，所以交换a和b的值相当于交换num1,2的值；swapC( )中，变量a和b是复制了num1和num2的值的新变量，因此交换a和b的值并不会影响原值。</span></span><br><span class="line"><span class="comment">swapB()指针版本需要在函数使用p和q的整个过程中使用解除引用运算符*,</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="引用属性和特别之处"><a href="#引用属性和特别之处" class="headerlink" title="引用属性和特别之处"></a>引用属性和特别之处</h4><p>使用引用前面添加关键字const(double xx(const double &amp;ra);) ,当编译器发现修改了ra的值，将生成错误消息。</p><p><strong>临时变量、引用参数和const</strong></p><p>如果实参与引用参数不匹配，C++将生成临时变量，</p><p>如果引用参数是const，则编译器子啊两种情况下生成临时变量(实参的类型正确，但不是左值;实参的类型不正确，但可以转换为正确的类型)左值参数是可被引用的数据对象，例如，变量、数组元素、结构成员、引用和解除引用的指针都是左值。非左值包括字面常量（用引号括起的字符串除外，它们由其地址表示）和包含多项的表达式</p><p>C++11新增了另一种引用——右值引用。这种引用可指向右值，是使用&amp;&amp;声明的,新增右值引用的主要目的是，让库设计人员能够提供有些操作的更有效实现.</p><h4 id="引用与结构"><a href="#引用与结构" class="headerlink" title="引用与结构"></a>引用与结构</h4><p>引入引用主要是为了用于这些类型的，而不是基本的内置类型。</p><p>使用结构引用参数的方式与使用基本变量引用相同，只需在声明结构参数时使用引用运算符&amp;即可。如果不希望函数修改传入的结构，可使用const。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">free_throws</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">int</span> made;</span><br><span class="line">    <span class="keyword">int</span> attempts;</span><br><span class="line">    <span class="keyword">float</span> percent;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数原型</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">const</span> free_throws &amp;ft)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_pc</span><span class="params">(free_throws &amp;ft)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">free_throws &amp;<span class="title">accumulate</span><span class="params">(free_throws &amp;target, <span class="keyword">const</span> free_throws &amp;source)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//初始化了多个结构对象，结构percent未进行初始化 被设置为0</span></span><br><span class="line">    free_throws one = &#123;<span class="string">"Hello World"</span>, <span class="number">13</span>, <span class="number">14</span>&#125;;</span><br><span class="line">    free_throws two = &#123;<span class="string">"good mon"</span>, <span class="number">10</span>, <span class="number">16</span>&#125;;</span><br><span class="line">    free_throws three = &#123;<span class="string">"Li ming"</span>, <span class="number">7</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    free_throws four = &#123;<span class="string">"Han xx"</span>, <span class="number">5</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    free_throws five = &#123;<span class="string">"long long"</span>, <span class="number">6</span>, <span class="number">14</span>&#125;;</span><br><span class="line">    free_throws team = &#123;<span class="string">"endend"</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    free_throws dup;</span><br><span class="line">    <span class="comment">/* et_pc()的形参ft为引用,因此ft指向one，</span></span><br><span class="line"><span class="comment">    函数set_pc()的代码设置成员one.percent </span></span><br><span class="line"><span class="comment">    也可用指针传递 set_pc(&amp;one)  void set_pc(free_throws *pt)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    set_pc(one);</span><br><span class="line">    <span class="comment">/* display()显示结构的内容，而不修改它，因此这个函数使用了一个const引用参数</span></span><br><span class="line"><span class="comment">    这个函数可以按值传递，也可以这样引用传递，但引用传递节省时间和内存。 */</span></span><br><span class="line">    show(one);</span><br><span class="line">    <span class="comment">/* accumulate()接收两个结构参数,</span></span><br><span class="line"><span class="comment">    并将第二个结构的成员attempts和made的数据添加到第一个结构的相应成员中</span></span><br><span class="line"><span class="comment">    只修改了第一个结构，因此第一个参数为引用，而第二个参数为const引用</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    accumulate(team, one);</span><br><span class="line">    show(team);</span><br><span class="line">    <span class="comment">/* 将结构对象team作为第一个参数传递给了accumulate(),target指向的是team</span></span><br><span class="line"><span class="comment">    数accumulate()修改team，再返回指向它的引用</span></span><br><span class="line"><span class="comment">    如果返回类型被声明为free_throws而不是free_throws &amp;，</span></span><br><span class="line"><span class="comment">    上述返回语句将返回target（也就是team）的拷贝。</span></span><br><span class="line"><span class="comment">    但返回类型为引用，这意味着返回的是最初传递给accumulate()的team对象</span></span><br><span class="line"><span class="comment">    接下来，将accumulate()的返回值作为参数传递给了show()，这意味着将team传递给了show()。</span></span><br><span class="line"><span class="comment">    show()的参数为引用，这意味着函数show()中的ft指向的是team，因此将显示team的内容</span></span><br><span class="line"><span class="comment">    //等同下面：</span></span><br><span class="line"><span class="comment">    accumulate(team, two);</span></span><br><span class="line"><span class="comment">    show(team);</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    show(accumulate(team, two));</span><br><span class="line">    <span class="comment">/* 同上 show(accumulate(team, two));</span></span><br><span class="line"><span class="comment">    可以写成：</span></span><br><span class="line"><span class="comment">    accumulate(team, three);</span></span><br><span class="line"><span class="comment">    accumulate(team, four); */</span></span><br><span class="line">    accumulate(accumulate(team, three), four);</span><br><span class="line">    show(team);</span><br><span class="line">    <span class="comment">//赋值语句，将team赋值到dup</span></span><br><span class="line">    dup = accumulate(team, five);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"show team:\n"</span>;</span><br><span class="line">    show(team);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"show dup after assignment:\n"</span>;</span><br><span class="line">    show(dup);</span><br><span class="line">    set_pc(four);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 这条语句将值赋给函数调用，这是可行的，因为函数的返回值是一个引用。</span></span><br><span class="line"><span class="comment">    如果函数accumulate()按值返回，这条语句将不能通过编译。</span></span><br><span class="line"><span class="comment">    由于返回的是指向dup的引用，因此上述代码与下面的代码等效 </span></span><br><span class="line"><span class="comment">    accumulate(dup, five);</span></span><br><span class="line"><span class="comment">    dup=four;</span></span><br><span class="line"><span class="comment">    其中第二条语句消除了第一条语句所做的工作，</span></span><br><span class="line"><span class="comment">    因此在原始赋值语句使用accumulate()的方式并不好 */</span></span><br><span class="line">    accumulate(dup, five) = four;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"show dup after ill-advised assignment:\n"</span>;</span><br><span class="line">    show(dup);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">const</span> free_throws &amp;ft)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Name: "</span> &lt;&lt; ft.name &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Made: "</span> &lt;&lt; ft.made &lt;&lt; <span class="string">'\t'</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Attempts: "</span> &lt;&lt; ft.attempts &lt;&lt; <span class="string">'\t'</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Percent: "</span> &lt;&lt; ft.percent &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_pc</span><span class="params">(free_throws &amp;ft)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (ft.attempts != <span class="number">0</span>)</span><br><span class="line">        ft.percent = <span class="number">100.0f</span> * <span class="keyword">float</span>(ft.made) / <span class="keyword">float</span>(ft.attempts);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        ft.percent = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">free_throws &amp;<span class="title">accumulate</span><span class="params">(free_throws &amp;target, <span class="keyword">const</span> free_throws &amp;source)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    target.attempts += source.attempts;</span><br><span class="line">    target.made += source.made;</span><br><span class="line">    set_pc(target);</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Name: Hello World</span></span><br><span class="line"><span class="comment">Made: 13        Attempts: 14    Percent: 92.8571</span></span><br><span class="line"><span class="comment">Name: endend</span></span><br><span class="line"><span class="comment">Made: 13        Attempts: 14    Percent: 92.8571</span></span><br><span class="line"><span class="comment">Name: endend</span></span><br><span class="line"><span class="comment">Made: 23        Attempts: 30    Percent: 76.6667</span></span><br><span class="line"><span class="comment">Name: endend</span></span><br><span class="line"><span class="comment">Made: 35        Attempts: 48    Percent: 72.9167</span></span><br><span class="line"><span class="comment">show team:</span></span><br><span class="line"><span class="comment">Name: endend</span></span><br><span class="line"><span class="comment">Made: 41        Attempts: 62    Percent: 66.129</span></span><br><span class="line"><span class="comment">show dup after assignment:</span></span><br><span class="line"><span class="comment">Name: endend</span></span><br><span class="line"><span class="comment">Made: 41        Attempts: 62    Percent: 66.129</span></span><br><span class="line"><span class="comment">show dup after ill-advised assignment:</span></span><br><span class="line"><span class="comment">Name: Han xx</span></span><br><span class="line"><span class="comment">Made: 5 Attempts: 9     Percent: 55.5556</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>探究程序</strong></p><p>返回引用与传统返回机制的不同之处:</p><p>传统返回机制与按值传递函数参数类似：计算关键字return后面的表达式，并将结果返回给调用函数。从概念上说，这个值被复制到一个临时位置，而调用程序将使用这个值。如果accumulate()返回一个结构，而不是指向结构的引用，将把整个结构复制到一个临时位置，再将这个拷贝复制给dup。但在返回值为引用时，将直接把team复制到dup，其效率更高。</p><p>返回引用时最重要的一点是，应避免返回函数终止时不再存在的内存单元引用。为避免这种问题，最简单的方法是，返回一个作为参数传递给函数的引用。作为参数的引用将指向调用函数使用的数据，因此返回的引用也将指向这些数据。另一种方法是用new来分配新的存储空间。前面见过这样的函数，它使用new为字符串分配内存空间，并返回指向该内存空间的指针。注意：在不再需要new分配的内存时，应使用delete来释放它们。调用clone( )隐藏了对new的调用，这使得以后很容易忘记使用delete来释放内存。</p><p>将const用于引用返回类型：假设您要使用引用返回值，但又不允许执行像给accumulate()赋值这样的操作，只需将返回类型声明为const引用，现在返回类型为const，是不可修改的左值。</p><h4 id="将引用用于类对象"><a href="#将引用用于类对象" class="headerlink" title="将引用用于类对象"></a>将引用用于类对象</h4><p>将类对象传递给函数时，C++通常的做法是使用引用(函数将类string、ostream、istream、ofstream和ifstream等类的对象作为参数)。</p><h4 id="对象继承和引用"><a href="#对象继承和引用" class="headerlink" title="对象继承和引用"></a>对象继承和引用</h4><p>ofstream对象可以使用ostream类的方法，这使得文件输入/输出的格式与控制台输入/输出相同。使得能够将特性从一个类传递给另一个类的语言特性被称为继承。简单地说，ostream是基类（因为ofstream是建立在它的基础之上的），而ofstream是派生类（因为它是从ostream派生而来的）。派生类继承了基类的方法，这意味着ofstream对象可以使用基类的特性，如格式化方法precision( )和setf( )。继承的另一个特征是，基类引用可以指向派生类对象，而无需进行强制类型转换。这种特征的一个实际结果是，可以定义一个接受基类引用作为参数的函数，调用该函数时，可以将基类对象作为参数，也可以将派生类对象作为参数。例如，参数类型为ostream &amp;的函数可以接受ostream对象（如cout）或您声明的ofstream对象作为参数。</p><h4 id="使用应用参数"><a href="#使用应用参数" class="headerlink" title="使用应用参数"></a>使用应用参数</h4><ul><li>程序员能够修改调用函数中的数据对象。</li><li>通过传递引用而不是整个数据对象，可以提高程序的运行速度</li></ul><p>当数据对象较大时（如结构和类对象），第二个原因最重要。这些也是使用指针参数的原因。</p><p>对于使用传递的值而不作修改的函数：</p><ul><li>果数据对象很小，如内置数据类型或小型结构，则按值传递。</li><li>如果数据对象是数组，则使用指针，因为这是唯一的选择，并将指针声明为指向const的指针。</li><li>如果数据对象是较大的结构，则使用const指针或const引用，以提高程序的效率。这样可以节省复制结构所需的时间和空间。</li><li>如果数据对象是类对象，则使用const引用。类设计的语义常常要求使用引用，这是C++新增这项特性的主要原因。因此，传递类对象参数的标准方式是按引用传递。</li></ul><p>对于修改调用函数中数据的函数：</p><ul><li>如果数据对象是内置数据类型，则使用指针。如果看到诸如fixit（&amp;x）这样的代码（其中x是int），则很明显，该函数将修改x。</li><li>如果数据对象是数组，则只能使用指针。</li><li>如果数据对象是结构，则使用引用或指针</li><li>如果数据对象是类对象，则使用引用</li></ul><h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><p>默认参数指的是当函数调用中省略了实参时自动使用的一个值(缺省值)，这极大地提高了使用函数的灵活性。</p><p>设置默认值必须通过函数原型。 char <em> left(const char </em> str, int n = 1); //n=1</p><p>对于带参数列表的函数，必须从右向左添加默认值。也就是说，要为某个参数设置默认值，则必须为它右边的所有参数提供默认值</p><blockquote><p>int fun1 (int n =1, int m, int j =5) //错误 </p><p>int fun2( int n, int m=1, int j=5) //可以</p></blockquote><h3 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h3><p>函数多态是C++在C语言的基础上新增的功能。默认参数让您能够使用不同数目的参数调用同一个函数，而函数多态（函数重载）让您能够使用多个同名的函数。术语“多态”指的是有多种形式，因此函数多态允许函数可以有多种形式。类似地，术语“函数重载”指的是可以有多个同名的函数，因此对名称进行了重载。</p><p>函数重载的关键是函数的参数列表——也称为函数特征标。如果两个函数的参数数目和类型相同，同时参数的排列顺序也相同，则它们的特征标相同，而变量名是无关紧要的。C++允许定义名称相同的函数，条件是它们的特征标不同。如果参数数目和/或参数类型不同，则特征标也不同，例如print函数。</p><p>注意： int fun(int x) 和 int fun(int &amp; x)，不是重载， 译器在检查函数特征标时，将把类型引用和类型本身视为同一个特征标。重载也不区分const。是特征标，而不是函数类型使得可以对函数进行重载。</p><p>虽然函数重载很吸引人，但也不要滥用。仅当函数基本上执行相同的任务，但使用不同形式的数据时，才应采用函数重载。</p><p>使用一个带默认参数的函数要简单些。只需编写一个函数（而不是两个函数），程序也只需为一个函数（而不是两个）请求内存；需要修改函数时，只需修改一个。然而，如果需要使用不同类型的参数，则默认参数便不管用了，在这种情况下，应该使用函数重载。</p><h3 id="函数模版"><a href="#函数模版" class="headerlink" title="函数模版"></a>函数模版</h3><p>C++编译器实现了C++新增的一项特性——函数模板。函数模板是通用的函数描述，也就是说，它们使用泛型来定义函数，其中的泛型可用具体的类型（如int或double）替换。通过将类型作为参数传递给模板，可使编译器生成该类型的函数。由于模板允许以泛型（而不是具体类型）的方式编写程序，因此有时也被称为通用编程。由于类型是用参数表示的，因此模板特性有时也被称为参数化类型。</p><blockquote><p>template <typename anytype>  //</typename></p><p>准C++98添加关键字typename之前，C++使用关键字class</p><p>template <class anytype></class></p></blockquote><p><strong>重载模版</strong></p><p>并非所有的类型都使用相同的算法。为满足这种需求，可以像重载常规函数定义那样重载模板定义。和常规重载一样，被重载的模板的函数特征标必须不同.</p><blockquote><p>template <typename t></typename></p><p>void Swap(T &amp;a, T &amp;b);</p><p>template <typename t></typename></p><p>void Swap(T <em>，T </em>b, int n);</p></blockquote><p><strong>实例化和具体化</strong></p><p>最初，编译器只能通过隐式实例化，来使用模板生成函数定义，但现在C++还允许显式实例化。可以直接命令编译器创建特定的实例,如Swap<int>( )。其语法是，声明所需的种类——用&lt;&gt;符号指示类型，并在声明前加上关键字template</int></p><blockquote><p>template void Swap<int>(int, int )</int></p></blockquote><p>显式具体化使用下面两个等价的声明之一</p><blockquote><p>template &lt;&gt; void Swap<int> (int &amp;, int &amp;);</int></p><p>template &lt;&gt; void Swap(int &amp;， int &amp;);</p></blockquote><p>区别在于，这些声明的意思是“不要使用Swap( )模板来生成函数定义，而应使用专门为int类型显式地定义的函数定义”。这些原型必须有自己的函数定义。显式具体化声明在关键字template后包含&lt;&gt;，而显式实例化没有。</p><h3 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h3><ol><li>那种函数适合定义内联函数</li></ol><blockquote><p>一行代码的小型 非递归函数</p></blockquote><ol start="2"><li>函数原”void song(const char * name, int times);”,提供默认值修改</li></ol><blockquote><p>void song(char * name = “Hello”, int times=1)</p></blockquote><ol start="3"><li>编写iquote( )的重载版本——显示其用双引号括起的参数。编写3个版本：一个用于int参数，一个用于double参数，另一个用于string参数。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">iquote</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"\""</span>&lt;&lt;n&lt;&lt;<span class="string">"\""</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">iquote</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">'"'</span>&lt;&lt;x&lt;&lt;<span class="string">'"'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">iquote</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"\""</span>&lt;&lt;str&lt;&lt;<span class="string">"\""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>给出一个结构体，编写函数，将box结构因为形参，并显示结构成员值，并且求体积</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">box</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> maker[<span class="number">20</span>];</span><br><span class="line">    <span class="keyword">float</span> height;</span><br><span class="line">    <span class="keyword">float</span> width;</span><br><span class="line">    <span class="keyword">float</span> length;</span><br><span class="line">    <span class="keyword">float</span> volume;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示成员</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span> <span class="params">(<span class="keyword">const</span> box &amp; container)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;container.make&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//计算体积</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Calvolume</span><span class="params">(box &amp; crate)</span></span>&#123;</span><br><span class="line">create.volume = create.height * create.width * create.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>指出下面每个目标是否可以使用默认参数或函数重载完成，或者这两种方法都无法完成，并提供合适的原型。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* mass(density, volume)返回密度为density、体积为volume的物体的质量，而mass(denstity)返回密度为density、体积为1.0立方米的物体的质量。这些值的类型都为double。 */</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">mass</span><span class="params">(<span class="keyword">double</span> d, <span class="keyword">double</span> v=<span class="number">1.0</span>)</span></span>;</span><br><span class="line"><span class="comment">//重载</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">mass</span><span class="params">(<span class="keyword">double</span> d, <span class="keyword">double</span> v)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">mass</span><span class="params">(<span class="keyword">double</span> d)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* repeat(10, “I'm OK”)将指定的字符串显示10次，而repeat(“But you're kind of stupid”)将指定的字符串显示5次。 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">repeat</span><span class="params">(<span class="keyword">int</span> times, <span class="keyword">const</span> <span class="keyword">char</span> * str)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">repeat</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *str)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* average(3, 6)返回两个int参数的平均值（int类型），而average(3.0, 6.0)返回两个double值的平均值（double类型） */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">average</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">average</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* mangle(“I'm glad to meet you”)根据是将值赋给char变量还是char*变量，分别返回字符I和指向字符串“I'm mad to gleet you”的指针 */</span></span><br><span class="line">不可以这么做，因为两个版本特征标相同。</span><br></pre></td></tr></table></figure><ol start="6"><li>编写返回两个参数中较大值的函数模板</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T</span> <span class="title">max</span>(<span class="title">T</span> <span class="title">t1</span>, <span class="title">T</span> <span class="title">t2</span>)&#123;</span></span><br><span class="line"><span class="keyword">return</span> t1&gt;t2 ? t1:t2;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>给定问答5的模板和问答4的box结构，提供一个模板具体化，它接受两个box参数，并返回体积较大的一个。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;&gt; <span class="function">box <span class="title">max</span><span class="params">(box b1, box b2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b1.volume &gt; b2.volume ? b1:b2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li>看程序指出v1-v5类型</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> g（<span class="keyword">int</span> x）;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">float</span> m = <span class="number">5.5f</span>;</span><br><span class="line"><span class="keyword">float</span> &amp; rm =m;</span><br><span class="line"><span class="keyword">decltype</span>(m) v1 =m; <span class="comment">//float</span></span><br><span class="line"><span class="keyword">decltype</span>(rm) v2 =m; <span class="comment">//float &amp;</span></span><br><span class="line"><span class="keyword">decltype</span>((m)) v3 =m; <span class="comment">//float &amp;</span></span><br><span class="line"><span class="keyword">decltype</span>(g(<span class="number">100</span>)) v4; <span class="comment">// int </span></span><br><span class="line"><span class="keyword">decltype</span>(<span class="number">2.0</span>*m) v5; <span class="comment">//double</span></span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ol><li>接受一个参数（字符串的地址），并打印该字符串的函数。然而，如果提供了第二个参数（int类型），且该参数不为0，则该函数打印字符串的次数将为该函数被调用的次数(int 为函数调用次数。)</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> k_times = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_times</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *szTmp, <span class="keyword">int</span> flag = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ++k_times;</span><br><span class="line">    <span class="keyword">unsigned</span> uPrintfTimes = (<span class="number">0</span> == flag) ? <span class="number">1</span> : k_times;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"&gt;&gt;&gt;&gt;"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = <span class="number">0</span>; i &lt; uPrintfTimes; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; szTmp &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"&lt;&lt;&lt;&lt;"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"-----------------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *szTxt = <span class="string">"hi, yangyang.gnu"</span>;</span><br><span class="line">    print_times(szTxt, <span class="number">8</span>);</span><br><span class="line">    print_times(szTxt);</span><br><span class="line">    print_times(szTxt, <span class="number">-1</span>);</span><br><span class="line">    print_times(szTxt);</span><br><span class="line">    print_times(szTxt, <span class="number">256</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>CandyBar结构包含3个成员。第一个成员存储candy bar的品牌名称；第二个成员存储candy bar的重量（可能有小数）；第三个成员存储candy bar的热量（整数）。请编写一个程序，它使用一个这样的函数，即将CandyBar的引用、char指针、double和int作为参数，并用最后3个值设置相应的结构成员。最后3个参数的默认值分别为“Millennium Munch”、2.85和350。另外，该程序还包含一个以CandyBar的引用为参数，并显示结构内容的函数。请尽可能使用const.</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TCandyBar</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">string</span> strBrand;</span><br><span class="line">    <span class="keyword">double</span> weight;</span><br><span class="line">    <span class="keyword">int</span> calories;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set_candybar</span><span class="params">(TCandyBar &amp;candbar, <span class="keyword">const</span> <span class="keyword">char</span> *strBrand = <span class="string">"Millennium Munch"</span>, <span class="keyword">double</span> weight = <span class="number">2.85</span>, <span class="keyword">int</span> calories = <span class="number">350</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    candbar.strBrand = strBrand;</span><br><span class="line">    candbar.weight = weight;</span><br><span class="line">    candbar.calories = calories;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_candybar</span><span class="params">(<span class="keyword">const</span> TCandyBar &amp;candbar)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; candbar.strBrand &lt;&lt; <span class="string">'\t'</span> &lt;&lt; candbar.weight &lt;&lt; <span class="string">'\t'</span> &lt;&lt; candbar.calories &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TCandyBar candbar1, candbar2;</span><br><span class="line">    set_candybar(candbar1);</span><br><span class="line">    show_candybar(candbar1);</span><br><span class="line">    set_candybar(candbar2, <span class="string">"yang yang"</span>, <span class="number">3.11</span>, <span class="number">256</span>);</span><br><span class="line">    show_candybar(candbar2);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>编写一个函数，它接受一个指向string对象的引用作为参数，并将该string对象的内容转换为大写，可使用函数toupper( )。然后编写一个程序，它通过使用一个循环让您能够用不同的输入来测试这个函数.</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> &amp;</span><br><span class="line">str_to_upper(<span class="built_in">string</span> &amp;str)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;e : str)</span><br><span class="line">    &#123;</span><br><span class="line">        e = (<span class="keyword">char</span>)<span class="built_in">toupper</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter a string (q to quit): "</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span> strInput;</span><br><span class="line">        getline(<span class="built_in">cin</span>, strInput);</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">cin</span> || <span class="string">"q"</span> == strInput || <span class="string">"Q"</span> == strInput)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; str_to_upper(strInput) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>请提供已知代码描述的函数和原型，从而完成该程序。注意，应有两个show( )函数，每个都使用默认参数。请尽可能使用cosnt参数。set( )使用new分配足够的空间来存储指定的字符串。这里使用的技术与设计和实现类时使用的相似</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stringy</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> *str;</span><br><span class="line">    <span class="keyword">int</span> ct;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(stringy &amp;stry, <span class="keyword">const</span> <span class="keyword">char</span> *szTxt)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stry.ct = (<span class="keyword">int</span>)<span class="built_in">strlen</span>(szTxt);</span><br><span class="line">    stry.str = <span class="keyword">new</span> <span class="keyword">char</span>[stry.ct + <span class="number">1</span>];</span><br><span class="line">    <span class="built_in">strcpy</span>(stry.str, szTxt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *szTxt, <span class="keyword">unsigned</span> times = <span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = <span class="number">0</span>; i &lt; times; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; szTxt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">const</span> stringy &amp;stry, <span class="keyword">unsigned</span> times = <span class="number">1</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = <span class="number">0</span>; i &lt; times; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; stry.str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">(stringy &amp;stry)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">delete</span>[] stry.str;</span><br><span class="line">    stry.str = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    stringy beany;</span><br><span class="line">    <span class="keyword">char</span> testing[] = <span class="string">"Reality isn't what it used to be."</span>;</span><br><span class="line">    <span class="built_in">set</span>(beany, testing);</span><br><span class="line"></span><br><span class="line">    show(beany);</span><br><span class="line">    show(beany, <span class="number">2</span>);</span><br><span class="line">    destroy(beany);</span><br><span class="line"></span><br><span class="line">    testing[<span class="number">0</span>] = <span class="string">'D'</span>;</span><br><span class="line">    testing[<span class="number">1</span>] = <span class="string">'u'</span>;</span><br><span class="line">    show(testing);</span><br><span class="line">    show(testing, <span class="number">3</span>);</span><br><span class="line">    show(<span class="string">"Done!"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// prints member string once</span></span><br><span class="line">    <span class="comment">// prints member string twice</span></span><br><span class="line">    <span class="comment">// prints testing string once</span></span><br><span class="line">    <span class="comment">// prints testing string thrice</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>编写模板函数max5( )，它将一个包含5个T类型元素的数组作为参数，并返回数组中最大的元素（由于长度固定，因此可以在循环中使用硬编码，而不必通过参数来传递）。在一个程序中使用该函数，将T替换为一个包含5个int值的数组和一个包含5个dowble值的数组，以测试该函数.</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">const</span> T &amp;</span><br><span class="line">max5(<span class="keyword">const</span> <span class="built_in">array</span>&lt;T, <span class="number">5</span>&gt; &amp;arr)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> idxMax = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; arr[idxMax])</span><br><span class="line">        &#123;</span><br><span class="line">            idxMax = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (arr[idxMax]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">array</span>&lt;<span class="keyword">int</span>, 5&gt; iArray = &#123;&#123;<span class="number">32</span>, <span class="number">-1</span>, <span class="number">99</span>, <span class="number">256</span>, <span class="number">9</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;e : iArray)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">" ----max: "</span> &lt;&lt; max5(iArray) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">array</span>&lt;<span class="keyword">double</span>, 5&gt; dArray = &#123;&#123;<span class="number">-3.2</span>, <span class="number">221.22</span>, <span class="number">9.9</span>, <span class="number">0</span>, <span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;e : dArray)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">" ----max: "</span> &lt;&lt; max5(dArray);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>编写模板函数maxn( )，它将由一个T类型元素组成的数组和一个表示数组元素数目的整数作为参数，并返回数组中最大的元素。在程序对它进行测试，该程序使用一个包含6个int元素的数组和一个包含4个double元素的数组来调用该函数。程序还包含一个具体化，它将char指针数组和数组中的指针数量作为参数，并返回最长的字符串的地址。如果有多个这样的字符串，则返回其中第一个字符串的地址。使用由5个字符串指针组成的数组来测试该具体化。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="keyword">const</span> T &amp;</span><br><span class="line">maxn(<span class="keyword">const</span> T arr[], <span class="keyword">unsigned</span> n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> idxMax = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] &gt; arr[idxMax])</span><br><span class="line">        &#123;</span><br><span class="line">            idxMax = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (arr[idxMax]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *</span><br><span class="line">maxn(<span class="keyword">const</span> <span class="keyword">char</span> *arr[], <span class="keyword">unsigned</span> n)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> idxMax = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strlen</span>(arr[i]) &gt; <span class="built_in">strlen</span>(arr[idxMax]))</span><br><span class="line">        &#123;</span><br><span class="line">            idxMax = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (arr[idxMax]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> iArray[] = &#123;<span class="number">32</span>, <span class="number">-1</span>, <span class="number">99</span>, <span class="number">0</span>, <span class="number">256</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;e : iArray)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">" ----max: "</span> &lt;&lt; maxn(iArray, <span class="keyword">sizeof</span>(iArray) / <span class="keyword">sizeof</span>(iArray[<span class="number">0</span>])) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> dArray[] = &#123;<span class="number">-3.2</span>, <span class="number">221.22</span>, <span class="number">9.9</span>, <span class="number">0</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;e : dArray)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; e &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">" ----max: "</span> &lt;&lt; maxn(dArray, <span class="keyword">sizeof</span>(dArray) / <span class="keyword">sizeof</span>(dArray[<span class="number">0</span>])) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *szArray[] = &#123;</span><br><span class="line">        <span class="string">"aa aa"</span>,</span><br><span class="line">        <span class="string">"dddddddddddd"</span>,</span><br><span class="line">        <span class="string">""</span>,</span><br><span class="line">        <span class="string">"fffffff ffff"</span>,</span><br><span class="line">        <span class="string">"kk kk"</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;e : szArray)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">'\"'</span> &lt;&lt; e &lt;&lt; <span class="string">'\"'</span> &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">" ----max: "</span> &lt;&lt; <span class="string">'\"'</span> &lt;&lt; maxn(szArray, <span class="keyword">sizeof</span>(szArray) / <span class="keyword">sizeof</span>(szArray[<span class="number">0</span>])) &lt;&lt; <span class="string">'\"'</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>使用两个名为 SumArray()的模板函数来返回数组元素的总和，而不是显示数组的内容。程序应显示thing的总和以及所有debt的总和</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">debts</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">double</span> amount;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">SumArray</span><span class="params">(T arr[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"template A\n"</span>;</span><br><span class="line">    <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        sum += arr[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">SumArray</span><span class="params">(T *arr[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"template B\n"</span>;</span><br><span class="line">    <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        sum += *arr[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (sum);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">    <span class="keyword">int</span> things[<span class="number">6</span>] = &#123;<span class="number">13</span>, <span class="number">31</span>, <span class="number">103</span>, <span class="number">301</span>, <span class="number">310</span>, <span class="number">130</span>&#125;;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">debts</span> <span class="title">mr_E</span>[3] = &#123;</span>&#123;<span class="string">"Ima Wolfe"</span>, <span class="number">2400.0</span>&#125;,</span><br><span class="line">                            &#123;<span class="string">"Ura Foxe"</span>, <span class="number">1300.0</span>&#125;,</span><br><span class="line">                            &#123;<span class="string">"Iby Stout"</span>, <span class="number">1800.0</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">double</span> *pd[<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">        pd[i] = &amp;mr_E[i].amount;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"the total number of Mr. E's things:\n"</span></span><br><span class="line">         &lt;&lt; SumArray(things, <span class="number">6</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"the sum of Mr. E's all debts:\n"</span></span><br><span class="line">         &lt;&lt; SumArray(pd, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第七章：函数探幽&lt;br&gt;
    
    </summary>
    
      <category term="C++" scheme="http://atworking.cn/categories/C/"/>
    
    
      <category term="C++" scheme="http://atworking.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++基础知识06</title>
    <link href="http://atworking.cn/2019/05/27/C-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%8606/"/>
    <id>http://atworking.cn/2019/05/27/C-基础知识06/</id>
    <published>2019-05-27T12:47:23.000Z</published>
    <updated>2019-05-30T07:14:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>第六章：函数<br><a id="more"></a></p><h3 id="函数的基本知识"><a href="#函数的基本知识" class="headerlink" title="函数的基本知识"></a>函数的基本知识</h3><p>使用函数必须遵守以下几点</p><ul><li><p>提供函数定义；</p></li><li><p>提供函数原型；</p></li><li><p>调用函数。</p></li></ul><h4 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h4><p>可以将函数分成两类：没有返回值的函数和有返回值的函数。</p><p>没有返回值的函数被称为void函数</p><blockquote><p>void funName(paraList){ xxxx; return; }</p></blockquote><p>有返回值的函数将生成一个值，并将它返回给调用函数</p><blockquote><p>typeName funName(paralist){ xxxx; return value; }</p></blockquote><p>函数通过将返回值复制到指定的CPU寄存器或内存单元中来将其返回。随后，调用程序将查看该内存单元。返回函数和调用函数必须就该内存单元中存储的数据的类型达成一致。函数原型将返回值类型告知调用程序，而函数定义命令被调用函数应返回什么类型的数据</p><p><img src="http://mdimg.atworking.cn/img/2019-5-29-14-37-1.png" alt="带返回值的函数返回"></p><h4 id="函数原型"><a href="#函数原型" class="headerlink" title="函数原型"></a>函数原型</h4><p><strong>函数原型：</strong></p><p>原型描述了函数到编译器的接口，也就是说，它将函数返回值的类型（如果有的话）以及参数的类型和数量告诉编译器</p><p>double value = add(num);</p><p>原型告诉编译器，add( )有一个double参数。如果程序没有提供这样的参数，原型将让编译器能够捕获这种错误。其次，add( )函数完成计算后，将把返回值放置在指定的位置——可能是CPU寄存器，也可能是内存中。然后调用函数（这里为main( )）将从这个位置取得返回值。由于原型指出了add( )的类型为double，因此编译器知道应检索多少个字节以及如何解释它们。如果没有这些信息，编译器将只能进行猜测，而编译器是不会这样做的。</p><p>使用原型：编译器如果在文件中一步步查找，效率是不高的，并且C++允许将一个程序放在多文件中，单独编译这些文件。这种情况下，编译器在编译main时，可能无权访问函数代码。如果函数位于库种，也是如此。</p><p><strong>原型语法</strong></p><p>函数原型是一条语句，因此必须以分号结束。获得原型最简单的方法是，复制函数定义中的函数头，并添加分号,函数原型不需要提供变量名，有类型列表就行。</p><blockquote><p>double add(double num)</p><p>void result(int)</p></blockquote><p><strong>原型功能</strong></p><ul><li>编译器正确处理函数返回值；</li><li>编译器检查使用的参数数目是否正确；</li><li>编译器检查使用的参数类型是否正确。如果不正确，则转换为正确的类型（如果可能的话）</li></ul><h3 id="函数参数和按值传递"><a href="#函数参数和按值传递" class="headerlink" title="函数参数和按值传递"></a>函数参数和按值传递</h3><p>C++通常按值传递参数，这意味着将数值参数传递给函数，而后者将其赋给一个新的变量。用于接收传递值的变量被称为形参。传递给函数的值被称为实参。出于简化的目的，C++标准使用参数（argument）来表示实参，使用参量（parameter）来表示形参，因此参数传递将参量赋给参数</p><p><img src="http://mdimg.atworking.cn/img/2019-5-29-14-55-39.png" alt="按值传递"></p><p>在函数中声明的变量（包括参数）是该函数私有的。在函数被调用时，计算机将为这些变量分配内存；在函数结束时，计算机将释放这些变量使用的内存，这样的变量被称为局部变量，因为它们被限制在函数中，这样做有助于确保数据的完整性。</p><p><strong>多个参数</strong></p><p>函数可以有多个参数。在调用函数时，只需使用逗号将这些参数分开即可，同样，在定义函数时，也在函数头中使用由逗号分隔的参数声明列表。</p><h3 id="函数和数组"><a href="#函数和数组" class="headerlink" title="函数和数组"></a>函数和数组</h3><p>函数参数和返回值的类型可以是基本类型，也可以是处理更复杂的类型（如数组和结构）</p><h4 id="使用指针处理数组"><a href="#使用指针处理数组" class="headerlink" title="使用指针处理数组"></a>使用指针处理数组</h4><p>C++和C语言一样，也将数组名视为指针，C++将数组名解释为其第一个元素的地址(arrName=&amp;arrName[0]),该规则有一些例外,首先，数组声明使用数组名来标记存储位置；其次，对数组名使用sizeof将得到整个数组的长度,第三将地址运算符&amp;用于数组名时，将返回整个数组的地址，例如&amp;cookies(cookies长度为8)将返回一个32字节内存块的地址（如果int长4字节）。</p><p>int sum = sum_arr(cookies, length) //调用</p><p>int sum_arr(int * arr, int n)  //原型</p><p>cookies是数组名，而根据C++规则，cookies是其第一个元素的地址，因此函数传递的是地址。由于数组的元素的类型为int，因此cookies的类型必须是int指针，即int <em>。其中用int </em> arr替换了int arr [ ]。这证明这两个函数头都是正确的，因为在C++中，当（且仅当）用于函数头或函数原型中，int <em>arr和int arr [ ]的含义才是相同的。它们都意味着arr是一个int指针。然而，数组表示法（int arr[ ]）提醒用户，arr不仅指向int，还指向int数组的第一个int。当指针指向数组的第一个元素时，可以使用数组表示法，而当指针指向一个独立的值时，使用指针表示法。在其他的上下文中，int </em> arr和int arr [ ]的含义并不相同。例如，不能在函数体中使用int tip[ ]来声明指针。</p><p>鉴于变量arr实际上就是一个指针，函数的其余部分是合理的，将指针（包括数组名）加1，实际上是加上了一个与指针指向的类型的长度（以字节为单位）相等的值。对于遍历数组而言，使用指针加法和数组下标时等效的。记住下面两个恒等式</p><blockquote><p>arr[i] == *(ar+i)</p><p>&amp;arr[i]==ar+i</p></blockquote><h4 id="将数组作为参数代表什么"><a href="#将数组作为参数代表什么" class="headerlink" title="将数组作为参数代表什么"></a>将数组作为参数代表什么</h4><p>函数调用sum_arr(coolies, ArSize)将cookies数组第一个元素的地址和数组中的元素数目传递给sum_arr( )函数。sum_arr( )函数将cookies的地址赋给指针变量arr，将ArSize赋给int变量n。意味着：实际上并没有将数组内容传递给函数，而是将数组的位置（地址）、包含的元素种类（类型）以及元素数目（n变量）提交给函数有了这些信息后，函数便可以使用原来的数组。传递常规变量时，函数将使用该变量的拷贝；但传递数组时，函数将使用原来的数组。实际上，这种区别并不违反C++按值传递的方法，sum_arr( )函数仍传递了一个值，这个值被赋给一个新变量，但这个值是一个地址，而不是数组的内容。</p><p>数组名与指针对应是好事吗？确实是一件好事。将数组地址作为参数可以节省复制整个数组所需的时间和内存。如果数组很大，则使用拷贝的系统开销将非常大；程序不仅需要更多的计算机内存，还需要花费时间来复制大块的数据。另一方面，使用原始数据增加了破坏数据的风险。在经典的C语言中，这确实是一个问题，但ANSI C和C++中的const限定符提供了解决这种问题的办法。</p><h4 id="更多数组函数示例"><a href="#更多数组函数示例" class="headerlink" title="更多数组函数示例"></a>更多数组函数示例</h4><p>选择使用数组来表示数据时，实际上是在进行一次设计方面的决策。但设计决策不仅仅是确定数据的存储方式，还涉及到如何使用数据。编写特定的函数来处理特定的数据操作是有好处的（这里讲的好处指的是程序的可靠性更高、修改和调试更为方便）。另外，构思程序时将存储属性与操作结合起来，便是朝OOP思想迈进了重要的一步；以后将证明这是很有好处的。</p><p><strong>填充数组</strong></p><p>由于接受数组名参数的函数访问的是原始数组，而不是其副本，因此可以通过调用该函数将值赋给数组元素。该函数的一个参数是要填充的数组的名称</p><blockquote><p>int fill_arr(double ar[], int limit) //原型</p></blockquote><p>该函数接受两个参数，一个是数组名，另一个指定了要读取的最大元素数；该函数返回实际读取的元素数，如果是5个元素，例如，如果使用该函数来处理一个包含5个元素的，则将5作为第二个参数。</p><p>可以使用循环连续地将值读入到数组中，但如何提早结束循环呢？一种方法是，使用一个特殊值来指出输入结束。由于所有的属性都不为负，因此可以使用负数来指出输入结束。另外，该函数应对错误输入作出反应，如停止输入等。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fill_arr</span><span class="params">(<span class="keyword">double</span> ar[], <span class="keyword">int</span> limit)</span></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">    <span class="keyword">double</span> temp;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i&lt; limit; i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Enter value #"</span>&lt;&lt;(i+<span class="number">1</span>)&lt;&lt;<span class="string">": "</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">cin</span>)&#123; <span class="comment">//非法输入</span></span><br><span class="line">            <span class="built_in">cin</span>.clear()；</span><br><span class="line">                <span class="keyword">while</span> (<span class="built_in">cin</span>.get()!=<span class="string">'\n'</span>)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">"bad input. \n"</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (temp &lt;<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        ar[i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入非负值，将赋值给数组，否则循环结束，如果用户输入的都是有效值，则循环将在读取最大数目的值后结束。循环完成的最后一项工作是将i加1，因此循环结束后，i将比最后一个数组索引大1，即等于填充的元素数目。然后，函数返回这个值。</p><p><strong>显示数组及用const保护数组</strong></p><p>创建显示数组内容的函数，只需将数组名和填充的元素数目传递给函数，然后该函数使用循环来显示每个元素。确保显示函数不修改原始数组。除非函数的目的就是修改传递给它的数据，否则应避免发生这种情况。使用普通参数时，这种保护将自动实现，由于C++按值传递数据，而且函数使用数据的副本，接受数组名的函数将使用原始数据，这正是fill_array( )函数能够完成其工作的原因。为防止函数无意中修改数组的内容，可在声明形参时使用关键字const</p><blockquote><p>void show_arr(const double ar[], int n)</p></blockquote><p>该声明表明，指针ar指向的是常量数据。这意味着不能使用ar修改该数据，也就是说，可以使用像ar[0]这样的值，但不能修改。注意，这并不是意味着原始数组必须是常量，而只是意味着不能在show_array( )函数中使用ar来修改这些数据。因此，show_array( )将数组视为只读数据</p><p>如果对数组进行改变(ar[0]+=10)，则回出现错误(cannot modify a const)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//显示数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> num[], <span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>；</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt;num[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>修改数组</strong></p><p>函数将修改数组的值，因此在声明ar时，不能使用const。</p><p><strong>数组处理函数常用的编写方式</strong></p><p>处理double数组的函数</p><blockquote><p>void f_modify(double arr[],int n); //可修改</p><p>void f_nochange(const double arr[],int n); //不修改</p></blockquote><h4 id="使用数组区间的函数"><a href="#使用数组区间的函数" class="headerlink" title="使用数组区间的函数"></a>使用数组区间的函数</h4><p>处理数组的C++函数，必须将数组中的数据种类、数组的起始位置和数组中元素数量提交给它；传统的C/C++方法是，将指向数组起始处的指针作为一个参数，将数组长度作为第二个参数（指针指出数组的位置和数据类型），这样便给函数提供了找到所有数据所需的信息</p><p>另一种给函数提供所需信息的方法，即指定元素区间（range），这可以通过传递两个指针来完成：一个指针标识数组的开头，另一个指针标识数组的尾部</p><blockquote><p>int sum_arr(const int <em> begin, const int </em>end);    //声明</p><p>int sum = sum_arr(cookies, cookies+size); //调用</p><p>for (pt = begin; pt != end; pt++){ *pt; }   //循环取值</p></blockquote><h4 id="指针和const"><a href="#指针和const" class="headerlink" title="指针和const"></a>指针和const</h4><p>可以用两种不同的方式将const关键字用于指针。第一种方法是让指针指向一个常量对象，这样可以防止使用该指针来修改所指向的值,第二种方法是将指针本身声明为常量，这样可以防止改变指针指向的位置。</p><p>int age =10 ;const int * p = &age;</p><p>p为const不能通过p来修改值。当时age不是const，可以通过age修改。</p><table><thead><tr><th>指针和变量</th><th>是否可行</th></tr></thead><tbody><tr><td>常规变量的地址赋给常规指针</td><td>可以</td></tr><tr><td>常规变量的地址赋给指向const的指针</td><td>可以</td></tr><tr><td>const变量的地址赋给指向const的指针</td><td>可以</td></tr><tr><td>const的地址赋给常规指针</td><td>不可以</td></tr></tbody></table><p>注意：const只能防止修改指向的值，但是不能防止修改p的值</p><p>int sage=20; p=&amp;sage //ok 但事不能修改saged的值</p><p>下面这种声明使得p只能指向n,但是允许使用p  来修改n得值。</p><p>int n =1;  int * const p = &n;</p><p><img src="http://mdimg.atworking.cn/img/2019-5-29-16-6-17.png" alt="const和指针"></p><p>还可以声明const对象得const指针</p><p>int n =2 ; const int <em> const p = &n;  //p只能指向n,p还不能修改n得值。p和</em>p均是const</p><h3 id="函数和二维数组"><a href="#函数和二维数组" class="headerlink" title="函数和二维数组"></a>函数和二维数组</h3><p>将二维数组作为参数的函数，必须牢记，数组名被视为其地址，因此，相应的形参是一个指针，就像一维数组一样。比较难处理的是如何正确地声明指针。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> data[<span class="number">2</span>][<span class="number">3</span>]=&#123;&#123;<span class="number">1</span>，<span class="number">2</span>，<span class="number">3</span>&#125;,&#123;<span class="number">4</span>，<span class="number">5</span>，<span class="number">6</span>&#125;&#125;；</span><br><span class="line"><span class="keyword">int</span> total =sum(data，<span class="number">2</span>)；</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Date是一个数组名，里面含有3个元素，第一个元素本身四个数组，由3个int组成，因此data类型是由3个int组成的指针</span></span><br><span class="line"><span class="comment">声明如下：</span></span><br><span class="line"><span class="comment">int sum(int (*ar)[3]，int size)；</span></span><br><span class="line"><span class="comment">括号是必不可少的，因为下面的声明将声明一个由3个指向int的指针组成的数组，而不是由一个指向由3个int组成的数组的指针</span></span><br><span class="line"><span class="comment">还可以声明：</span></span><br><span class="line"><span class="comment">int sum(int ar[][3]，int size)；</span></span><br><span class="line"><span class="comment">ar是指针而不是数，它指向由3个int组成的数组。因此，指针类型指定了列数，这就是没有将列数作为独立的函数参数进行传递的原因</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="函数和char字符串"><a href="#函数和char字符串" class="headerlink" title="函数和char字符串"></a>函数和char字符串</h3><p>字符串由一系列字符组成，以空值字符结尾， 字符串与常规char数组之间的一个重要区别是，字符串有内置的结束字符，必将字符串长度作为参数传递给函数，而函数可以使用循环依次检查字符串中的每个字符，直到遇到结尾的空值字符为止。</p><p>char指针(char *)类型字符串的三种表示方法 :</p><p>char a[10] = “hello”;    char * str = “hello”</p><ul><li>char数组；void fun1 = str(a)</li><li>用引号括起的字符串常量（也称字符串字面值）；void fun1 = str(“hello”)</li><li>被设置为字符串的地址的char指针。void fun1 = str(str)</li></ul><p>函数无法返回一个字符串，但可以返回字符串的地址，这样做的效率更高。函数返回一个指针。该函数接受两个参数：一个字符和一个数字。函数使用new创建一个长度与数字参数相等的字符串，然后将每个元素都初始化为该字符。然后，返回指向新字符串的指针。</p><h3 id="函数和结构体"><a href="#函数和结构体" class="headerlink" title="函数和结构体"></a>函数和结构体</h3><p>与数组不同，结构将其数据组合成单个实体或数据对象，该实体被视为一个整体。可以按值传递结构，就像普通变量那样。在这种情况下，函数将使用原始结构的副本。另外，函数也可以返回结构。与数组名就是数组第一个元素的地址不同的是，结构名只是结构的名称，要获得结构的地址，必须使用地址运算符&amp;。在C语言和C++中，都使用符号&amp;来表示地址运算符；另外，C++还使用该运算符来表示引用变量。按值传递结构有一个缺点。如果结构非常大，则复制结构将增加内存要求，降低系统运行的速度。出于这些原因，许多C程序员倾向于传递结构的地址，然后使用指针来访问结构的内容。</p><h4 id="传递和返回结构"><a href="#传递和返回结构" class="headerlink" title="传递和返回结构"></a>传递和返回结构</h4><p>当结构比较小时，按值传递结构最合理</p><blockquote><p>结构体  sum(结构体1 结构体2)</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">time</span>&#123;</span>   <span class="comment">//定义结构体</span></span><br><span class="line">    <span class="keyword">int</span> hours；</span><br><span class="line">    <span class="keyword">int</span> mins；</span><br><span class="line">&#125;；</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> pre =<span class="number">60</span>；</span><br><span class="line">time sum(time t1，time t2)； <span class="comment">//定义函数 传递两个结构体，返回结构体</span></span><br><span class="line"><span class="keyword">void</span> show_time(time t)；<span class="comment">//显示结果</span></span><br><span class="line"><span class="keyword">int</span> main()&#123;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>；</span><br><span class="line">time time1=&#123;<span class="number">3</span>,<span class="number">2</span>&#125;;</span><br><span class="line">time time2=&#123;<span class="number">5</span>,<span class="number">8</span>&#125;;</span><br><span class="line"></span><br><span class="line">time result=sum(time1,time2);<span class="comment">//引用函数</span></span><br><span class="line">show_time(result); <span class="comment">//显示结果</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>；</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结构体函数实现</span></span><br><span class="line">time sum(time t1,time t2)&#123;</span><br><span class="line">titme total;</span><br><span class="line">total.mins=(t1.mins+t2.mins)%pre;</span><br><span class="line">total.hours=t1.hours+t2.hours+(t1.mins+t2.mins)/pre;</span><br><span class="line"><span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//显示函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_time</span><span class="params">(time t)</span></span>&#123;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; t.hours&lt;&lt;<span class="string">":"</span>&lt;&lt;<span class="string">"t.mins"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="处理函数和结构体第二个方法"><a href="#处理函数和结构体第二个方法" class="headerlink" title="处理函数和结构体第二个方法"></a>处理函数和结构体第二个方法</h4><p>这个例子将定义两个结构，用于表示两种不同的描述位置的方法，然后开发一个函数，将一种格式转换为另一种格式，并显示结果.</p><p>描述屏幕上的某个坐标使用x表示水平偏移量，使用y表示垂直偏移量(用坐标结构体表示位置)，另一种描述点的位置的方法是，指出它偏离原点的距离和方向（例如，东偏北40度）。数学家从正水平轴开始按逆时针方向度量角度距离和角度一起构成了极坐标(polar结构体)。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="comment">//坐标结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rect</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x;</span><br><span class="line">    <span class="keyword">double</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//polar结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">polar</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> distance;</span><br><span class="line">    <span class="keyword">double</span> angle;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*创建一个显示polar内容的函数，角度约为：57.29577951</span></span><br><span class="line"><span class="comment">形参的类型为polar。将一个polar结构传递给该函数时，该结构的内容将被复制到dapos结构中，函数随后将使用该拷贝完成工作</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_polar</span><span class="params">(polar dapos)</span></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">    <span class="keyword">const</span> num=<span class="number">57.29577951</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"distance="</span>&lt;&lt;dapos.distance;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"angle="</span>&lt;&lt;dapos.angle*num;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;<span class="string">"show_polar over\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//编写一个将直角坐标转换极坐标的函数。参数接受rect ,返回polar</span></span><br><span class="line"><span class="comment">//数学知识用到头文件 cmath（毕达哥拉斯定力）</span></span><br><span class="line"><span class="function">polar <span class="title">rect_to_polar</span><span class="params">(rect xy)</span></span>&#123;</span><br><span class="line">    polor result;</span><br><span class="line">    result.distance=<span class="built_in">sqrt</span>(xy.x*xy.x+xy.y*xy.y);</span><br><span class="line">    result.angle=<span class="built_in">atan2</span>(xy.y,xy.x);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//main</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">    rect rp;</span><br><span class="line">    polar pp;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"输入x和y的值:"</span>;</span><br><span class="line">    <span class="comment">//cin控制循环，如果输入不符合内容退出</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; rp.x &gt;&gt; rp.y)&#123;</span><br><span class="line">        pp = rect_to_polar(rp);</span><br><span class="line">        show_show_polar(pp);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"下一组数据(q 退出)"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"over.\n"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="传递结构地址"><a href="#传递结构地址" class="headerlink" title="传递结构地址"></a>传递结构地址</h4><p>假设要传递结构的地址而不是整个结构以节省时间和空间，则需要重新编写前面的函数，使用指向结构的指针。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rect_to_polar</span><span class="params">(<span class="keyword">const</span> rect * pxy, polar* pda)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_polar</span><span class="params">(<span class="keyword">const</span> polar *pda)</span></span>;</span><br><span class="line"><span class="comment">//重写调用时将指针传入，形参也修改指针，需要使用-&gt;间接成员</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_polar</span><span class="params">(<span class="keyword">const</span> polar *pda)</span></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">    <span class="keyword">const</span> num=<span class="number">57.29577951</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"distance="</span>&lt;&lt;pda-&gt;distance;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"angle="</span>&lt;&lt;pda-&gt;angle*num;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;<span class="string">"show_polar over\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重写转换 传入指针，也是结构体本身不是副本</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rect_to_polar</span><span class="params">(<span class="keyword">const</span> rect *xy, polar *pa)</span></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">    pa-&gt;distance=<span class="built_in">sqrt</span>(xy-&gt;x*xy-&gt;x+xy-&gt;y*xy-&gt;y);</span><br><span class="line">  </span><br><span class="line">    pa-&gt;angle=<span class="built_in">atan2</span>(xy-&gt;y,xy-&gt;x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重写main</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">    rect rp;</span><br><span class="line">    polar pp;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"输入x和y的值:"</span>;</span><br><span class="line">    <span class="comment">//cin控制循环，如果输入不符合内容退出</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; rp.x &gt;&gt; rp.y)&#123;</span><br><span class="line">        rect_to_polar(&amp;rp, &amp;pp)</span><br><span class="line">        show_show_polar(&amp;pp);</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"下一组数据(q 退出)"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"over.\n"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="函数和string对象"><a href="#函数和string对象" class="headerlink" title="函数和string对象"></a>函数和string对象</h3><p>tring对象与结构的更相似。例如，可以将一个结构赋给另一个结构，也可以将一个对象赋给另一个对象。可以将结构作为完整的实体传递给函数，也可以将对象作为完整的实体进行传递。如果需要多个字符串，可以声明一个string对象数组，而不是二维char数组。</p><p>除函数getline( )外，应像对待内置类型（如int）一样对待string对象。如果需要string数组，只需使用通常的数组声明格式即可：string list[size];数组list的每个元素都是一个string对象，可以像下面这样使用它:getline(cin,list[i])</p><h3 id="函数和array对象"><a href="#函数和array对象" class="headerlink" title="函数和array对象"></a>函数和array对象</h3><p>在C++中，类对象是基于结构的，因此结构编程方面的有些考虑因素也适用于类。例如，可按值将对象传递给函数，在这种情况下，函数处理的是原始对象的副本。另外，也可传递指向对象的指针，这让函数能够操作原始对象。</p><p>用array类，需要包含头文件array，而名称array位于名称空间std中。如果函数来显示expenses的内容，可按值传递expenses:show(xxx);</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> season=<span class="number">4</span>; <span class="comment">//常量</span></span><br><span class="line"><span class="comment">//四季的array 在函数声明之前，都可以使用</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>,season&gt; arr=&#123;<span class="string">"spring"</span>,<span class="string">"summer"</span>,<span class="string">"fall"</span>,<span class="string">"winter"</span>&#125;; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fill</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">double</span>,season&gt; *pa)</span></span>; <span class="comment">//声明</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span> <span class="params">(<span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">double</span>,season&gt; da)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">double</span>,season&gt; expenses;</span><br><span class="line">    fill(&amp;expenses);<span class="comment">//传入指针</span></span><br><span class="line">    show(expenses); <span class="comment">//值传递</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fill</span><span class="params">(<span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">double</span>,season&gt; *pa)</span></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;season;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt;<span class="string">"输入 "</span>&lt;&lt;arr[i]&lt;&lt;<span class="string">" 收入："</span>;</span><br><span class="line">        <span class="comment">//pa是一个arr对象的指针，而(*pa)[i]该对象的一个元素,由于运算符优先级的影响，其中的括号必不可少。</span></span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; （*pa）[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span> <span class="params">(<span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="keyword">double</span>,season&gt; da)</span></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">    <span class="keyword">double</span> total =<span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;season;i++)&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; arr[i]&lt;&lt;<span class="string">":$"</span>&lt;&lt;da[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        total+=da[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"total :$"</span>&lt;&lt;total&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>函数调用自己称为递归。如果递归函数调用自己，则被调用的函数也将调用自己，这将无限循环下去，除非代码中包含终止调用链的内容。通常的方法将递归调用放在if语句中</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span> <span class="params">(arglist)</span></span>&#123;</span><br><span class="line">    statments1;</span><br><span class="line">    <span class="keyword">if</span> (test)</span><br><span class="line">        fun(arglist);</span><br><span class="line">    statments2;</span><br><span class="line">&#125;</span><br><span class="line">test若为<span class="literal">false</span>，调用将终止</span><br></pre></td></tr></table></figure><p>在需要将一项工作不断分为两项较小的、类似的工作时，递归非常有用。</p><h3 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h3><p>与数据项相似，函数也有地址。函数的地址是存储其机器语言代码的内存的开始地址。</p><p><strong>获取函数地址</strong></p><p>只要使用函数名（后面不跟参数）。</p><blockquote><p>fun1（fun）;//使fun1函数能够在其内部调用fun函数</p><p>fun1(fun()); //首先调用fun( )函数，然后将fun( )的返回值传递给fun1( )函数</p></blockquote><p><strong>声明函数指针</strong></p><p>声明指向某种数据类型的指针时，必须指定指针指向的类型。同样，声明指向函数的指针时，也必须指定指针指向的函数类型。</p><blockquote><p>double fun(int) //函数类型</p><p>double(<em>pt)(int);    //指针声明  由于fun是函数，(\</em>pt)也是函数，pt就是指针</p><p>pt=fun; //将相应函数的地址赋给指针</p></blockquote><p>必须在声明中使用(<em>pt)(int)指 pt是一个返回函数的指针。\</em>pt(int) pt()是一个返回指针的函数。注意 函数声明和指针声明的返回值必须相同。</p><p><strong>调用函数</strong></p><blockquote><p>double x= fun(10) //函数调用</p><p>double y = (*pt)(10);// 指针调用</p><p>double y = pt(5) ;//C++也允许像使用函数名那样使用pt</p></blockquote><p>为何pf和（<em>pf）等价呢？一种学派认为，由于pf是函数指针，而</em>pf是函数，因此应将（*pf）( )用作函数调用。另一种学派认为，由于函数名是指向该函数的指针，指向函数的指针的行为应与函数名相似，因此应将pf( )用作函数调用使用。</p><h4 id="函数指针示例："><a href="#函数指针示例：" class="headerlink" title="函数指针示例："></a>函数指针示例：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//函数声明</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">betsy</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">pam</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="comment">//函数指针作为参数的声明</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">estimate</span><span class="params">(<span class="keyword">int</span> lines, <span class="keyword">double</span> (*pt)(<span class="keyword">int</span>))</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">    <span class="keyword">int</span> code;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"how many lines of code do you need:"</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; code;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"here's besty estimate:\n"</span>;</span><br><span class="line">    <span class="comment">//调用函数指针参数</span></span><br><span class="line">    estimate(code, betsy);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"here's pam estimate:\n"</span>;</span><br><span class="line">    estimate(code, pam);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">betsy</span><span class="params">(<span class="keyword">int</span> lns)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0.05</span> * lns;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">pam</span><span class="params">(<span class="keyword">int</span> lns)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0.03</span> * lns + <span class="number">0.0004</span> * lns * lns;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">estimate</span><span class="params">(<span class="keyword">int</span> lines, <span class="keyword">double</span> (*pt)(<span class="keyword">int</span>))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"lines value:"</span> &lt;&lt; lines&lt;&lt;<span class="string">"\n"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (*pt)(lines) &lt;&lt; <span class="string">" hour(s)\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line">-----------------------------------------------------</span><br><span class="line">how many lines of code <span class="keyword">do</span> you need:<span class="number">100</span></span><br><span class="line">here's besty estimate:</span><br><span class="line">lines value:<span class="number">100</span></span><br><span class="line"><span class="number">5</span> hour(s)</span><br><span class="line">here's pam estimate:</span><br><span class="line">lines value:<span class="number">100</span></span><br><span class="line"><span class="number">7</span> hour(s)</span><br></pre></td></tr></table></figure><h4 id="探讨函数指针"><a href="#探讨函数指针" class="headerlink" title="探讨函数指针"></a>探讨函数指针</h4><p>const double * f1 (const double arr[], int n)</p><p>const double * f2 (const double [], int);</p><p>const double <em> f3 (const double </em>, int);</p><p>上面三个函数原型表示的相同，因为可以省略标识符，const double * arr  和 const double[]相同。</p><p>const double <em> (</em>p1) (const double *, int);  指针的声明，指向上面三个函数原型</p><p>auto p2 =f2; //C++11的类型自动推导也可以</p><p>(<em>p1)(av,3)和p2(av,3)都是指向调用函数，返回值是f1或f2的返回值。类型 const double </em> (double值的地址)。如果需要取地址存储的实际值，需要 用*(*p1)(av,3)或*p2(av,3).</p><p>const double <em> (</em>pt[3]) (const double *,int)={f1,f2,f3};</p><p>以上语句是使用函数指针数组存储上面三个函数，pt是一个包含三个元素的数组，而加上<em>表示就是pt是一个包含三个指针的数组， (const double </em>,int)表示每个指针指向的类型函数。const double *是返回值类型。这里不能使用auto，自动类型推断只能用于单值初始化，而不能用于初始化列表(可以 auto pt1 =pt)。</p><p>初始化：const double <em> px = pt [0] (av,3) 或 （</em>pt[1]）(av,3)</p><p>取值： double x = <em> pt[0] (av,3); 或 </em> (*pt[1])(av,3)</p><p><strong>使用typedef简化</strong></p><p>除auto外，C++还提供了其他简化声明的工具：typedef(创建类型别名)</p><h3 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h3><ol><li>使用函数的三个步骤</li></ol><blockquote><p>声明  定义 调用</p></blockquote><ol start="2"><li>编写一个参数(int数组 长度 int值)，并将数组所有的元素设置这int值的函数</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span> <span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> size, <span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;size;i++)&#123;</span><br><span class="line">        arr[i] = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>编写一个参数(数组第一个元素指针，最后一个元素指针，int值)，并把数组值赋给int的函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fun</span><span class="params">(<span class="keyword">int</span> * begin, <span class="keyword">int</span> * end, <span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> *p =begin; p != end;p++)&#123;</span><br><span class="line">        p*=value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>不对类型为基本类型的函数参数使用const</p></li></ol><blockquote><p>const 限定用于指针，房子指向原始的数据被修改，因为c++函数传递的为基本类型是按值传递。使用的副本，保护原始数据</p></blockquote><ol start="5"><li>函数原型 int fun(char * str, char c1,char c2)。c1替换c2</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fun</span> <span class="params">(<span class="keyword">char</span> *str, <span class="keyword">char</span> c1, <span class="keyword">char</span> c2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count =<span class="number">0</span> ; <span class="comment">//返回替换次数</span></span><br><span class="line">    <span class="keyword">while</span>(*str)&#123;<span class="comment">//‘\0’</span></span><br><span class="line">        <span class="keyword">if</span> (*str==c1)&#123;</span><br><span class="line">            *str =c2;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        str++；<span class="comment">//指针++</span></span><br><span class="line">    &#125; </span><br><span class="line">       <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>表达式*”abc”和”def”[2]表达什么</li></ol><blockquote><p>“abc”解释为第一个元素的地址，用*获取值也就是a;”def”为第一个元素地址，“def”[2]我第二个元素的值e.字符串常量的值与数组相同</p></blockquote><ol start="7"><li>结构的按值传递和传递地址利弊</li></ol><blockquote><p>按值传递，只需要传递结构名，这样自动保护原始数据，当时这是比较浪费时间和内存的；传递地址需要使用&amp;结构名，但是不能保护数据，除非对函数使用了const。按值传递可以使用常规的结构成员表示法(.)按指针传递必须使用间接成员运算符（-&gt;）</p></blockquote><ol start="8"><li>函数fun()返回类型为int，参数（const char指针作为参数并返回int值编）写原型</li></ol><blockquote><p>int  fun(int (<em>pt)(const char </em>));</p></blockquote><ol start="9"><li>结构体如下，编写函数</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">applicant</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> name[<span class="number">30</span>];</span><br><span class="line">    <span class="keyword">int</span> credit_ratings[<span class="number">3</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//1. 写一个函数，它将application结构作为参数，并显示该结构的内容，</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span> <span class="params">(applicant ap)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;ap.name &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ap.credit_ratings[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.编写一个函数，它将application结构的地址作为参数，并显示该参数指向的结构的内容（地址）</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span> <span class="params">(<span class="keyword">const</span> applicant * pa)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;pa-&gt;name&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;pa-&gt;credit_ratings[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="10"><li>函数f1()和f2()的原型如下：</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f1</span><span class="params">(applicant * a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span> * <span class="title">f2</span><span class="params">(<span class="keyword">const</span> applicant *a1, <span class="keyword">const</span> applicant *a2,)</span></span>;</span><br><span class="line"><span class="comment">/* 将p1和p2分别声明为指向f1和f2的指针；将ap声明为一个数组，它包含5个类型与p1相同的指针；将pa声明为一个指针，它指向的数组包含10个类型与p2相同的指针。使用typedef来帮助完成这项工作。*/</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*p_f1)</span><span class="params">(applicant *)</span></span>;</span><br><span class="line">p_f1 p1 = f1;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">const</span> <span class="keyword">char</span> *(*p_f2)(<span class="keyword">const</span> applicant *,<span class="keyword">const</span> applicant *);</span><br><span class="line">p_f2 p2 = f2;</span><br><span class="line">p_f1 ap[<span class="number">5</span>];</span><br><span class="line">p_f2 (*pa)[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ol><li>输入最多10个数(可以小10)并存入数组中并回显，在求平均成绩.使用三个函数</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">input</span><span class="params">(<span class="keyword">double</span> num[], <span class="keyword">unsigned</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> tmp;</span><br><span class="line">    <span class="keyword">unsigned</span> numSize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (numSize &lt; size &amp;&amp; <span class="built_in">cin</span> &gt;&gt; tmp &amp;&amp; tmp != <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        num[numSize++] = tmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> numSize;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">double</span> numList[], <span class="keyword">unsigned</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = <span class="number">0</span>; i &lt; size; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; numList[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">aver</span><span class="params">(<span class="keyword">double</span> numList[], <span class="keyword">unsigned</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = <span class="number">0</span>; i &lt; size; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += numList[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (sum / size);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">unsigned</span> k_size = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">double</span> numList[k_size];</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"enter 10 num, -1 over:"</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> inputSize = input(numList, k_size);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"show list:"</span>;</span><br><span class="line">    show(numList, inputSize);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"ave=:"</span> &lt;&lt; aver(numList, inputSize);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>又个box结构体，编写函数按值传递结构，并显示每个成员的值，用函数传递box地址，并将成员volume设置为三维长度乘积。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Tbox</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> szMaker[<span class="number">40</span>];</span><br><span class="line">    <span class="keyword">float</span> height;</span><br><span class="line">    <span class="keyword">float</span> width;</span><br><span class="line">    <span class="keyword">float</span> length;</span><br><span class="line">    <span class="keyword">float</span> volume;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(Tbox box)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; box.szMaker &lt;&lt; <span class="string">'\t'</span> &lt;&lt; box.height &lt;&lt; <span class="string">'\t'</span> &lt;&lt; box.width &lt;&lt; <span class="string">'\t'</span> &lt;&lt; box.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">float</span> <span class="title">calc_volume</span><span class="params">(Tbox *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (p-&gt;volume = p-&gt;height * p-&gt;width * p-&gt;length);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Tbox box = &#123;<span class="string">"boxbig"</span>, <span class="number">12</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    show(box);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; calc_volume(&amp;box);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>双色球中一等奖几率(33选6 16选1)</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">double</span> <span class="title">cal</span><span class="params">(<span class="keyword">unsigned</span> numbers, <span class="keyword">unsigned</span> picks)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">double</span> pro = <span class="number">1.0</span>;</span><br><span class="line">    <span class="keyword">while</span> (picks &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        pro *= <span class="number">1.0</span> * numbers / picks;</span><br><span class="line">        --numbers;</span><br><span class="line">        --picks;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pro;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">double</span> pro = cal(<span class="number">33</span>, <span class="number">6</span>) * cal(<span class="number">16</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; fixed &lt;&lt; pro &lt;&lt; <span class="string">"\\1"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>递归求阶层</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">calc_factorial_less_equ_to_20</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((<span class="number">0</span> == n) ? <span class="number">1</span> : n * calc_factorial_less_equ_to_20(n - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"输入一个不超过20的非负整数："</span>;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> n;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">cin</span> || n &gt; <span class="number">20</span>)</span><br><span class="line">        &#123; <span class="comment">// 采用递归实现的阶乘算法最多只能计算20以内的阶乘，否则将导致溢出</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; n &lt;&lt; <span class="string">"的阶乘为："</span> &lt;&lt; calc_factorial_less_equ_to_20(n) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>编写程序，使用函数Fill_array( )将一个double数组的名称和长度作为参数，用户输入double值，如果输入非法，或溢出停止，返回输入多少，Show_array( )将数组名称和长度作为参数，显示该数组，Reverse-array( )将数组的名称和长度作为参数，并将存储在数组中的值的顺序反转。反转数组中除第一个和最后一个元素之外的所有元素。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Max = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> *<span class="title">fill_array</span><span class="params">(<span class="keyword">double</span> *pBeg, <span class="keyword">const</span> <span class="keyword">double</span> *pEnd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">    <span class="keyword">double</span> temp;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (pBeg &lt; pEnd)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter value #"</span> &lt;&lt; i++ &lt;&lt; <span class="string">": "</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">cin</span>)</span><br><span class="line">        <span class="comment">// bad input</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>.clear();</span><br><span class="line">            <span class="keyword">while</span> (<span class="built_in">cin</span>.get() != <span class="string">'\n'</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Bad input; input process terminated.\n"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (temp &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        *pBeg = temp;</span><br><span class="line">        ++pBeg;</span><br><span class="line">        <span class="comment">// signal to terminate</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> pBeg;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the following function can use, but not alter,</span></span><br><span class="line"><span class="comment">// the array whose address is ar</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_array</span><span class="params">(<span class="keyword">const</span> <span class="keyword">double</span> *pBeg, <span class="keyword">const</span> <span class="keyword">double</span> *pEnd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; pBeg &lt; pEnd; ++pBeg)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Property #"</span> &lt;&lt; (i + <span class="number">1</span>) &lt;&lt; <span class="string">": $"</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *pBeg &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// multiplies each element of ar[] by r</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">revalue</span><span class="params">(<span class="keyword">double</span> r, <span class="keyword">double</span> *pBeg, <span class="keyword">const</span> <span class="keyword">double</span> *pEnd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (pBeg &lt; pEnd)</span><br><span class="line">    &#123;</span><br><span class="line">        *pBeg *= r;</span><br><span class="line">        ++pBeg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">    <span class="keyword">double</span> properties[Max];</span><br><span class="line">    <span class="keyword">double</span> *pArrEnd = fill_array(properties, properties + Max);</span><br><span class="line">    show_array(properties, pArrEnd);</span><br><span class="line">    <span class="keyword">if</span> (pArrEnd - properties &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter revaluation factor: "</span>;</span><br><span class="line">        <span class="keyword">double</span> factor;</span><br><span class="line">        <span class="keyword">while</span> (!(<span class="built_in">cin</span> &gt;&gt; factor))</span><br><span class="line">        <span class="comment">// bad input</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>.clear();</span><br><span class="line">            <span class="keyword">while</span> (<span class="built_in">cin</span>.get() != <span class="string">'\n'</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Bad input; Please enter a number: "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        revalue(factor, properties, pArrEnd);</span><br><span class="line">        show_array(properties, pArrEnd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Done.\n"</span>;</span><br><span class="line">    <span class="built_in">cin</span>.get();</span><br><span class="line">    <span class="built_in">cin</span>.get();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>修改fill_array( )函数不返回实际读取了多少个数字，而是返回一个指针，该指针指向最后被填充的位置；其他的函数可以将该指针作为第二个参数，以标识数据结尾。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Max = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fill_array</span><span class="params">(<span class="keyword">double</span> *pBeg, <span class="keyword">const</span> <span class="keyword">double</span> *pEnd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">    <span class="keyword">double</span> temp;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (pBeg &lt; pEnd)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter value #"</span> &lt;&lt; i++ &lt;&lt; <span class="string">": "</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">cin</span>)</span><br><span class="line">        <span class="comment">// bad input</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>.clear();</span><br><span class="line">            <span class="keyword">while</span> (<span class="built_in">cin</span>.get() != <span class="string">'\n'</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Bad input; input process terminated.\n"</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (temp &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        *pBeg = temp;</span><br><span class="line">        ++pBeg;</span><br><span class="line">        <span class="comment">// signal to terminate</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// the following function can use, but not alter,</span></span><br><span class="line"><span class="comment">// the array whose address is ar</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show_array</span><span class="params">(<span class="keyword">const</span> <span class="keyword">double</span> *pBeg, <span class="keyword">const</span> <span class="keyword">double</span> *pEnd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; pBeg &lt; pEnd; ++pBeg)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Property #"</span> &lt;&lt; (i + <span class="number">1</span>) &lt;&lt; <span class="string">": $"</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *pBeg &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// multiplies each element of ar[] by r</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">revalue</span><span class="params">(<span class="keyword">double</span> r, <span class="keyword">double</span> *pBeg, <span class="keyword">const</span> <span class="keyword">double</span> *pEnd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (pBeg &lt; pEnd)</span><br><span class="line">    &#123;</span><br><span class="line">        *pBeg *= r;</span><br><span class="line">        ++pBeg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">    <span class="keyword">double</span> properties[Max];</span><br><span class="line">    <span class="keyword">int</span> size = fill_array(properties, properties + Max);</span><br><span class="line">    show_array(properties, properties + size);</span><br><span class="line">    <span class="keyword">if</span> (size &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter revaluation factor: "</span>;</span><br><span class="line">        <span class="keyword">double</span> factor;</span><br><span class="line">        <span class="keyword">while</span> (!(<span class="built_in">cin</span> &gt;&gt; factor))</span><br><span class="line">        <span class="comment">// bad input</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>.clear();</span><br><span class="line">            <span class="keyword">while</span> (<span class="built_in">cin</span>.get() != <span class="string">'\n'</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Bad input; Please enter a number: "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        revalue(factor, properties, properties + size);</span><br><span class="line">        show_array(properties, properties + size);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Done.\n"</span>;</span><br><span class="line">    <span class="built_in">cin</span>.get();</span><br><span class="line">    <span class="built_in">cin</span>.get();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>使用const char <em>数组存储表示季度名称的字符串，并使用double数组存储开支。使用const char </em>数组存储表示季度名称的字符串，并使用一个结构，该结构只有一个成员——一个用于存储开支的double数组。这种设计与使用array类的基本设计类似.（写两个版本）</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// constant data</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Seasons = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *Snames[] = &#123;<span class="string">"Spring"</span>, <span class="string">"Summer"</span>, <span class="string">"Fall"</span>, <span class="string">"Winter"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fill</span><span class="params">(<span class="keyword">double</span> *pa)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Seasons; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter "</span> &lt;&lt; Snames[i] &lt;&lt; <span class="string">" expenses: "</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; pa[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">double</span> da[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">    <span class="keyword">double</span> total = <span class="number">0.0</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\nEXPENSES\n"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Seasons; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; Snames[i] &lt;&lt; <span class="string">": $"</span> &lt;&lt; da[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        total += da[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Total Expenses: $"</span> &lt;&lt; total &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> expenses[Seasons];</span><br><span class="line">    fill(expenses);</span><br><span class="line">    show(expenses);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// constant data</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Seasons = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *Snames[] = &#123;<span class="string">"Spring"</span>, <span class="string">"Summer"</span>, <span class="string">"Fall"</span>, <span class="string">"Winter"</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TData</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> arr[Seasons];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fill</span><span class="params">(TData *pData)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Seasons; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter "</span> &lt;&lt; Snames[i] &lt;&lt; <span class="string">" expenses: "</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; pData-&gt;arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(TData data)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">    <span class="keyword">double</span> total = <span class="number">0.0</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\nEXPENSES\n"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Seasons; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; Snames[i] &lt;&lt; <span class="string">": $"</span> &lt;&lt; data.arr[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        total += data.arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Total Expenses: $"</span> &lt;&lt; total &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TData expenses;</span><br><span class="line">    fill(&amp;expenses);</span><br><span class="line">    show(expenses);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li>联系处理数组和结构体函数</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> SLEN = <span class="number">30</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> fullname[SLEN];</span><br><span class="line">    <span class="keyword">char</span> hobby[SLEN];</span><br><span class="line">    <span class="keyword">int</span> ooplevel;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getinfo() has two arguments: a pointer to the first element of</span></span><br><span class="line"><span class="comment">// an array of student structures and an int representing the</span></span><br><span class="line"><span class="comment">// number of elements of the array. The function solicits and</span></span><br><span class="line"><span class="comment">// stores data about students. It terminates input upon filling</span></span><br><span class="line"><span class="comment">// the array or upon encountering a blank line for the student</span></span><br><span class="line"><span class="comment">// name. The function returns the actual number of array elements</span></span><br><span class="line"><span class="comment">// filled.</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getinfo</span><span class="params">(student pa[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num_array_elem = n;</span><br><span class="line">    <span class="keyword">char</span> tmp[SLEN];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"输入姓名："</span>;</span><br><span class="line">        <span class="built_in">cin</span>.getline(tmp, SLEN);</span><br><span class="line">        <span class="keyword">bool</span> blank_line = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">unsigned</span> j = <span class="number">0</span>; j &lt; <span class="built_in">strlen</span>(tmp); ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">isspace</span>(tmp[j]))</span><br><span class="line">            &#123;</span><br><span class="line">                blank_line = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (blank_line)</span><br><span class="line">        &#123;</span><br><span class="line">            num_array_elem = i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">strcpy</span>(pa[i].fullname, tmp);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"输入兴趣："</span>;</span><br><span class="line">        <span class="built_in">cin</span>.getline(pa[i].hobby, SLEN);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"输入面向对象程序设计能力的级别："</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; pa[i].ooplevel;</span><br><span class="line">        <span class="built_in">cin</span>.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (num_array_elem);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// display1() takes a student structure as an argument</span></span><br><span class="line"><span class="comment">// and displays its contents</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display1</span><span class="params">(student st)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; st.fullname &lt;&lt; <span class="string">'\t'</span> &lt;&lt; st.hobby &lt;&lt; <span class="string">'\t'</span> &lt;&lt; st.ooplevel &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// display2() takes the address of student structure as an</span></span><br><span class="line"><span class="comment">// argument and displays the structure’s contents</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display2</span><span class="params">(<span class="keyword">const</span> student *ps)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ps-&gt;fullname &lt;&lt; <span class="string">'\t'</span> &lt;&lt; ps-&gt;hobby &lt;&lt; <span class="string">'\t'</span> &lt;&lt; ps-&gt;ooplevel &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// display3() takes the address of the first element of an array</span></span><br><span class="line"><span class="comment">// of student structures and the number of array elements as</span></span><br><span class="line"><span class="comment">// arguments and displays the contents of the structures</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display3</span><span class="params">(<span class="keyword">const</span> student pa[], <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; pa[i].fullname &lt;&lt; <span class="string">'\t'</span> &lt;&lt; pa[i].hobby &lt;&lt; <span class="string">'\t'</span> &lt;&lt; pa[i].ooplevel &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"输入班级人数："</span>;</span><br><span class="line">    <span class="keyword">int</span> class_size;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; class_size;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span>.get() != <span class="string">'\n'</span>)</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    student *ptr_stu = <span class="keyword">new</span> student[class_size];</span><br><span class="line">    <span class="keyword">int</span> entered = getinfo(ptr_stu, class_size);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; entered; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        display1(ptr_stu[i]);</span><br><span class="line">        display2(&amp;ptr_stu[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    display3(ptr_stu, entered);</span><br><span class="line">    <span class="keyword">delete</span>[] ptr_stu;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"完毕\n"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="9"><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">calculate( )的函数，它接受两个double值和一个指向函数的指针，而被指向的函数接受两个double参数，并返回一个double值。calculate( )函数的类型也是double，并返回被指向的函数使用calculate( )的两个double参数计算得到的值。例如，假设add( )函数的定义如下：</span></span><br><span class="line"><span class="comment">double add (double a,double b)&#123;</span></span><br><span class="line"><span class="comment">return a+b;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">代码中的函数调用将导致calculate( )把2.5和10.4传递给add( )函数，并返回add( )的返回值（12.9）</span></span><br><span class="line"><span class="comment">double q =calculate(2.5, 10.4, add);</span></span><br><span class="line"><span class="comment">调用上述两个函数和至少另一个与add( )类似的函数。该程序使用循环来让用户成对地输入数字。对于每对数字，程序都使用calculate( )来调用add( )和至少一个其他的函数.</span></span><br><span class="line"><span class="comment">提示：指针数组的声明方式。，double (*pf[3])(double,double);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">double</span> <span class="params">(*TPfun)</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">calculate</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y, TPfun fun[], <span class="keyword">unsigned</span> num_of_funs)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = <span class="number">0</span>; i &lt; num_of_funs; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; fun[i](x, y) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span></span><br><span class="line">add(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"加法操作结果："</span>;</span><br><span class="line">    <span class="keyword">return</span> (x + y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span></span><br><span class="line">sub(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"减法操作结果："</span>;</span><br><span class="line">    <span class="keyword">return</span> (x - y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TPfun fun[] = &#123;add, sub&#125;;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"输入两个数："</span>;</span><br><span class="line">        <span class="keyword">double</span> x, y;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">cin</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        calculate(x, y, fun, <span class="keyword">sizeof</span>(fun) / <span class="keyword">sizeof</span>(fun[<span class="number">0</span>]));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第六章：函数&lt;br&gt;
    
    </summary>
    
      <category term="C++" scheme="http://atworking.cn/categories/C/"/>
    
    
      <category term="C++" scheme="http://atworking.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++基础知识02</title>
    <link href="http://atworking.cn/2019/05/21/C-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%8602/"/>
    <id>http://atworking.cn/2019/05/21/C-基础知识02/</id>
    <published>2019-05-21T06:28:17.000Z</published>
    <updated>2019-05-22T06:39:35.398Z</updated>
    
    <content type="html"><![CDATA[<p>第二章：数据结构<br><a id="more"></a></p><h4 id="简单变量"><a href="#简单变量" class="headerlink" title="简单变量"></a>简单变量</h4><h6 id="变量名"><a href="#变量名" class="headerlink" title="变量名"></a>变量名</h6><ol><li>在名称中只能使用字母字符、数字和下划线（_）  </li><li>名称的第一个字符不能是数字</li><li>区分大写字符与小写字符</li><li>不能将C++关键字用作名称</li><li>以两个下划线或下划线和大写字母打头的名称被保留给实现（编译器及其使用的资源）使用。以一个下划线开头的名称被保留给实现，用作全局标识符。</li><li>C++对于名称的长度没有限制，名称中所有的字符都有意义，但有些平台有长度限制  </li></ol><h6 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h6><p>整型就是没有小说部分的数字。<br>char、short、int、long和long long (C++11)每种类型都分有符号版本和无符号版本。<br>检查操作系统中整形的最大长度使用<strong>“sizeof”</strong>函数。<br>climits头文件常用常量列表：</p><table><thead><tr><th>常量</th><th>表示</th><th>常量</th><th>表示</th></tr></thead><tbody><tr><td>CHAR_BIT</td><td>char的位数</td><td>CHAR_MAX</td><td>char的最大值 </td></tr><tr><td>CHAR_MIN</td><td>char的最小值</td><td>SCHAR_MAX</td><td>signed char的最大值</td></tr><tr><td>SCHAR_MIN</td><td>signed char的最小值</td><td>UCHAR_MAX</td><td>unsigned char的最大值</td></tr><tr><td>SHRT_MAX</td><td>short的最大值</td><td>SHRT_MIN</td><td>short的最小值</td></tr><tr><td>USHRT_MAX</td><td>unsigned short的最大值</td><td>INT_MAX</td><td>int的最大值</td></tr><tr><td>INT_MIN</td><td>int的最小值</td><td>UNIT_MAX</td><td>unsigned int的最大值</td></tr><tr><td>LONG_MAX</td><td>long的最大值</td><td>LONG_MIN</td><td>long的最小值</td></tr><tr><td>ULONG_MAX</td><td>unsigned long的最大值</td><td>LLONG_MAX</td><td>long long的最大值</td></tr><tr><td>LLONG_MIN</td><td>long long的最小值</td><td>ULLONG_MAX</td><td>unsigned long long的最大值</td></tr></tbody></table><h6 id="无符号类型"><a href="#无符号类型" class="headerlink" title="无符号类型"></a>无符号类型</h6><p>unsigned short/int…<br>假如short表示的范围为−32768到+32767，则无符号版本的表示范围为0-65535，仅当数值不回为负时才使用无符号类型。<br>如果无符号类型为0时再减1，会变成65535，如果超越了限制就会从另一端取值<br><img src="http://mdimg.atworking.cn/2019-05-21-15-55-07.png" alt="整型溢出"></p><h6 id="char类型"><a href="#char类型" class="headerlink" title="char类型"></a>char类型</h6><p>为存储字母和数值（ASCII码对照表）<br>在默认情况，char不是有符号也不是没符号，一般存储ASCII码</p><h6 id="bool类型"><a href="#bool类型" class="headerlink" title="bool类型"></a>bool类型</h6><p>C++将非零值解释为true，将零解释为false</p><h4 id="const"><a href="#const" class="headerlink" title="const"></a>const</h4><p>C++有一种更好的处理符号常量的方法，这种方法就是使用const关键字来修改变量声明和初始化</p><blockquote><p>const int MOnths =12  </p></blockquote><p>常量被初始化后，其值就被固定了，编译器将不允许再修改该常量的值<br>两个约定：  </p><ol><li>将名称的首字母大写，以提醒是个常量  </li><li>将整个名称大写，使用#define创建常量时通常使用这种约定</li></ol><h4 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h4><p>浮点数能够表示带小数部分的数字。<br>C++也有3种浮点类型：float、double和long double<br>注意：1.0也是浮点数</p><h4 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h4><p>将一种算术类型的值赋给另一种算术类型的变量时，C++将对值进行转换；表达式中包含不同的类型时，C++将对值进行转换；将参数传递给函数时，C++将对值进行转换.<br>讲一个值赋给取值范围更大的类型不回有什么问题(float-&gt;double int-&gt;long)。将0赋给bool变量时，将被转换为false；而非零值将被转换为true。</p><p><strong>潜在数值转换问题：</strong>  </p><ol><li>double转换为float:精度（有效数位）降低，值可能超出目标类型的取值范围</li><li>浮点类型转换为整型:小数部分丢失，原来的值可能超出目标类型的取值范围</li><li>较大的整型转换为较小的整型:原来的值可能超出目标类型的取值范围，通常只复制右边的字节  </li><li><strong>表达式转换：</strong><br>当同一个表达式中包含两种不同的算术类型时，C++将执行两种自动转换，首先，一些类型在出现时便会自动转换；其次，有些类型在与其他类型同时出现在表达式中时将被转换。<br><strong>自动转换：</strong>在计算表达式时，C++将bool、char、unsigned char、signed char和short值转换为int，这些转换被称为整型提升。<br><strong>传递参数时的转换：</strong>传递参数时的类型转换通常由C++函数原型控制，C++将对char和short类型（signed和unsigned）应用整型提升。另外，为保持与传统C语言中大量代码的兼容性，在将参数传递给取消原型对参数传递控制的函数时，C++将float参数提升为double。<br><strong>强制类型转换：</strong>C++还允许通过强制类型转换机制显式地进行类型转换，强制类型转换不会修改变量本身，而是创建一个新的、指定类型的值，可以在表达式中使用这个值。  <blockquote><p>（typeName）value 或 typeName(value)</p></blockquote></li></ol><p>第一种来自C，第二种时C++<br>C++还引入了4个强制类型转换运算符,static_cast&lt;&gt;可用于将值从一种数值类型转换为另一种数值类型,运算符static_cast&lt;&gt;比传统强制类型转换更严格</p><blockquote><p>static_cast<typename>（value）</typename></p></blockquote><h4 id="C-11的auto声明"><a href="#C-11的auto声明" class="headerlink" title="C++11的auto声明"></a>C++11的auto声明</h4><p>C++11新增了一个工具，让编译器能够根据初始值的类型推断变量的类型。为此，它重新定义了auto的含义。auto是一个C语言关键字，但很少使用，在初始化声明中，如果使用关键字auto，而不指定变量的类型，编译器将把变量的类型设置成与初始值相同</p><blockquote><p>auto n = 100 //int<br>auto x = 1.5 //double</p></blockquote><h4 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h4><p><strong>C++数据类型多样化意义：</strong></p><blockquote><p>可以根据需求选择最合适的数据类型。</p></blockquote><p><strong>声明和初始化</strong></p><blockquote><p>short num1=80<br>unsigned int num2 =999 //无符号<br>unsigned long num3 =300000000 //注意不能使用int</p></blockquote><p><strong>C++放溢出</strong></p><blockquote><p>C++没有提供放置超过整形限制的功能，但是可以使用头文件“climits”来获取限制范围，选择合适的类型。</p></blockquote><p><strong>寻找编码的字符</strong></p><blockquote><p>char c = 65；cout&lt;&lt;c&lt;&lt;endl; //A<br>cout.put(char(65));//A<br>cout&lt;&lt;char(65)&lt;&lt;endl;<br>cout&lt;&lt;(char)65&lt;&lt;endl;</p></blockquote><p><strong>强制类型转换(x1,x2位double)</strong></p><blockquote><p>int(x1+x2) //先将x1+x2计算，在转换整数<br>int(x1)+int(x2) //先将x1,x2转换为整数，再相加。</p></blockquote><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>1.设置一个常量作，用户输入身高，转换为英尺<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> k_factorFeetToInch = <span class="number">12</span>; <span class="comment">// 1英尺 = 12英寸</span></span><br><span class="line">    <span class="keyword">int</span> inches;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"输入身高，__英寸："</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; inches;</span><br><span class="line">    <span class="comment">//整除 取余</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"也就"</span> &lt;&lt; inches / k_factorFeetToInch &lt;&lt; <span class="string">"英尺又"</span> &lt;&lt; inches % k_factorFeetToInch &lt;&lt; <span class="string">"英寸"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.用户(英尺 英寸)方式输入身高，用已磅为单位输入体重，计算体重指数。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> height, weight, bmi;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输入身高以英尺和英寸为单位</span></span><br><span class="line">    <span class="keyword">int</span> feet, inches;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"输入身高，__英尺又__英寸："</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; feet &gt;&gt; inches;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得以英寸为单位的身高</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> k_factorFeetToInches = <span class="number">12</span>; <span class="comment">// 1英尺 = 12英寸</span></span><br><span class="line">    height = feet * k_factorFeetToInches + inches;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得以米为单位的身高</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">double</span> k_factorInchesToMeters = <span class="number">0.0254</span>; <span class="comment">// 1英寸 = 0.0254米</span></span><br><span class="line">    height = height * k_factorInchesToMeters;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输入体重以磅为单位</span></span><br><span class="line">    <span class="keyword">int</span> pounds;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"输入以磅为单位的体重："</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; pounds;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得以千克为单位的体重</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">double</span> k_factorPoundsToKilograms = <span class="number">1</span> / <span class="number">2.2</span>; <span class="comment">// 1磅 = 1/2.2千克</span></span><br><span class="line">    weight = pounds * k_factorPoundsToKilograms;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算BMI</span></span><br><span class="line">    bmi = weight / (height * height);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示BMI</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"BMI："</span> &lt;&lt; bmi &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.用户输入秒没然后已天、小时、分钟、秒显示此时间段，<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">long</span> k_factorMinuteToSecond = <span class="number">60</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">long</span> k_factorHourToMinute = <span class="number">60</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">long</span> k_factorDayToHour = <span class="number">24</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter the number of seconds: "</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> secondsTotal;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; secondsTotal;</span><br><span class="line">    <span class="keyword">long</span> seconds = secondsTotal % k_factorMinuteToSecond;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> minutesTotal = secondsTotal / k_factorMinuteToSecond;</span><br><span class="line">    <span class="keyword">long</span> minutes = minutesTotal % k_factorHourToMinute;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> hoursTotal = minutesTotal / k_factorHourToMinute;</span><br><span class="line">    <span class="keyword">long</span> hours = hoursTotal % k_factorDayToHour;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> days = hoursTotal / k_factorDayToHour;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; secondsTotal &lt;&lt; <span class="string">" seconds = "</span> &lt;&lt; days &lt;&lt; <span class="string">" days, "</span> &lt;&lt; hours &lt;&lt; <span class="string">" hours, "</span> &lt;&lt; minutes &lt;&lt; <span class="string">" minutes, "</span> &lt;&lt; seconds &lt;&lt; <span class="string">" seconds"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第二章：数据结构&lt;br&gt;
    
    </summary>
    
      <category term="C++" scheme="http://atworking.cn/categories/C/"/>
    
    
      <category term="C++" scheme="http://atworking.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++基础知识04</title>
    <link href="http://atworking.cn/2019/05/21/C-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%8604/"/>
    <id>http://atworking.cn/2019/05/21/C-基础知识04/</id>
    <published>2019-05-21T06:28:17.000Z</published>
    <updated>2019-05-23T02:03:40.664Z</updated>
    
    <content type="html"><![CDATA[<p>第四章：循环和关系表达式<br><a id="more"></a></p><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><ul><li>设置初始值</li><li>执行测试，看看循环是否应当继续进行</li><li>执行循环操作</li><li>更新用于测试的值</li></ul><p>C++循环设计中包括了这些要素，很容易识别。初始化、测试和更新操作构成了控制部分，这些操作由括号括起。其中每部分都是一个表达式，彼此由分号隔开。控制部分后面的语句叫作循环体，只要测试表达式为true，它便被执行</p><blockquote><p>for(initialization;test-expression;update-expression){body}</p></blockquote><p>initialization:初始化的值，只执行一次，用其变量计算循环周期<br>test-expression：测试表达式，决定循环体是否被执行。<br>update-expression：更新表达式，在每轮循环结束时执行，此时循环体已经执行完毕<br><img src="http://mdimg.atworking.cn/2019-05-22-14-59-07.png" alt="for循环"><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**计算阶乘**/</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> SIZE = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> factorials[SIZE]; <span class="comment">//定义一个数组</span></span><br><span class="line">    factorials[<span class="number">1</span>]=factorials[<span class="number">0</span>]=<span class="number">1L</span>L; <span class="comment">//</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; SIZE; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        factorials[i]=i*factorials[i<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SIZE; i++)&#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;i&lt;&lt;<span class="string">"! = "</span>&lt;&lt;factorials[i]&lt;&lt;<span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------------------</span><br><span class="line"><span class="number">0</span>! = <span class="number">1</span></span><br><span class="line"><span class="number">1</span>! = <span class="number">1</span></span><br><span class="line"><span class="number">2</span>! = <span class="number">2</span></span><br><span class="line"><span class="number">3</span>! = <span class="number">6</span></span><br><span class="line"><span class="number">4</span>! = <span class="number">24</span></span><br><span class="line"><span class="number">5</span>! = <span class="number">120</span></span><br><span class="line"><span class="number">6</span>! = <span class="number">720</span></span><br><span class="line"><span class="number">7</span>! = <span class="number">5040</span></span><br><span class="line"><span class="number">8</span>! = <span class="number">40320</span></span><br><span class="line"><span class="number">9</span>! = <span class="number">362880</span></span><br></pre></td></tr></table></figure></p><p><strong>“++i”与“i++”</strong><br>在一条语句中（即两个分号之间)，++i 被当成(i+1)来计算，i++被当成i来计算<br>对于for循环来说，前++和后++对结果是没有影响，但是执行效率上会不同<br>前++：将值+1,然后返回结果。<br>后++：首先复制一个副本，将其+1，然后将赋值的副本返回(效率略差)。<br><strong>指针的递增/减</strong>  </p><ul><li>*++pt:先将++应用于pt（因为++位于<em>的右边），然后将</em>应用于被递增后的pt  </li><li>++*pt：先取得pt指向的值，然后将这个值加1  </li><li>(*pt)++:圆括号指出，首先对指针解除引用，得到值，然后，运算符++将值+1，pt指向不变  </li><li>*pt++:后缀运算符++的优先级更高，这意味着将运算符用于pt，而不是*pt,因此对指针递增。然而后缀运算符意味着将对原来的地址（&amp;arr[2]）而不是递增后的新地址解除引用，因此*pt++的值为原地址，但该语句执行完毕后，pt的值将为+1的地址。<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> arr[<span class="number">5</span>]=&#123;<span class="number">11.11</span>,<span class="number">22.22</span>,<span class="number">33.33</span>,<span class="number">44.44</span>,<span class="number">55.55</span>&#125;;</span><br><span class="line"><span class="keyword">double</span> *pt =arr;<span class="comment">//11.11</span></span><br><span class="line">++pt; <span class="comment">//22.22</span></span><br><span class="line">*++pt;<span class="comment">//arr[2],33.33</span></span><br><span class="line">++*pt;<span class="comment">//arr[2],34.33</span></span><br><span class="line">(*pt)++;<span class="comment">//arr[2],35.33</span></span><br><span class="line">*pt++;<span class="comment">//35.33</span></span><br><span class="line">*pt;<span class="comment">//44.44</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><p>while循环是没有初始化和更新部分的for循环，它只有测试条件和循环体 `</p><blockquote><p>while(test-condition){body}</p></blockquote><p>程序计算圆括号内的测试条件（test-condition）表达式。如果该表达式为true，则执行循环体中的语句。<br>循环获取字符串<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> SIZE = <span class="number">20</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">    <span class="keyword">char</span> name[SIZE];</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"输入一个字符串ASCII:"</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; name;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (name[i] != <span class="string">'\0'</span>) <span class="comment">//while (name[i])</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; name[i] &lt;&lt; <span class="string">": "</span> &lt;&lt; <span class="keyword">int</span>(name[i]) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------</span><br><span class="line">输入一个字符串ASCII:ABCDEF</span><br><span class="line">A: <span class="number">65</span></span><br><span class="line">B: <span class="number">66</span></span><br><span class="line">C: <span class="number">67</span></span><br><span class="line">D: <span class="number">68</span></span><br><span class="line">E: <span class="number">69</span></span><br><span class="line">F: <span class="number">70</span></span><br></pre></td></tr></table></figure></p><p>可以这样修改while行：while (name[i])<br>经过这种修改后，程序的工作方式将不变。这是由于name[i]是常规字符，其值为该字符的编码—非零值或true<br><img src="http://mdimg.atworking.cn/2019-05-22-15-50-15.png" alt="while循环"></p><p><strong>延时循环</strong><br>while循环可用于写延时循环，C++库中有一个函数有助于完成这样的工作。这个函数名为clock( )，返回程序开始执行后所用的系统时间。这有两个复杂的问题：首先，clock( )返回时间的单位不一定是秒；其次，该函数的返回类型在某些系统上可能是long，在另一些系统上可能是unsigned long或其他类型。但头文件ctime（较早的实现中为time.h）提供了这些问题的解决方案。首先，它定义了一个符号常量—CLOCKS_PER_SEC，该常量等于每秒钟包含的系统时间单位数。因此，将系统时间除以这个值，可以得到秒数。或者将秒数乘以CLOCK_PER_SEC，可以得到以系统时间单位为单位的时间。其次，ctime将clock_t作为clock( )返回类型的别名（参见本章后面的注释“类型别名”），这意味着可以将变量声明为clock_t类型，编译器将把它转换为long、unsigned int或适合系统的其他类型<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"输入系统休息时间，秒为单位："</span>;</span><br><span class="line">    <span class="keyword">float</span> secs;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; secs;</span><br><span class="line">    <span class="keyword">clock_t</span> delay = secs * CLOCKS_PER_SEC;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"staring\a\n"</span>;</span><br><span class="line">    <span class="keyword">clock_t</span> start = clock();</span><br><span class="line">    <span class="keyword">while</span> (clock() - start &lt; delay)</span><br><span class="line">        ;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"over!!! \a\n"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do while循环"></a>do while循环</h4><p>这种循环将首先执行循环体，然后再判定测试表达式，决定是否应继续执行循环。如果条件为false，则循环终止；否则，进入新一轮的执行和测试。这样的循环通常至少执行一次，因为其程序流必须经过循环体后才能到达测试条件</p><blockquote><p>do{body} while(test-expression)</p></blockquote><p><img src="http://mdimg.atworking.cn/2019-05-22-16-03-44.png" alt="do while循环"></p><h4 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h4><p>C++11新增了一种循环：基于范围（range-based）的for循环。这简化了一种常见的循环任务：对数组（或容器类，如vector和array）的每个元素执行相同的操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">double price[5]=&#123;1.1,2.2,3.3,4.4,5.5&#125;;</span><br><span class="line">for (double x : price)&#123;</span><br><span class="line">cout&lt;&lt; x &lt;&lt;std::endl; //遍历</span><br><span class="line">&#125;</span><br><span class="line">-------------------------------------</span><br><span class="line">//修改元素值.符号&amp;表明x是一个引用变量</span><br><span class="line">for (double &amp;x : price)&#123;</span><br><span class="line">X=x*0.8</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="循环文本输入"><a href="#循环文本输入" class="headerlink" title="循环文本输入"></a>循环文本输入</h4><p><strong>使用cin输入</strong><br>要使用循环来读取来自键盘的文本输入，需要选择某个特殊字符—有时被称为哨兵字符，将其作为停止标记</p><blockquote><p>while(ch != ‘#’) //停止字符为“#”</p></blockquote><p><strong>cin.get(char)输入</strong><br>通常，逐个字符读取输入的程序需要检查每个字符，包括空格、制表符和换行符，成员函数cin.get(ch)读取输入中的下一个字符（即使它是空格），并将其赋给变量ch<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此程序不完美：一个值放在ch变量中，这意味着将修改该变量的值。</span></span><br><span class="line"><span class="comment">//在C语言中，要修改变量的值，必须将变量的地址传递给函数</span></span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="built_in">cin</span>.get(ch);<span class="comment">//获取第一个输入的字符</span></span><br><span class="line"><span class="keyword">while</span>(ch!=<span class="string">'#'</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ch;</span><br><span class="line"><span class="built_in">cin</span>.get(ch);<span class="comment">//使用cin.get</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>文件尾的条件</strong><br>文件尾（EOF）。C++输入工具和操作系统协同工作，来检测文件尾并将这种信息告知程序，检测到EOF后，cin将两位（eofbit和failbit）都设置为1。可以通过成员函数eof( )来查看eofbit是否被设置；如果检测到EOF，则cin.eof( )将返回bool值true，否则返回false。同样，如果eofbit或failbit被设置为1，则fail( )成员函数返回true，否则返回false。注意，eof( )和fail( )方法报告最近读取的结果；也就是说，它们在事后报告，而不是预先报告。因此应将cin.eof( )或cin.fail( )测试放在读取后，程序清单5.18中的设计体现了这一点。它使用的是fail( )，而不是eof( )，因为前者可用于更多的实现中。<br>whindows “Ctrl+Z和Enter”<br>mac “Ctrl+D”</p><blockquote><p>while(cin.fail()==false) //检测EOF</p></blockquote><p>cin.clear( )方法可能清除EOF标记，使输入继续进行</p><p><strong>cin.get(ch)和cin.get()区别</strong><br>传递输入字符的方式：<br>cin.get(ch)-&gt;赋给参数ch<br>cin.get()-&gt;将函数返回值赋给ch</p><p>用于字符输入时函数的返回值<br>cin.get(ch)-&gt;istream对象（执行bool转换后为true）<br>cin.get()-&gt;int类型的字符编码  </p><p>到达EOF时函数的返回值<br>cin.get(ch)-&gt;istream对象（执行bool转换后为false）<br>cin.get()-&gt;EOF  </p><h4 id="二维数组和嵌套循环"><a href="#二维数组和嵌套循环" class="headerlink" title="二维数组和嵌套循环"></a>二维数组和嵌套循环</h4><p>初始化：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> arrTwo[<span class="number">2</span>][<span class="number">3</span>]=&#123; <span class="comment">//两行三列</span></span><br><span class="line">｛<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>｝，</span><br><span class="line">｛<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>｝</span><br><span class="line">&#125;；</span><br></pre></td></tr></table></figure></p><p>使用二维数组：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> X = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Y = <span class="number">3</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">/* //char数组的数组</span></span><br><span class="line"><span class="comment">char city[X][25]=&#123;</span></span><br><span class="line"><span class="comment">"BJ", "HN", "GZ", "TJ"</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//指针数组初始化为一组字符串常量</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *city[X] = &#123;<span class="string">"BJ"</span>, <span class="string">"HN"</span>, <span class="string">"GZ"</span>, <span class="string">"TJ"</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> temp[Y][X] = &#123;</span><br><span class="line">        &#123;<span class="number">96</span>, <span class="number">97</span>, <span class="number">98</span>,<span class="number">99</span>&#125;,</span><br><span class="line">        &#123;<span class="number">88</span>, <span class="number">89</span>, <span class="number">87</span>,<span class="number">88</span>&#125;,</span><br><span class="line">        &#123;<span class="number">71</span>, <span class="number">72</span>, <span class="number">73</span>,<span class="number">70</span>&#125;&#125;;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"-------------------------------\n"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; X; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; city[i] &lt;&lt; <span class="string">":\t"</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; Y; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; temp[j][i] &lt;&lt; <span class="string">"\t"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">---------------------------</span><br><span class="line">BJ:     <span class="number">96</span>      <span class="number">88</span>      <span class="number">71</span></span><br><span class="line">HN:     <span class="number">97</span>      <span class="number">89</span>      <span class="number">72</span></span><br><span class="line">GZ:     <span class="number">98</span>      <span class="number">87</span>      <span class="number">73</span></span><br><span class="line">TJ:     <span class="number">99</span>      <span class="number">88</span>      <span class="number">70</span></span><br></pre></td></tr></table></figure></p><p>程序使用了一个嵌套循环。这一次，循环的顺序相反，将列循环放在外面，将行循环放在内面,它还采用了C++常用的做法，将一个指针数组初始化为一组字符串常量,也就是说，将city声明为一个char指针数组。这使得每个元素（如city [0]）都是一个char指针，可被初始化为一个字符串的地址。如果希望字符串是可修改的，则应省略限定符const</p><h4 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h4><p><strong>入口循环和出口循环</strong></p><blockquote><p>for和while属于入口循环，先判断条件。do while是出口循环，至少执行一次循环体。</p></blockquote><p><strong>int j=5; while(++j &lt;9){ cout&lt;&lt;j++&lt;&lt;endl;}打印什么</strong></p><blockquote><p>6 8</p></blockquote><p><strong>打印1、2、4、8、16、32、64的for循环，每轮循环都将计数变量的值乘以2。</strong></p><blockquote><p>for(int num=1; num&lt;=64; num*=2)</p></blockquote><p><strong>int x =(1,024)是否有效</strong></p><blockquote><p>有效，表示1和024，用逗号连接，值为右侧表达式的值。24，八进制20</p></blockquote><p><strong>int y =1,024是否有效</strong></p><blockquote><p>有效,y=1</p></blockquote><p><strong>在查看输入方面，cin &gt;&gt;ch同cin.get(ch)和ch=cin.get( )有什么不同</strong></p><blockquote><p>cin&gt;&gt;ch将跳过空格、换行符和制表符，其他读取这些符号</p></blockquote><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>1.用户输入两个整数，该程序计算这两个整数之间的整数和<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> nLowerBound, nUpperBound;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"输入区间："</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; nLowerBound &gt;&gt; nUpperBound;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> nSum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = nLowerBound; i &lt;= nUpperBound; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        nSum += i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"["</span> &lt;&lt; nLowerBound &lt;&lt; <span class="string">", "</span> &lt;&lt; nUpperBound &lt;&lt; <span class="string">"]区间总和为"</span> &lt;&lt; nSum;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">--------------------------------</span><br><span class="line">输入区间：<span class="number">2</span> <span class="number">9</span></span><br><span class="line">[<span class="number">2</span>, <span class="number">9</span>]区间总和为<span class="number">44</span></span><br></pre></td></tr></table></figure></p><p>2.使用array对象（而不是数组）和long double（而不是long long）编写计算100!的值<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">array</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">unsigned</span> k_uSize = <span class="number">101</span>;</span><br><span class="line">    <span class="built_in">array</span>&lt;<span class="keyword">long</span> <span class="keyword">double</span>, k_uSize&gt; factorials;</span><br><span class="line">    factorials[<span class="number">1</span>] = factorials[<span class="number">0</span>] = <span class="number">1.0L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = <span class="number">2</span>; i &lt; k_uSize; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        factorials[i] = i * factorials[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = <span class="number">0</span>; i &lt; k_uSize; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="string">"! = "</span> &lt;&lt; factorials[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.编写一个要求用户输入数字的程序。每次输入后，程序都将报告到目前为止，所有输入的累计和。当用户输入0时，程序结束<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">int</span> k_nEndFlag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> nSum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> nTmp;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"输入数字："</span>;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; nTmp;</span><br><span class="line">        nSum += nTmp;</span><br><span class="line">    &#125; <span class="keyword">while</span> (k_nEndFlag != nTmp);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"总和为："</span> &lt;&lt; nSum;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">--------------------</span><br><span class="line">输入数字：<span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">0</span></span><br><span class="line">总和为：<span class="number">3</span></span><br></pre></td></tr></table></figure></p><p>4.Daphne以10%的单利投资了100美元。也就是说，每一年的利润都是投资额的10%，即每年10美元：(利息 = 0.10×原始存款)而Cleo以5%的复利投资了100美元。也就是说，利息是当前存款（包括获得的利息）的5%，：<br>(利息 = 0.05×当前存款)Cleo在第一年投资100美元的盈利是5%—得到了105美元。下一年的盈利是105美元的5%—即5.25美元，依此类推。请编写一个程序，计算多少年后，Cleo的投资价值才能超过Daphne的投资价值，并显示此时两个人的投资价值。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">double</span> k_dSimpleInterest = <span class="number">0.1</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">double</span> k_dCompoundInterest = <span class="number">0.05</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">double</span> k_dDaphneBase = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">double</span> k_dCleoBase = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> uYears = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">double</span> dDaphneTotal = k_dDaphneBase, dCleoTotal = k_dCleoBase;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        dDaphneTotal += k_dDaphneBase * k_dSimpleInterest;</span><br><span class="line">        dCleoTotal += dCleoTotal * k_dCompoundInterest;</span><br><span class="line"></span><br><span class="line">        ++uYears;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; uYears &lt;&lt; <span class="string">": "</span> &lt;&lt; dDaphneTotal &lt;&lt; <span class="string">"\t"</span> &lt;&lt; dCleoTotal &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125; <span class="keyword">while</span> (dDaphneTotal &gt;= dCleoTotal);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; uYears &lt;&lt; <span class="string">"年后，"</span></span><br><span class="line">         &lt;&lt; <span class="string">"Cleo的财富将超过Daphne，前者将达到$"</span> &lt;&lt; dCleoTotal &lt;&lt; <span class="string">"、后者$"</span> &lt;&lt; dDaphneTotal &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>5.销售一本书，输入全年中每个月的销售量（图书数量，而不是销售额）。程序通过循环，使用初始化为月份字符串的char *数组（或string对象数组）逐月进行提示，并将输入的数据储存在一个int数组中。然后，程序计算数组中各元素的总数，并报告这一年的销售情况。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> lstMonthlySales[<span class="number">12</span>];</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">string</span> k_months[] = &#123;<span class="string">"1月"</span>, <span class="string">"2月"</span>, <span class="string">"3月"</span>, <span class="string">"4月"</span>, <span class="string">"5月"</span>, <span class="string">"6月"</span>, <span class="string">"7月"</span>, <span class="string">"8月"</span>, <span class="string">"9月"</span>, <span class="string">"10月"</span>, <span class="string">"11月"</span>, <span class="string">"12月"</span>&#125;;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"输入每月销售量。"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; k_months[i] &lt;&lt; <span class="string">"："</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; lstMonthlySales[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> uSum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        uSum += lstMonthlySales[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"全年销售总量"</span> &lt;&lt; uSum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>6.使用一个二维数组来存储输入—3年中每个月的销售量。程序将报告每年销售量以及三年的总销售量<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> lstMonthlySales[<span class="number">3</span>][<span class="number">12</span>];</span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">string</span> k_months[] = &#123;<span class="string">"1月"</span>, <span class="string">"2月"</span>, <span class="string">"3月"</span>, <span class="string">"4月"</span>, <span class="string">"5月"</span>, <span class="string">"6月"</span>, <span class="string">"7月"</span>, <span class="string">"8月"</span>, <span class="string">"9月"</span>, <span class="string">"10月"</span>, <span class="string">"11月"</span>, <span class="string">"12月"</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"输入第"</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">"年每月销售量。"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">12</span>; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; k_months[j] &lt;&lt; <span class="string">"："</span>;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; lstMonthlySales[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">unsigned</span> uSum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">12</span>; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            uSum += lstMonthlySales[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"第"</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">"年销售总量"</span> &lt;&lt; uSum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>7.设计一个名为car的结构，用它存储下述有关汽车的信息：生产商（存储在字符数组或string对象中的字符串）、生产年份（整数）。编写一个程序，向用户询问有多少辆汽车。随后，程序使用new来创建一个由相应数量的car结构组成的动态数组。接下来，程序提示用户输入每辆车的生产商（可能由多个单词组成）和年份信息。请注意，这需要特别小心，因为它将交替读取数值和字符串<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TCar</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">string</span> strMaker;</span><br><span class="line">    <span class="keyword">unsigned</span> uBulitYear;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"How many cars do you wish to catalog? "</span>;</span><br><span class="line"><span class="comment">//unsigned int</span></span><br><span class="line">    <span class="keyword">unsigned</span> uCatalogNum;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; uCatalogNum;</span><br><span class="line">    <span class="built_in">cin</span>.get();</span><br><span class="line"><span class="comment">// 指针类型 new一个内存空间</span></span><br><span class="line">    TCar *pCarsLst = <span class="keyword">new</span> TCar[uCatalogNum];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = <span class="number">0</span>; i &lt; uCatalogNum; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Car #"</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">": "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Please enter the make: "</span>;</span><br><span class="line">        getline(<span class="built_in">cin</span>, pCarsLst[i].strMaker); <span class="comment">//不包含换行符</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Please enter the year made: "</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; pCarsLst[i].uBulitYear;</span><br><span class="line">        <span class="built_in">cin</span>.get(); <span class="comment">//获取换行符</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Here is your collection: "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = <span class="number">0</span>; i &lt; uCatalogNum; ++i)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="comment">//数组本身就是指针，默认指向第一个元素</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; pCarsLst[i].uBulitYear &lt;&lt; <span class="string">" "</span> &lt;&lt; pCarsLst[i].strMaker &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//清空指针指向并指向空的位置</span></span><br><span class="line">    <span class="keyword">delete</span>[] pCarsLst;</span><br><span class="line">    pCarsLst = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>8.编写一个程序，它使用一个char数组和循环来每次读取一个单词，直到用户输入done为止。随后，该程序指出用户输入了多少个单词（不包括done在内）<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter words (to stop, type the word done): "</span>;</span><br><span class="line"><span class="comment">//只读 不能做修改</span></span><br><span class="line">    <span class="comment">//const char *:char类型指针变量</span></span><br><span class="line">    <span class="comment">//const k_szDone: 常量变量</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *<span class="keyword">const</span> k_szDone = <span class="string">"done"</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">unsigned</span> k_uSize = <span class="number">64</span>;</span><br><span class="line">    <span class="keyword">int</span> cntWord = <span class="number">-1</span>; <span class="comment">//计数器.</span></span><br><span class="line"><span class="comment">// 字符串</span></span><br><span class="line">    <span class="keyword">char</span> word[k_uSize];</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        ++cntWord;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; word;</span><br><span class="line">    &#125; <span class="keyword">while</span> (<span class="built_in">strcmp</span>(k_szDone, word)); <span class="comment">//比较两字符串是否相等</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"You entered a total of "</span> &lt;&lt; cntWord &lt;&lt; <span class="string">" words."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">---------------------</span><br><span class="line">Enter words (to stop, type the word done): hello hh hgx done han</span><br><span class="line">You entered a total of <span class="number">3</span> words.</span><br></pre></td></tr></table></figure></p><p>9.重写上面程序，使用string和关系运算符<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter words (to stop, type the word done): "</span>;</span><br><span class="line"><span class="comment">//常量字符串(char数组)</span></span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">string</span> k_strDone = <span class="string">"done"</span>;</span><br><span class="line">    <span class="keyword">int</span> cntWord = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">string</span> strWord;</span><br><span class="line">    <span class="keyword">do</span></span><br><span class="line">    &#123;</span><br><span class="line">        ++cntWord;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; strWord;</span><br><span class="line">    &#125; <span class="keyword">while</span> (k_strDone != strWord);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"You entered a total of "</span> &lt;&lt; cntWord &lt;&lt; <span class="string">" words."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>10.编写一个使用嵌套循环的程序，要求用户输入一个值，指出要显示多少行。然后，程序将显示相应行数的星号，其中第一行包括一个星号，第二行包括两个星号，依此类推。没哟星星用句号填充<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> k_ch1 = <span class="string">'.'</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> k_ch2 = <span class="string">'*'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter number of rows: "</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> uRows;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; uRows;</span><br><span class="line"><span class="comment">// 分配内存 输入大小的平方(输出的是正方形)</span></span><br><span class="line">    <span class="keyword">char</span> *pCharLst = <span class="keyword">new</span> <span class="keyword">char</span>[uRows * uRows];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = <span class="number">0</span>; i &lt; uRows; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">unsigned</span> j = <span class="number">0</span>; j &lt; uRows - i - <span class="number">1</span>; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            pCharLst[i * uRows + j] = k_ch1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">unsigned</span> j = uRows - i - <span class="number">1</span>; j &lt; uRows; ++j)</span><br><span class="line">        &#123;</span><br><span class="line">            pCharLst[i * uRows + j] = k_ch2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = <span class="number">0</span>; i &lt; uRows * uRows; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; pCharLst[i];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="number">0</span> == (i + <span class="number">1</span>) % uRows)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span>[] pCharLst;</span><br><span class="line">    pCharLst = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">----------------------------------</span><br><span class="line">.....*</span><br><span class="line">....**</span><br><span class="line">...***</span><br><span class="line">..****</span><br><span class="line">.*****</span><br><span class="line">******</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第四章：循环和关系表达式&lt;br&gt;
    
    </summary>
    
      <category term="C++" scheme="http://atworking.cn/categories/C/"/>
    
    
      <category term="C++" scheme="http://atworking.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++基础知识03</title>
    <link href="http://atworking.cn/2019/05/21/C-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%8603/"/>
    <id>http://atworking.cn/2019/05/21/C-基础知识03/</id>
    <published>2019-05-21T06:28:17.000Z</published>
    <updated>2019-05-22T06:49:25.879Z</updated>
    
    <content type="html"><![CDATA[<p>第三章：复合类型<br><a id="more"></a></p><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p>数组（array）是一种数据格式，能够存储多个同类型的值<br>数组声明和索引</p><p>声明数组：  </p><ol><li>存储在每个元素中的值的类型；  </li><li>数组名；  </li><li>数组中的元素数。  <blockquote><p>typeName arrayName[arraySize]</p></blockquote></li></ol><p>数组元素下标从0开始，arrName[0]第一个元素.<br><img src="http://mdimg.atworking.cn/2019-05-22-09-34-48.png" alt="数组与索引"></p><p><strong>数组初始化</strong></p><blockquote><p>typeName arrayName[arraySize]={xx,xx,xx}<br>arrayName[index] = xxx //赋值<br>arrName[] = {xx,xxx} //长度为2</p></blockquote><p>只有在定义数组时才能使用初始化，此后就不能使用了，也不能将一个数组赋给另一个数组。<br>可以使用下标分别给数组中的元素赋值。<br>提供的值可以少于数组的元素数目,其他元素已0填充。<br>初始化数组时方括号内（[ ]）为空，C++编译器将计算元素个数  </p><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>字符串是存储在内存的连续字节中的一系列字符(char数组)，并以空字符（null character）结尾，空字符被写作\0，其ASCII码为0，用来标记字符串的结尾  </p><p><strong>字符串初始化</strong>  </p><blockquote><p>char str[3]={‘h’,’g’,’x’,’\0’} //字符串<br>char str[3]={‘h’,’g’,’x’,’h’} //非字符串<br>char str[] = “hello” //包括”\0”的字符串</p></blockquote><p>字符数组初始化为字符串(“”包含原始字符和\0)<br><img src="http://mdimg.atworking.cn/2019-05-22-09-49-47.png" alt="字符数组初始化为字符串"></p><p><strong>字符串截取</strong><br>只需要在截取的字符数组的索引赋值“\0”<br><img src="http://mdimg.atworking.cn/2019-05-22-09-54-44.png" alt="字符串截取"></p><p><strong>字符串输入</strong></p><p>cin键盘输入字符串，不能使用空格字符(cin使用空格、制表符、和换行符来确定字符串借宿字符，所以只能接收一个单词，并自动在此单词后添加\0)<br><strong>读取一行</strong><br>在istream中提供了面向行的成员函数“getline()”和“get()”,直到读取换行符。<br>cin.getline()丢弃换行符,参数1：需要存储输入内容的名称，参数2：读取的字符数(10的话只能读取9个字符)</p><blockquote><p>cin.getline(name,size)</p></blockquote><p>cin.get()将换行符保留在输入序列中，  </p><ol><li>第一种是参数和getline类似。  </li><li><p>第二种不带任何参数的get,可以读取下一个字符(包括换行符)因此可以用它来处理换行符，为读取下一行输入做好准备</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cin</span>.get(name,size) <span class="comment">//读取第一行</span></span><br><span class="line"><span class="built_in">cin</span>.get()  <span class="comment">//读取换行</span></span><br><span class="line"><span class="built_in">cin</span>.get(name,size)  <span class="comment">//读取第二行</span></span><br></pre></td></tr></table></figure></li><li><p>第三种有参和无参结合使用.</p><blockquote><p>cin,get(name,size).get()</p></blockquote></li></ol><p><strong>读取空行</strong><br>当getline( )或get( )读取空行时，将设置失效位，接下来的输入将被阻断，可以使用”cin.clear()”恢复<br><strong>使用数字和字符串</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cin</span> &gt;&gt; year;</span><br><span class="line"><span class="keyword">char</span> address[<span class="number">90</span>];</span><br><span class="line"><span class="built_in">cin</span>.getline(address,<span class="number">90</span>)</span><br><span class="line">---------------------------------</span><br><span class="line">当用户输入year时回车直接运行程序，不回让输入address,因为<span class="built_in">cin</span>.getline获取换行符，就默认没有内容，并不包含换行符，结速。</span><br><span class="line">解决办法：</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;year; <span class="comment">//</span></span><br><span class="line"><span class="built_in">cin</span>.get();<span class="comment">//获取换行符</span></span><br><span class="line">或</span><br><span class="line">(<span class="built_in">cin</span>&gt;&gt;year).get()</span><br></pre></td></tr></table></figure></p><h4 id="string类"><a href="#string类" class="headerlink" title="string类"></a>string类</h4><p>C++98标准通过添加string类扩展了C++库，因此现在可以string类型的变量（使用C++的话说是对象）而不是字符数组来存储字符串。<br><strong>注意：使用string类，必须包含头文件string(std空间)</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span></span><br></pre></td></tr></table></figure></p><ul><li>可以使用数组表示法来访问存储在string对象中的字符  </li><li>可以使用cout来显示string对象  </li><li>可以使用cin来将键盘输入存储到string对象中  </li><li>可以使用C-风格字符串来初始化string对象</li></ul><p><strong>声明并初始化</strong></p><blockquote><p>string str1  //声明<br>string str2 = “Hello” //声明并初始化</p></blockquote><p><strong>赋值拼接</strong></p><p>一个string对象赋给另一个string对象,可以使用运算符+将两个string对象合并起来，还可以使用运算符+=将字符串附加到string对象的末尾。<br>使用函数strcpy( )将字符串复制到字符数组中，使用函数strcat( )将字符串附加到字符数组末尾，注意数组大小</p><blockquote><p>strcpy(charr1,charr2) //赋值2到1<br>strcat(charr1,charr2) //追加2到1的末尾</p></blockquote><h4 id="结构初介绍"><a href="#结构初介绍" class="headerlink" title="结构初介绍"></a>结构初介绍</h4><p>结构是用户定义的类型，而结构声明定义了这种类型的数据属性。定义了类型后，便可以创建这种类型的变量。因此创建结构包括两步。首先，定义结构描述—它描述并标记了能够存储在结构中的各种数据类型。然后按描述创建结构变量（结构数据对象）<br><strong>关键字struct</strong><br><img src="http://mdimg.atworking.cn/2019-05-22-10-43-48.png" alt="结构类型"><br>定义过结构后可以创建结构类型变量，在C++中，结构标记的用法与基本类型名相同。这种变化强调的是，结构声明定义了一种新类型。在C++中，省略struct不会出错</p><p><strong>程序中使用结构</strong></p><p>结构的声明一般放在main()函数外面 并用struct修饰，C++不提倡使用外部变量，但是提倡使用外部结构声明。<br>和数组一样，使用由逗号分隔值列表，并将这些值用花括号括起。在该程序中，每个值占一行，但也可以将它们全部放在同一行中。只是应用逗号将它们分开：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span>&#123;</span></span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">stu stu1=&#123;<span class="string">"xiaoming"</span>,<span class="number">18</span>&#125;;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可将每个结构成员看作是相应类型的变量<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">stu stu2;</span><br><span class="line">stu2.name=<span class="string">"xiaohong"</span>;</span><br><span class="line">stu2.age=<span class="number">20</span>;</span><br></pre></td></tr></table></figure></p><p>可以将结构作为参数传递给函数，也可以让函数返回一个结构。另外，还可以使用赋值运算符（=）将结构赋给另一个同类型的结构，这样结构中每个成员都将被设置为另一个结构中相应成员的值，即使成员是数组</p><p><strong>结构数组</strong></p><p>可以创建元素为结构的数组，方法和创建基本类型数组完全相同</p><p>要初始化结构数组，可以结合使用初始化数组的规则（用逗号分隔每个元素的值，并将这些值用花括号括起）和初始化结构的规则（用逗号分隔每个成员的值，并将这些值用花括号括起）。由于数组中的每个元素都是结构，因此可以使用结构初始化的方式来提供它的值。因此，最终结果为一个被括在花括号中、用逗号分隔的值列表，其中每个值本身又是一个被括在花括号中、用逗号分隔的值列表：<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">stu stu1[<span class="number">1</span>]=&#123;</span><br><span class="line">&#123;<span class="string">"xx"</span>,<span class="number">19</span>&#125;,</span><br><span class="line">&#123;<span class="string">"yy"</span>,<span class="number">20</span>&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h4 id="共用体"><a href="#共用体" class="headerlink" title="共用体"></a>共用体</h4><p>共用体（union）是一种数据格式，它能够存储不同的数据类型，但只能同时存储其中的一种类型，共用体的句法与结构相似，但含义不同<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> demo&#123;</span><br><span class="line"><span class="keyword">int</span> int_val;</span><br><span class="line"><span class="keyword">long</span> long_val;</span><br><span class="line"><span class="keyword">double</span> double_val;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>可以使用one4all变量来存储int、long或double，条件是在不同的时间进行（共用体每次只能存储一个值，因此它必须有足够的空间来存储最大的成员，所以，共用体的长度为其最大成员的长度）<br>当数据项使用两种或更多种格式（但不会同时使用）时，可节省空间</p><h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><p>C++的enum工具提供了另一种创建符号常量的方式，这种方式可以代替const。它还允许定义新类型，但必须按严格的限制进行。使用enum的句法与使用结构相似</p><blockquote><p>enum color(red,yellow,green,blue)</p></blockquote><ul><li>让color成为新类型的名称；color被称为枚举</li><li>将red、yellow等作为符号常量(枚举量)，它们对应整数值0～3</li></ul><p>可以用枚举名来声明这种类型的变量： “color band;”<br>对于枚举，只定义了赋值运算符</p><p><strong>设置枚举量</strong></p><p>可以使用赋值运算符来显式地设置枚举量的值,指定的值必须是整数,也可以只显式地定义其中一些枚举量的值</p><blockquote><p>enum color(red=1,green=2,blue) //blue=3</p></blockquote><h4 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h4><p>指针是一个变量，其存储的是值的地址，而不是值本身<br>只需对变量应用地址运算符（&amp;），就可以获得它的位置；例如，如果home是一个变量，则&amp;home是它的地址<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a =<span class="number">10</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;&amp;a&lt;&lt;<span class="built_in">endl</span>;<span class="comment">//取取值</span></span><br></pre></td></tr></table></figure></p><p>处理存储数据的新策略刚好相反，将地址视为指定的量，而将值视为派生量。一种特殊类型的变量—指针用于存储值的地址。因此，指针名表示的是地址。*运算符被称为间接值（indirect velue）或解除引用（dereferencing）运算符，将其应用于指针，可以得到该地址处存储的值（这和乘法使用的符号相同。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num =<span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> *p； <span class="comment">//指针</span></span><br><span class="line">p = &amp;num;<span class="comment">//指针指向num地址</span></span><br></pre></td></tr></table></figure></p><p><strong>声明和初始化指针</strong></p><p>指针声明必须指定指针指向的数据的类型</p><blockquote><p>char* p1,p2;</p></blockquote><p><strong>野指针</strong></p><p>在C++中创建指针时，计算机将分配用来存储地址的内存，但不会分配用来存储指针所指向的数据的内存。为数据提供空间是一个独立的步骤，忽略这一步无疑是自找麻烦<br>一定要在对指针应用解除引用运算符（*）之前，将指针初始化为一个确定的、适当的地址</p><p><strong>指针和数字</strong></p><p>指针不是整型，虽然计算机通常把地址当作整数来处理。从概念上看，指针与整数是截然不同的类型。  </p><p><strong>new</strong></p><p>在C语言中，可以用库函数malloc( )来分配内存；在C++中仍然可以这样做，但C++还有更好的方法—new运算符  </p><p>程序员要告诉new，需要为哪种数据类型分配内存；new将找到一个长度正确的内存块，并返回该内存块的地址。程序员的责任是将该地址赋给一个指针。下面是一个这样的示例</p><blockquote><p>int * p = new int;</p></blockquote><p>new int告诉程序，需要适合存储int的内存。new运算符根据类型来确定需要多少字节的内存。然后，它找到这样的内存，并返回其地址。接下来，将地址赋给pn，pn是被声明为指向int的指针  </p><p>为一个数据对象（可以是结构，也可以是基本类型）获得并指定分配内存的通用格式如下</p><blockquote><p>typeName * pointName= new typeName;</p></blockquote><p>对于指针，需要指出的另一点是，new分配的内存块通常与常规变量声明分配的内存块不同。变量nights和pd的值都存储在被称为栈（stack）的内存区域中，而new从被称为堆（heap）或自由存储区（free store）的内存区域分配内存</p><p><strong>delete释放内存</strong></p><p>当需要内存时，可以使用new来请求，这只是C++内存管理数据包中有魅力的一个方面。另一个方面是delete运算符，它使得在使用完内存后，能够将其归还给内存池，这是通向最有效地使用内存的关键一步。归还或释放（free）的内存可供程序的其他部分使用。使用delete时，后面要加上指向内存块的指针（这些内存块最初是用new分配的），释放内存，但不会删除指针本身，可以使他指向新的内存用，一定要和new成对用，否则会有内存泄漏危险。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">int * p = new int;</span><br><span class="line">...</span><br><span class="line">delete ps；</span><br></pre></td></tr></table></figure></p><p><strong>new来创建动态数组</strong></p><p>创建动态数组很容易；只要将数组的元素类型和元素数目告诉new即可。必须在类型名后加上方括号，其中包含元素数目</p><blockquote><p>int *p = new int[10];<br>dekete [] p;</p></blockquote><p>它指向包含10个int值的内存块中的第1个元素，假设int占4个字节，则将手指沿正确的方向移动4个字节，手指将指向第2个元素。总共有10个元素，这就是手指的移动范围。因此，new语句提供了识别内存块中每个元素所需的全部信息。<br>使用第一个元素p[0],第二个p[1]…  </p><p><strong>指针和数组</strong></p><p>在多数情况下，C++将数组名视为数组的第一个元素的地址，一种例外情况是，将sizeof运算符用于数组名用时，此时将返回整个数组的长度（单位为字节）。使用new来创建数组以及使用指针来访问不同的元素很简单。只要把指针当作数组名对待即可<br>C++允许将指针和整数相加。加1的结果等于原来的地址值加上指向的对象占用的总字节数。还可以将一个指针减去另一个指针，获得两个指针的差。后一种运算将得到一个整数，仅当两个指针指向同一个数组（也可以指向超出结尾的一个位置）时，这种运算才有意义；这将得到两个元素的间隔。</p><h4 id="数组的替代品vector"><a href="#数组的替代品vector" class="headerlink" title="数组的替代品vector"></a>数组的替代品vector</h4><p>模板类vector类似于string类，也是一种动态数组。您可以在运行阶段设置vector对象的长度，可在末尾附加新数据，还可在中间插入新数据。基本上，它是使用new创建动态数组的替代品。实际上，vector类确实使用new和delete来管理内存，但这种工作是自动完成的</p><blockquote><p>vector<typename> vt(n_elem) //n_elem整型</typename></p></blockquote><p>vector类的功能比数组强大，但付出的代价是效率稍低。如果您需要的是长度固定的数组，使用数组是更佳的选择，但代价是不那么方便和安全。有鉴于此，C++11新增了模板类array，它也位于名称空间std中。与数组一样，array对象的长度也是固定的，也使用栈（静态内存分配），而不是自由存储区，因此其效率与数组相同，但更方便，更安全。要创建array对象，需要包含头文件array。array对象的创建语法与vector稍有不同：</p><blockquote><p>array&lt;typeName,n_elem&gt; arr</p></blockquote><h4 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h4><p><strong>声明一个长度100个short数组</strong></p><blockquote><p>short arr[100];</p></blockquote><p><strong>使用模版array声明上面数组</strong></p><blockquote><p>array&lt;short,100&gt;arr;</p></blockquote><p><strong>取数组第二个元素的值</strong></p><blockquote><p>arr[1];</p></blockquote><p><strong>char数组转为字符串</strong></p><blockquote><p>char str[]=”hello”;</p></blockquote><p><strong>string对象声明和赋值</strong><br>string str=”Hello”;</p><p><strong>结构体声明和初始化</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fish</span>&#123;</span></span><br><span class="line"><span class="keyword">char</span> kind[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> weight;</span><br><span class="line"><span class="keyword">float</span> length;</span><br><span class="line">&#125;;</span><br><span class="line">fish petes=&#123;<span class="string">"trout"</span>,<span class="number">12</span>,<span class="number">22.22</span>&#125;</span><br></pre></td></tr></table></figure></p><p><strong>枚举的声明和指定值</strong></p><blockquote><p>enum response{yes=0,no=1,maybe=2}</p></blockquote><p><strong>ted是double变量，声明一个指向ted的指针，并显示此值</strong></p><blockquote><p>double <em>pd = &amp;ted；<br>cout&lt;&lt; </em>pd &lt;&lt;”\n”;</p></blockquote><p><strong>声明一折指针指向长度10的float数组，并显示第一个和最后一个值</strong></p><blockquote><p>float *pt =arr;<br>cout&lt;&lt;pt[0]&lt;&lt;pt[9]&lt;&lt;”\n”;</p></blockquote><p><strong>输入正整数长度创建一个动态int数组，分别用new和vector对象</strong></p><blockquote><p>包含iostream 和vector头文件<br>unsigned int size;<br>cin &gt;&gt;size;<br>int *p =new int(size);<br>vector<int> dv(size);</int></p></blockquote><p><strong>（int *）”HelloWorld”打印什么</strong></p><blockquote><p>是有效的，打印字符串的地址，转化为int指针。</p></blockquote><p><strong>给上面结构体动态分配内存，在取出该结构体的成员值</strong></p><blockquote><p>fish *p = new fish;<br>cout&lt;&lt;”输入 kind:”;<br>cin &gt;&gt; p-&gt;kind;</p></blockquote><p><strong>声明一个vector对象和一个array对象，分别包含10个string对象，使用const指定要包含的string对象数</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Num&#123;<span class="number">10</span>&#125;; <span class="comment">//const int Num=10</span></span><br><span class="line">...</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; vstr(Num);</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">array</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>,Num&gt;astr;</span><br></pre></td></tr></table></figure></p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>1.get和getline练习<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> strFirstname;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"What is your first name? "</span>;</span><br><span class="line">    getline(<span class="built_in">cin</span>, strFirstname);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> strLastname;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"What is your last name? "</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; strLastname;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> chGrade;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"What letter grade do you deserve? "</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; chGrade;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> unAge;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"What is your age? "</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; unAge;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Name: "</span> &lt;&lt; strLastname &lt;&lt; <span class="string">", "</span> &lt;&lt; strFirstname &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Grade: "</span> &lt;&lt; <span class="keyword">char</span>(chGrade + <span class="number">1</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Age: "</span> &lt;&lt; unAge &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">-----------------------------------</span><br><span class="line">What is your first name? han gx</span><br><span class="line">What is your last name? xx</span><br><span class="line">What letter grade <span class="keyword">do</span> you deserve? n</span><br><span class="line">What is your age? <span class="number">18</span></span><br><span class="line">Name: xx, han gx</span><br><span class="line">Grade: o</span><br><span class="line">Age: <span class="number">18</span></span><br></pre></td></tr></table></figure></p><p>2.要求用户首先输入其名，然后输入其姓；然后程序使用一个逗号和空格将姓和名组合起来，并存储和显示组合结果。请使用string对象和头文件string中的函数。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> strFirstname;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter your first name: "</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; strFirstname;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> strLastname;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter your last name: "</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; strLastname;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> strInfo = strLastname + <span class="string">", "</span> + strFirstname;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Here’s the information in a single string: "</span> &lt;&lt; strInfo;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.结构CandyBar包含3个成员。第一个成员存储了糖块的品牌；第二个成员存储糖块的重量（可以有小数）；第三个成员存储了糖块的卡路里含量（整数）。请编写一个程序，声明这个结构，创建一个名为snack的CandyBar变量，并将其成员分别初始化为“Mocha Munch”、2.3和350。初始化应在声明snack时进行。最后，程序显示snack变量的内容。<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TCandyBar</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">double</span> weight;</span><br><span class="line">    <span class="keyword">double</span> calories;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TCandyBar snack = &#123;<span class="string">"Mocha Munch"</span>, <span class="number">2.3</span>, <span class="number">350</span>&#125;;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; snack.name &lt;&lt; <span class="string">"\n"</span></span><br><span class="line">         &lt;&lt; snack.weight &lt;&lt; <span class="string">"\n"</span></span><br><span class="line">         &lt;&lt; snack.calories &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4.上面结构体包含三个成员，初始化并显示<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TCandyBar</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">double</span> weight;</span><br><span class="line"><span class="keyword">double</span> calories;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">TCandyBar snack[] = &#123;&#123;<span class="string">"Mocha Munch"</span>, <span class="number">2.3</span>, <span class="number">350</span>&#125;,</span><br><span class="line"> &#123;<span class="string">"阿尔卑斯"</span>, <span class="number">6.3</span>, <span class="number">310</span>&#125;,</span><br><span class="line"> &#123;<span class="string">"优の良品"</span>, <span class="number">2.1</span>, <span class="number">291</span>&#125;&#125;;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; snack[<span class="number">0</span>].name &lt;&lt; <span class="string">"\t"</span> &lt;&lt; snack[<span class="number">0</span>].weight &lt;&lt; <span class="string">"\t"</span> &lt;&lt; snack[<span class="number">0</span>].calories &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; snack[<span class="number">1</span>].name &lt;&lt; <span class="string">"\t"</span> &lt;&lt; snack[<span class="number">1</span>].weight &lt;&lt; <span class="string">"\t"</span> &lt;&lt; snack[<span class="number">1</span>].calories &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; snack[<span class="number">2</span>].name &lt;&lt; <span class="string">"\t"</span> &lt;&lt; snack[<span class="number">2</span>].weight &lt;&lt; <span class="string">"\t"</span> &lt;&lt; snack[<span class="number">2</span>].calories &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>5.程序将请求用户输入信息，然后显示这些信息。请使用cin（或它的方法）和cout,使用结构体<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TPizza</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">string</span> company_name;</span><br><span class="line">    <span class="keyword">double</span> diameter;</span><br><span class="line">    <span class="keyword">double</span> weight;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    TPizza pizza;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"输入披萨名："</span>;</span><br><span class="line">    getline(<span class="built_in">cin</span>, pizza.company_name);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"输入披萨直径（厘米）："</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; pizza.diameter;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"输入披萨重量（克）："</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; pizza.weight;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; pizza.company_name &lt;&lt; <span class="string">"公司出品直径为"</span> &lt;&lt; pizza.diameter &lt;&lt; <span class="string">"厘米重量为"</span> &lt;&lt; pizza.weight &lt;&lt; <span class="string">"克的披萨"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>6.使用new来为结构分配内存（上方程序），而不是声明一个结构变量<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span><span class="title">TPizza</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">string</span>company_name;</span><br><span class="line"><span class="keyword">double</span>diameter;</span><br><span class="line"><span class="keyword">double</span>weight;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">void</span>)</span> </span></span><br><span class="line"><span class="function"></span>&#123;     </span><br><span class="line">TPizza*p_pizza = <span class="keyword">new</span> TPizza;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输入披萨直径（厘米）："</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; p_pizza-&gt;diameter;<span class="comment">// cin忽略输入流中的空白符（回车符、空格符、制表符），回车符仍保留在输入流中</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输入披萨名："</span>;</span><br><span class="line"><span class="built_in">cin</span>.get(); <span class="comment">// 提取先前留在输入流中的回车符，否则下面的getline()不会等待输入，而直接读取输入流中已有的回车符</span></span><br><span class="line">getline(<span class="built_in">cin</span>, p_pizza-&gt;company_name);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输入披萨重量（克）："</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; p_pizza-&gt;weight;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p_pizza-&gt;company_name &lt;&lt; <span class="string">"公司出品直径为"</span> &lt;&lt; p_pizza-&gt;diameter &lt;&lt; <span class="string">"厘米重量为"</span> &lt;&lt; p_pizza-&gt;weight &lt;&lt; <span class="string">"克的披萨"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> p_pizza;</span><br><span class="line">p_pizza = <span class="literal">NULL</span>;  <span class="comment">//清空指针并把它指向null</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>7.使用new来动态分配数组，而不是声明一个包含3个元素的CandyBar数组<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TCandyBar</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">double</span> weight;</span><br><span class="line">    <span class="keyword">double</span> calories;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">unsigned</span> k_candybar_num = <span class="number">3</span>;</span><br><span class="line">    TCandyBar *candybar_list = <span class="keyword">new</span> TCandyBar[k_candybar_num];</span><br><span class="line"></span><br><span class="line">    candybar_list[<span class="number">0</span>].name = <span class="string">"Mocha Munch"</span>;</span><br><span class="line">    candybar_list[<span class="number">0</span>].weight = <span class="number">2.3</span>;</span><br><span class="line">    candybar_list[<span class="number">0</span>].calories = <span class="number">350</span>;</span><br><span class="line"></span><br><span class="line">    candybar_list[<span class="number">1</span>].name = <span class="string">"阿尔卑斯"</span>;</span><br><span class="line">    candybar_list[<span class="number">1</span>].weight = <span class="number">6.3</span>;</span><br><span class="line">    candybar_list[<span class="number">1</span>].calories = <span class="number">310</span>;</span><br><span class="line"></span><br><span class="line">    candybar_list[<span class="number">2</span>].name = <span class="string">"优の良品"</span>;</span><br><span class="line">    candybar_list[<span class="number">2</span>].weight = <span class="number">2.1</span>;</span><br><span class="line">    candybar_list[<span class="number">2</span>].calories = <span class="number">291</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; candybar_list[<span class="number">0</span>].name &lt;&lt; <span class="string">"\t"</span> &lt;&lt; candybar_list[<span class="number">0</span>].weight &lt;&lt; <span class="string">"\t"</span> &lt;&lt; candybar_list[<span class="number">0</span>].calories &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; candybar_list[<span class="number">1</span>].name &lt;&lt; <span class="string">"\t"</span> &lt;&lt; candybar_list[<span class="number">1</span>].weight &lt;&lt; <span class="string">"\t"</span> &lt;&lt; candybar_list[<span class="number">1</span>].calories &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; candybar_list[<span class="number">2</span>].name &lt;&lt; <span class="string">"\t"</span> &lt;&lt; candybar_list[<span class="number">2</span>].weight &lt;&lt; <span class="string">"\t"</span> &lt;&lt; candybar_list[<span class="number">2</span>].calories &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span>[] candybar_list;</span><br><span class="line">    candybar_list = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>8.编写一个程序，让用户输入三次40码跑的成绩，并显示次数和平均成绩。请使用一个array对象来存储数据<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">array</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">unsigned</span> k_times = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">array</span>&lt;<span class="keyword">unsigned</span>, k_times&gt; dash_array;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"输入三次40米短跑成绩："</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; dash_array[<span class="number">0</span>] &gt;&gt; dash_array[<span class="number">1</span>] &gt;&gt; dash_array[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"共计输入"</span> &lt;&lt; k_times &lt;&lt; <span class="string">"笔短跑成绩，平均分为"</span> &lt;&lt; (dash_array[<span class="number">0</span>] + dash_array[<span class="number">1</span>] + dash_array[<span class="number">2</span>]) / <span class="number">3</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第三章：复合类型&lt;br&gt;
    
    </summary>
    
      <category term="C++" scheme="http://atworking.cn/categories/C/"/>
    
    
      <category term="C++" scheme="http://atworking.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++基础知识05</title>
    <link href="http://atworking.cn/2019/05/21/C-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%8605/"/>
    <id>http://atworking.cn/2019/05/21/C-基础知识05/</id>
    <published>2019-05-21T06:28:17.000Z</published>
    <updated>2019-05-28T12:23:34.439Z</updated>
    
    <content type="html"><![CDATA[<p>第五章：分支语句和逻辑运算<br><a id="more"></a></p><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><p>if有两种格式：if和if else，如果测试条件为true，则if语句将引导程序执行语句或语句块；如果条件是false，程序将跳过这条语句或语句块</p><blockquote><p>if(测试语句){body}<br>if(测试语句){body}else{body}</p></blockquote><h3 id="逻辑表达式"><a href="#逻辑表达式" class="headerlink" title="逻辑表达式"></a>逻辑表达式</h3><p>C++提供了3种逻辑运算符，分别是逻辑OR（||）、逻辑AND（&amp;&amp;）和逻辑NOT（!）  </p><h4 id="逻辑OR运算符："><a href="#逻辑OR运算符：" class="headerlink" title="逻辑OR运算符：||"></a>逻辑OR运算符：||</h4><p>将两个表达式组合在一起。如果原来表达式中的任何一个或全部都为true（或非零），则得到的表达式的值为true；否则，表达式的值为false ，C++规定，||运算符是个顺序点（sequence point）。也是说，先修改左侧的值，再对右侧的值进行判定（C++11的说法是，运算符左边的子表达式先于右边的子表达式）</p><h4 id="逻辑AND运算符：-amp-amp"><a href="#逻辑AND运算符：-amp-amp" class="headerlink" title="逻辑AND运算符：&amp;&amp;"></a>逻辑AND运算符：&amp;&amp;</h4><p>逻辑AND运算符（&amp;&amp;），也是将两个表达式组合成一个表达式。仅当原来的两个表达式都为true时，得到的表达式的值才为true，&amp;&amp;运算符也是顺序点，因此将首先判定左侧，并且在右侧被判定之前产生所有的副作用。如果左侧为false，则整个逻辑表达式必定为false，在这种情况下，C++将不会再对右侧进行判定</p><h4 id="逻辑NOT运算符："><a href="#逻辑NOT运算符：" class="headerlink" title="逻辑NOT运算符：!"></a>逻辑NOT运算符：!</h4><p>!运算符将它后面的表达式的真值取反。也是说，如果expression为true，则!expression是false；如果expression为false，则!expression是true。更准确地说，如果expression为true或非零，则!expression为false。</p><h4 id="其他表示方式"><a href="#其他表示方式" class="headerlink" title="其他表示方式"></a>其他表示方式</h4><p>标识符and、or和not都是C++保留字，这意味着不能将它们用作变量名等。它们不是关键字，因为它们都是已有语言特性的另一种表示方式。另外，它们并不是C语言中的保留字，但C语言程序可以将它们用作运算符，只要在程序中包含了头文件iso646.h。C++不要求使用头文件.</p><h3 id="字符函数库cctype"><a href="#字符函数库cctype" class="headerlink" title="字符函数库cctype"></a>字符函数库cctype</h3><p>C++从C语言继承了一个与字符相关的、非常方便的函数软件包，它可以简化诸如确定字符是否为大写字母、数字、标点符号等工作，这些函数的原型是在头文件cctype（老式的风格中为ctype.h）中定义的.</p><table><thead><tr><th style="text-align:left">函数名</th><th style="text-align:left">返回值</th></tr></thead><tbody><tr><td style="text-align:left">isalnum()</td><td style="text-align:left">如果参数是字母数字，即字母或数字，该函数返回true</td></tr><tr><td style="text-align:left">isalpha()</td><td style="text-align:left">如果参数是字母，该函数返回true</td></tr><tr><td style="text-align:left">iscntrl()</td><td style="text-align:left">如果参数是控制字符，该函数返回true</td></tr><tr><td style="text-align:left">isdigit()</td><td style="text-align:left">如果参数是数字（0～9），该函数返回true</td></tr><tr><td style="text-align:left">isgraph()</td><td style="text-align:left">如果参数是除空格之外的打印字符，该函数返回true</td></tr><tr><td style="text-align:left">islower()</td><td style="text-align:left">如果参数是小写字母，该函数返回true</td></tr><tr><td style="text-align:left">isprint()</td><td style="text-align:left">如果参数是打印字符（包括空格），该函数返回true</td></tr><tr><td style="text-align:left">ispunct()</td><td style="text-align:left">如果参数是标点符号，该函数返回true</td></tr><tr><td style="text-align:left">isspace()</td><td style="text-align:left">如果参数是标准空白字符，如空格、进纸、换行符、回车、水平制表符或者垂直制表符，该函数返回true</td></tr><tr><td style="text-align:left">isupper()</td><td style="text-align:left">如果参数是大写字母，该函数返回true</td></tr><tr><td style="text-align:left">isxdigit()</td><td style="text-align:left">如果参数是十六进制数字，即0～9、a～f或A～F，该函数返回</td></tr><tr><td style="text-align:left">tolower()</td><td style="text-align:left">如果参数是大写字符，则返回其小写，否则返回该参数</td></tr><tr><td style="text-align:left">toupper()</td><td style="text-align:left">如果参数是小写字符，则返回其大写，否则返回该参数</td></tr></tbody></table><h3 id="运算符”-”"><a href="#运算符”-”" class="headerlink" title="运算符”?:”"></a>运算符”?:”</h3><p>C++有一个常被用来代替if else语句的运算符，这个运算符被称为条件运算符（?:），它是C++中唯一一个需要3个操作数的运算符</p><blockquote><p>表达式1 ? 表达式2 : 表达式3</p></blockquote><p>如果expression1为true，则整个条件表达式的值为expression2的值；否则，整个表达式的值为expression3的值。</p><h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><p>C++的switch语句就像指路牌，告诉计算机接下来应执行哪行代码。执行到switch语句时，程序将跳到使用integer-expression的值标记的那一行，integer-expression必须是一个结果为整数值的表达式。另外，每个标签都必须是整数常量表达式。最常见的标签是int或char常量，也可以是枚举量。如果integer-expression不与任何标签匹配，则程序将跳到标签为default的那一行。Default标签是可选的，如果被省略，而又没有匹配的标签，则程序将跳到switch后面的语句处执行</p><p>switch语句与Pascal等语言中类似的语句之间存在重大的差别。C++中的case标签只是行标签，而不是选项之间的界线。也是说，程序跳到switch中特定代码行后，将依次执行之后的所有语句，除非有明确的其他指示。程序不会在执行到下一个case处自动停止，要让程序执行完一组特定语句后停止，必须使用break语句。这将导致程序跳到switch后面的语句处执行</p><p><img src="http://mdimg.atworking.cn/img/2019-5-27-12-8-11.png" alt="switch语法"></p><h4 id="将枚举作为标签"><a href="#将枚举作为标签" class="headerlink" title="将枚举作为标签"></a>将枚举作为标签</h4><p>通常，cin无法识别枚举类型（它不知道程序员是如何定义它们的），因此该程序要求用户选择选项时输入一个整数。当switch语句将int值和枚举量标签进行比较时，将枚举量提升为int。另外，在while循环测试条件中，也会将枚举量提升为int类型。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> (red,orange,yellow)</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> code;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; code;</span><br><span class="line"><span class="keyword">while</span> (code &gt;=red &amp;&amp; code &lt;= yellow)&#123;</span><br><span class="line"><span class="keyword">switch</span> (code)&#123;</span><br><span class="line"><span class="keyword">case</span> red; <span class="built_in">cout</span> &lt;&lt; <span class="string">"this is red \n"</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> orange; <span class="built_in">cout</span> &lt;&lt; <span class="string">"this is orange \n"</span>; <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> yellow; <span class="built_in">cout</span> &lt;&lt; <span class="string">"this is yellow \n"</span>; <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"no cloro"</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt;code</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="switch-和-if-else"><a href="#switch-和-if-else" class="headerlink" title="switch 和 if else"></a>switch 和 if else</h4><p>switch语句和if else语句都允许程序从选项中进行选择。相比之下，if else更通用。switch并不是为处理取值范围而设计的。switch语句中的每一个case标签都必须是一个单独的值。另外，这个值必须是整数（包括char），因此switch无法处理浮点测试。另外case标签值还必须是常量。如果选项涉及取值范围、浮点测试或两个变量的比较，则应使用if else语句.如果所有的选项都可以使用整数常量来标识，则可以使用switch语句或if else语句。由于switch语句是专门为这种情况设计的，因此，如果选项超过两个，则就代码长度和执行速度而言，switch语句的效率更高。</p><h3 id="break和continue"><a href="#break和continue" class="headerlink" title="break和continue"></a>break和continue</h3><p>break和continue语句都使程序能够跳过部分代码。可以在switch语句或任何循环中使用break语句，使程序跳到switch或循环后面的语句处执行。continue语句用于循环中，让程序跳过循环体中余下的代码，并开始新一轮循环.</p><p><img src="http://mdimg.atworking.cn/img/2019-5-27-12-47-12.png" alt="break和continue"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">\<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> AirSize = <span class="number">80</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">using</span> <span class="keyword">namespace</span> *<span class="built_in">std</span>*;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">char</span> line[AirSize];</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">int</span> spaces = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">​    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter a line of text: \n"</span>;</span><br><span class="line"></span><br><span class="line">​    <span class="built_in">cin</span>.get(line, AirSize);</span><br><span class="line"></span><br><span class="line">​    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Complete line:\n"</span></span><br><span class="line"></span><br><span class="line">​         &lt;&lt; line &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; line[i] != <span class="string">'\0'</span>; i++)</span><br><span class="line"></span><br><span class="line">​    &#123;</span><br><span class="line"></span><br><span class="line">​        <span class="built_in">cout</span> &lt;&lt; line[i];</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">if</span> (line[i] == <span class="string">'.'</span>)</span><br><span class="line"></span><br><span class="line">​            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">if</span> (line[i] != <span class="string">' '</span>)</span><br><span class="line"></span><br><span class="line">​            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">​        spaces++;</span><br><span class="line"></span><br><span class="line">​    &#125;</span><br><span class="line"></span><br><span class="line">​    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span></span><br><span class="line"></span><br><span class="line">​         &lt;&lt; spaces &lt;&lt; <span class="string">" spaces\n"</span>;</span><br><span class="line"></span><br><span class="line">​    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Done.\n"</span>;</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">----------------------------------------</span><br><span class="line">Enter a line of text:</span><br><span class="line">Hello world, everyone i love you. <span class="keyword">or</span> you name?</span><br><span class="line">Complete line:</span><br><span class="line">Hello world, everyone i love you. <span class="keyword">or</span> you name?</span><br><span class="line">Hello world, everyone i love you.</span><br><span class="line"><span class="number">5</span> spaces</span><br><span class="line">Done.</span><br></pre></td></tr></table></figure><p>该程序让用户输入一行文本。循环将回显每个字符，如果该字符为句点，则使用break结束循环。这表明，可以在某种条件为true时，使用break来结束循环。接下来，程序计算空格数，但不计算其他字符。当字符不为空格时，循环使用continue语句跳过计数部分。continue语句导致该程序跳过循环体的剩余部分，但不会跳过循环的更新表达式。在for循环中，continue语句使程序直接跳到更新表达式处，然后跳到测试表达式处。然而，对于while循环来说，continue将使程序直接跳到测试表达式处，因此while循环体中位于continue之后的更新表达式都将被跳过。</p><h4 id="goto语句："><a href="#goto语句：" class="headerlink" title="goto语句："></a>goto语句：</h4><p>和C语言一样，C++也有goto语句。下面的语句将跳到使用paris:作为标签的位置：</p><blockquote><p>goto paris;</p></blockquote><p>在大多数情况下（有些人认为，在任何情况下），使用goto语句不好，而应使用结构化控制语句（如if else、switch、continue等）来控制程序的流程</p><h3 id="读取数字的循环"><a href="#读取数字的循环" class="headerlink" title="读取数字的循环"></a>读取数字的循环</h3><p>当程序接受一系列数字时(cin &gt;&gt;n);如果用户输入一个单词，需要对这个输入单词进行处理。程序必须先重置cin，然后才能删除错误输入</p><p>1．重置cin以接受新的输入</p><p>2．删除错误输入。    </p><p>3．提示用户再输入</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAX = <span class="number">5</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">    <span class="keyword">int</span> golf[MAX];</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Plese enter you scores.\n"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"you must enter "</span> &lt;&lt; MAX &lt;&lt; <span class="string">" rounds.\n"</span>;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; MAX; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"round #"</span> &lt;&lt; i + <span class="number">1</span> &lt;&lt; <span class="string">" : "</span>;</span><br><span class="line">        <span class="keyword">while</span> (!(<span class="built_in">cin</span> &gt;&gt; golf[i])) <span class="comment">//当输入字母时 为true进入循环</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cin</span>.clear(); <span class="comment">//reset input</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="built_in">cin</span>.get() != <span class="string">'\n'</span>)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"please enter a num: "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"end!\n"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">-----------------------------------------------</span><br><span class="line">Plese enter you scores.</span><br><span class="line">you must enter <span class="number">5</span> rounds.</span><br><span class="line">round #<span class="number">1</span> : <span class="number">10</span></span><br><span class="line">round #<span class="number">2</span> : aa</span><br><span class="line">please enter a num: <span class="number">11</span></span><br><span class="line">round #<span class="number">3</span> : <span class="number">33</span></span><br></pre></td></tr></table></figure><h3 id="简单的文件输入-出"><a href="#简单的文件输入-出" class="headerlink" title="简单的文件输入\出"></a>简单的文件输入\出</h3><p>C++使得将读取键盘输入和在屏幕上显示输出（统称为控制台输入/输出）的技巧用于文件输入/输出（文件I/O），这里只介绍简单的文本文件I/O。</p><h4 id="文本I-O和文本文件"><a href="#文本I-O和文本文件" class="headerlink" title="文本I/O和文本文件"></a>文本I/O和文本文件</h4><p>使用cin进行输入时，程序将输入视为一系列的字节，其中每个字节都被解释为字符编码。不管目标数据类型是什么，输入一开始都是字符数据——文本数据，cin对象负责将文本转换为其他类型。</p><h4 id="写入到文本文件中"><a href="#写入到文本文件中" class="headerlink" title="写入到文本文件中"></a>写入到文本文件中</h4><ul><li>必须包含头文件fstream。</li><li>头文件fstream定义了一个用于处理输出的ofstream类。</li><li>需要声明一个或多个ofstream变量（对象），并以自己喜欢的方式对其进行命名，条件是遵守常用的命名规则。</li><li>必须指明名称空间std；例如，为引用元素ofstream，必须使用编译指令using或前缀std::。</li><li>需要将ofstream对象与文件关联起来。为此，方法之一是使用open( )方法。</li><li>使用完文件后，应使用方法close( )将其关闭。</li><li>可结合使用ofstream对象和运算符&lt;&lt;来输出各种类型的数据。</li></ul><p>虽然头文件iostream提供了一个预先定义好的名为cout的ostream对象，但您必须声明自己的ofstream对象，为其命名，并将其同文件关联起来。</p><blockquote><p>ofstream outFile;</p><p>ofstream fout;</p><p>outFile.open(“xx.txt”);</p><p>char filename[50];</p><p>cin &gt;&gt;filename;</p><p>fout.open(filename);</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt; //io</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">    <span class="keyword">char</span> automobile[<span class="number">50</span>];</span><br><span class="line">    <span class="keyword">int</span> year;</span><br><span class="line">    <span class="keyword">double</span> a_price;</span><br><span class="line">    <span class="keyword">double</span> b_price;</span><br><span class="line">    ofstream outFile; <span class="comment">//创建文件对象</span></span><br><span class="line">    outFile.open(<span class="string">"info.txt"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter the make and model of automobile: "</span>;</span><br><span class="line">    <span class="built_in">cin</span>.getline(automobile, <span class="number">50</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"enter the model year: "</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; year;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"enter the price: "</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a_price;</span><br><span class="line">    b_price = <span class="number">0.5</span> * a_price;</span><br><span class="line">    <span class="comment">//display infomation on screen with cout</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; fixed;</span><br><span class="line">    <span class="built_in">cout</span>.precision(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">cout</span>.setf(ios_base::showpoint);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"make and model: "</span> &lt;&lt; automobile &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"year: "</span> &lt;&lt; year &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"was asking $"</span> &lt;&lt; a_price &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Now asking $"</span> &lt;&lt; b_price &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//using outFIle</span></span><br><span class="line">    outFile &lt;&lt; fixed;</span><br><span class="line">    outFile.precision(<span class="number">2</span>);</span><br><span class="line">    outFile.setf(ios_base::showpoint);</span><br><span class="line">    outFile &lt;&lt; <span class="string">"make and model: "</span> &lt;&lt; automobile &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    outFile &lt;&lt; <span class="string">"year: "</span> &lt;&lt; year &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    outFile &lt;&lt; <span class="string">"was asking $"</span> &lt;&lt; a_price &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    outFile &lt;&lt; <span class="string">"Now asking $"</span> &lt;&lt; b_price &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    outFile.close();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">----------------------------------------------------</span><br><span class="line">Enter the make <span class="keyword">and</span> model of automobile: hello han</span><br><span class="line">enter the model year: <span class="number">1991</span></span><br><span class="line">enter the price: <span class="number">100</span></span><br><span class="line">make <span class="keyword">and</span> model: hello han</span><br><span class="line">year: <span class="number">1991</span></span><br><span class="line">was asking $<span class="number">100.00</span></span><br><span class="line">Now asking $<span class="number">50.00</span></span><br><span class="line">---------------------------------------------------</span><br><span class="line">info.txt:</span><br><span class="line">make <span class="keyword">and</span> model: hello han</span><br><span class="line">year: <span class="number">1991</span></span><br><span class="line">was asking $<span class="number">100.00</span></span><br><span class="line">Now asking $<span class="number">50.00</span></span><br></pre></td></tr></table></figure><p>ofstream对象后，便可以使用方法open( )将该对象特定文件关联起来,程序使用完该文件后，应该将其关闭,方法close( )不需要使用文件名作为参数，这是因为outFile已经同特定的文件关联起来。如果您忘记关闭文件，程序正常终止时将自动关闭它,outFile可使用cout可使用的任何方法。它不但能够使用运算符&lt;&lt;，还可以使用各种格式化方法，如setf( )和precision( )。这些方法只影响调用它们的对象.</p><p>open()方法：如果路径已经存在文件时，open( )将首先截断该文件，即将其长度截短到零——丢其原有的内容，然后将新的输出加入到该文件中</p><h4 id="读取文本文件"><a href="#读取文本文件" class="headerlink" title="读取文本文件"></a>读取文本文件</h4><ul><li>必须包含头文件fstream。</li><li>头文件fstream定义了一个用于处理输入的ifstream类。</li><li><p>需要声明一个或多个ifstream变量（对象），并以自己喜欢的方式对其进行命名，条件是遵守常用的命名规则</p></li><li><p>必须指明名称空间std；例如，为引用元素ifstream，必须使用编译指令using或前缀std::。</p></li><li><p>需要将ifstream对象与文件关联起来。为此，方法之一是使用open( )方法。</p></li><li><p>使用完文件后，应使用close( )方法将其关闭。</p></li><li><p>可结合使用ifstream对象和运算符&gt;&gt;来读取各种类型的数据。</p></li><li><p>可以使用ifstream对象和get( )方法来读取一个字符，使用ifstream对象和getline( )来读取一行字符。</p></li><li><p>可以结合使用ifstream和eof( )、fail( )等方法来判断输入是否成功。</p></li><li><p>ifstream对象本身被用作测试条件时，如果最后一个读取操作成功，它将被转换为布尔值true，否则被转换为false</p></li></ul><p>虽然头文件iostream提供了一个预先定义好的名为cin的istream对象，但您必须声明自己的ifstream对象，为其命名，并将其同文件关联起来</p><blockquote><p>ifstream inFile;</p><p>ifstream fin;</p><p>inFile.open(“xxx.txt”);</p><p>char filename[50];</p><p>cin &gt;&gt; filename;</p><p>fin.open(filename);</p></blockquote><p>声明一个ifstream对象并将其同文件关联起来后，便可以像使用cin那样使用它。所有可用于cin的操作和方法都可用于ifstream对象,如果试图打开一个不存在的文件用于输入，这种错误将导致后面使用ifstream对象进行输入时失败。检查文件是否被成功打开的首先方法是使用方法is_open( )，</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">inFile.open(<span class="string">"info.txt"</span>);</span><br><span class="line"><span class="keyword">if</span> (!inFile.is_open())&#123;</span><br><span class="line"><span class="built_in">exit</span>(EXIT_FAILURE)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果文件没有被打开，表达式!inFile.isopen( )将为true。函数exit( )的原型是在头文件cstdlib中定义的，在该头文件中，还定义了一个用于同操作系统通信的参数值EXIT_FAILURE。函数exit( )终止程序，s_open( )是C++中相对较新的内容。如果读者的编译器不支持它，可使用较老的方法good( )来代替。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt; //io</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt; //exit()</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> SIZE = <span class="number">60</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">    <span class="keyword">char</span> filename[SIZE];</span><br><span class="line">    ifstream inFile;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"enter filename:"</span>;</span><br><span class="line">    <span class="built_in">cin</span>.getline(filename, SIZE);</span><br><span class="line">    inFile.open(filename);</span><br><span class="line">    <span class="keyword">if</span> (!inFile.is_open())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Could not open file: "</span> &lt;&lt; filename &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> value;</span><br><span class="line">    <span class="keyword">double</span> sum = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    inFile &gt;&gt; value;      <span class="comment">//get first value</span></span><br><span class="line">    <span class="keyword">while</span> (inFile.good()) <span class="comment">//while input good and not at EOF</span></span><br><span class="line">    &#123;</span><br><span class="line">        ++count;</span><br><span class="line">        sum += value;</span><br><span class="line">        inFile &gt;&gt; value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (inFile.eof())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"End of file reached.\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (inFile.fail())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"input terminated by data mismatch.\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"input terminated for unknow reason.\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (count == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"No data processed.\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"iteam read: "</span> &lt;&lt; count &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"sum: "</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Average: "</span> &lt;&lt; sum / count &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    inFile.close();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">-----------------------------------------------------</span><br><span class="line">enter filename:test.txt</span><br><span class="line">End of file reached.</span><br><span class="line">iteam read: <span class="number">11</span></span><br><span class="line">sum: <span class="number">187</span></span><br><span class="line">Average: <span class="number">17</span></span><br><span class="line">-----------------------------------------------------</span><br><span class="line">目录下必须又test.txt:</span><br><span class="line"><span class="number">18</span> <span class="number">19</span> <span class="number">18.5</span> <span class="number">13.5</span> <span class="number">14</span></span><br><span class="line"><span class="number">16</span> <span class="number">19.5</span> <span class="number">20</span> <span class="number">18</span> <span class="number">12</span> <span class="number">18.5</span></span><br><span class="line"><span class="number">17.5</span></span><br></pre></td></tr></table></figure><p>读取文件时，有几点需要检查。首先，程序读取文件时不应超过EOF。如果最后一次读取数据时遇到EOF，方法eof( )将返回true。其次，程序可能遇到类型不匹配的情况,如果最后一次读取操作中发生了类型不匹配的情况，方法fail( )将返回true（如果遇到了EOF，该方法也将返回true）最后，可能出现意外的问题，如文件受损或硬件故障。如果最后一次读取文件时发生了这样的问题，方法bad( )将返回true。不要分别检查这些情况，一种更简单的方法是使用good( )方法，该方法在没有发生任何错误时返回true.<br>infile.eof(),infile.fail()<br>由于eof( )只能判断是否到达EOF，而fail( )可用于检查EOF和类型不匹配，因此上述代码首先判断是否到达EOF。这样，如果执行到了else if测试，便可排除EOF，因此，如果fail( )返回true，便可断定导致循环终止的原因是类型不匹配.<br>方法good( )指出最后一次读取输入的操作是否成功，这一点至关重要。这意味着应该在执行读取输入的操作后，立刻应用这种测试。为此，一种标准方法是，在循环之前（首次执行循环测试前）放置一条输入语句，并在循环的末尾（下次执行循环测试之前）放置另一条输入语句”infile&gt;&gt;value” 可以精简while(infile &gt;&gt;value)</p><h3 id="问答"><a href="#问答" class="headerlink" title="问答"></a>问答</h3><ol><li>if if 和if else有什么区别：</li></ol><blockquote><p>if else 效率更好，if成立 else不在判断，而俩if，都会判断一遍。</p></blockquote><ol start="2"><li>ch为字符，++ch 和ch+1区别</li></ol><blockquote><p>值相同，但是++ch类型蔚char，可以作为字符打印，ch+1值蔚int,只能作为int打印</p></blockquote><ol start="3"><li>创建一个条件表达式，其值为变量的绝对值</li></ol><blockquote><p>(x&lt;0) ? -x:x   / (x&gt;=0)x:-x</p></blockquote><ol start="4"><li>程序输出什么<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">int</span> ct1, ct2;</span><br><span class="line">    ct1 = ct2 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((ch = <span class="built_in">cin</span>.get()) != <span class="string">'$'</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ch;</span><br><span class="line">        ct1++;</span><br><span class="line">        <span class="keyword">if</span> (ch = <span class="string">'$'</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ct2++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ch;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"ct1 = "</span> &lt;&lt; ct1 &lt;&lt; <span class="string">"; ct2 = "</span> &lt;&lt; ct2 &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">--------------------输入内容------------------------</span><br><span class="line">hi!</span><br><span class="line">send $<span class="number">10</span> <span class="keyword">or</span> $<span class="number">20</span> now</span><br><span class="line">-------------------输出结果-------------------------</span><br><span class="line">hi!</span><br><span class="line">h$i$!$</span><br><span class="line">$send $<span class="number">10</span> <span class="keyword">or</span> $<span class="number">20</span> now</span><br><span class="line">s$e$n$d$ $ct1 = <span class="number">9</span>; ct2 = <span class="number">9</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>由于ch=’$’ 而不是ch==’$’’ 因此输出结果会出现上面效果</p></blockquote><ol start="5"><li>重写 不要使用break 和continue<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> line = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span>.get(ch))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">'Q'</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (ch != <span class="string">'\n'</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        line++;</span><br><span class="line">    &#125;</span><br><span class="line">---------------重写如下------------------</span><br><span class="line"><span class="keyword">int</span> line = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>.get(ch)&amp;&amp; ch!=<span class="string">'Q'</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (ch==<span class="string">'\n'</span>)</span><br><span class="line">line++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ol><li>编写一个程序，读取键盘输入，直到遇到@符号为止，并回显输入（数字除外），同时将大写字符转换为小写，将小写字符转换为大写（别忘了cctype函数系列）</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> k_flagEnd = <span class="string">'@'</span>;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; ch &amp;&amp; k_flagEnd != ch)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">isdigit</span>(ch))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">islower</span>(ch))</span><br><span class="line">        &#123;</span><br><span class="line">            ch = (<span class="keyword">char</span>)<span class="built_in">toupper</span>(ch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isupper</span>(ch))</span><br><span class="line">        &#123;</span><br><span class="line">            ch = (<span class="keyword">char</span>)<span class="built_in">tolower</span>(ch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ; <span class="comment">// nop!</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ch;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>编写一个程序，最多将10个donation值读入到一个double数组中。程序遇到非数字输入时将结束输入，并报告这些数字的平均值以及数组中有多少个数字大于平均值。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">unsigned</span> k_size = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">double</span> arrDonation[k_size];</span><br><span class="line">    <span class="keyword">double</span> dSum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> cntDonation = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (cntDonation &lt; k_size &amp;&amp; <span class="built_in">cin</span> &gt;&gt; arrDonation[cntDonation])</span><br><span class="line">    &#123;</span><br><span class="line">        dSum += arrDonation[cntDonation++];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> dAverage = dSum / cntDonation;</span><br><span class="line">    <span class="keyword">unsigned</span> cntLargerAverage = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = <span class="number">0</span>; i &lt; k_size; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (arrDonation[i] &gt; dAverage)</span><br><span class="line">        &#123;</span><br><span class="line">            ++cntLargerAverage;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"平均值为"</span> &lt;&lt; dAverage &lt;&lt; <span class="string">"，超过平均值的有"</span> &lt;&lt; cntLargerAverage &lt;&lt; <span class="string">"个。"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>使用switch编写一个菜单</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Please enter one of the following choices: "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"c) carnivore\t"</span></span><br><span class="line">         &lt;&lt; <span class="string">"p) pianist"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"t) tree\t\t"</span></span><br><span class="line">         &lt;&lt; <span class="string">"g) game"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; ch)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (ch)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'c'</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"A dog is a carnivore. "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'p'</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Lang Lang is a pianist. "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'t'</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"A maple is a tree."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'g'</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Red alert is a game. "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Please enter a c, p, t, or g: "</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>编写一个程序，使用真实姓名、头衔、秘密姓名或成员偏好来列出成员，该程序创建一个由结构组成的小型数组，并将其初始化为适当的值。另外，该程序使用一个循环，让用户在下面的选项中进行选择</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">unsigned</span> gk_size = <span class="number">64</span>;</span><br><span class="line"><span class="keyword">enum</span> TPreference</span><br><span class="line">&#123;</span><br><span class="line">    FULLNAME,</span><br><span class="line">    TITLE,</span><br><span class="line">    BOPNAME</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TBop</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> szFullname[gk_size]; <span class="comment">// real name</span></span><br><span class="line">    <span class="keyword">char</span> szTitle[gk_size];    <span class="comment">// job title</span></span><br><span class="line">    <span class="keyword">char</span> szBopname[gk_size];  <span class="comment">// secret BOP name</span></span><br><span class="line">    TPreference preference;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">    TBop lstBops[] = &#123;&#123;<span class="string">"Yang Yang"</span>, <span class="string">"chinamobile"</span>, <span class="string">"yangyang.gnu"</span>, TITLE&#125;,</span><br><span class="line">                      &#123;<span class="string">"xiao wang"</span>, <span class="string">"microsoft"</span>, <span class="string">"xiaowang"</span>, BOPNAME&#125;,</span><br><span class="line">                      &#123;<span class="string">"xiao liu"</span>, <span class="string">"IBM"</span>, <span class="string">"xiaoliu"</span>, FULLNAME&#125;,</span><br><span class="line">                      &#123;<span class="string">"xiao zhang"</span>, <span class="string">"Huawei"</span>, <span class="string">"xiaozhang"</span>, TITLE&#125;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> bDisplay = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span> (bDisplay)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Benevolent Order of Programmers Report"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"a. display by name"</span></span><br><span class="line">             &lt;&lt; <span class="string">"\t"</span></span><br><span class="line">             &lt;&lt; <span class="string">"b. display by title"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"c. display by bopname"</span></span><br><span class="line">             &lt;&lt; <span class="string">"\t"</span></span><br><span class="line">             &lt;&lt; <span class="string">"d. display by preference"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"q. quit"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> chAction;</span><br><span class="line">        <span class="keyword">if</span> (!(<span class="built_in">cin</span> &gt;&gt; chAction))</span><br><span class="line">        &#123;</span><br><span class="line">            bDisplay = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (chAction)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'a'</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;e : lstBops)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; e.szFullname &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'b'</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;e : lstBops)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; e.szTitle &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'c'</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;e : lstBops)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; e.szBopname &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'d'</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;e : lstBops)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (FULLNAME == e.preference)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; e.szFullname &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (TITLE == e.preference)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; e.szTitle &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (BOPNAME == e.preference)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">cout</span> &lt;&lt; e.szBopname &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    ;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'q'</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Bye! "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            bDisplay = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Error! "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>计算税收，5000下不收 5001-1500:10%；15001-35000：15%；35000+：20%,当用户输入负数或非数字时，循环结束</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// |-----|----------|--------------------|-----...</span></span><br><span class="line">    <span class="comment">//   0% (5K)  10% (1.5W)      15%      (3.5W)  20%</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> tvarp;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; tvarp &amp;&amp; tvarp &gt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> arrFourSection[<span class="number">4</span>] = &#123;<span class="number">5000</span>, <span class="number">10000</span>, <span class="number">20000</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (tvarp &lt;= <span class="number">5000</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            arrFourSection[<span class="number">0</span>] = tvarp;</span><br><span class="line">            arrFourSection[<span class="number">1</span>] = arrFourSection[<span class="number">2</span>] = arrFourSection[<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((tvarp -= <span class="number">5000</span>) &lt;= <span class="number">10000</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            arrFourSection[<span class="number">1</span>] = tvarp;</span><br><span class="line">            arrFourSection[<span class="number">2</span>] = arrFourSection[<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((tvarp -= <span class="number">10000</span>) &lt;= <span class="number">20000</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            arrFourSection[<span class="number">2</span>] = tvarp;</span><br><span class="line">            arrFourSection[<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            arrFourSection[<span class="number">3</span>] = tvarp - <span class="number">20000</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"税收明细如下："</span></span><br><span class="line">             &lt;&lt; arrFourSection[<span class="number">0</span>] &lt;&lt; <span class="string">" * 0% + "</span> &lt;&lt; arrFourSection[<span class="number">1</span>] &lt;&lt; <span class="string">" * 10% + "</span></span><br><span class="line">             &lt;&lt; arrFourSection[<span class="number">2</span>] &lt;&lt; <span class="string">" * 15% + "</span> &lt;&lt; arrFourSection[<span class="number">3</span>] &lt;&lt; <span class="string">" * 20% "</span></span><br><span class="line">             &lt;&lt; <span class="string">" = "</span> &lt;&lt; arrFourSection[<span class="number">0</span>] * <span class="number">0</span> + arrFourSection[<span class="number">1</span>] * <span class="number">0.1</span> + arrFourSection[<span class="number">2</span>] * <span class="number">0.15</span> + arrFourSection[<span class="number">3</span>] * <span class="number">0.2</span></span><br><span class="line">             &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>用户输入捐献者数目，然后要求用户输入每一个捐献者的姓名和款项。这些信息被储存在一个动态分配的结构数组中。每个结构有两个成员：用来储存姓名的字符数组（或string对象）和用来存储款项的double成员。读取所有的数据后，程序将显示所有捐款超过10000的捐款者的姓名及其捐款数额。该列表前应包含一个标题，指出下面的捐款者是重要捐款人（Grand Patrons）。然后，程序将列出其他的捐款者，该列表要以Patrons开头。如果某种类别没有捐款者，则程序将打印单词“none”。该程序只显示这两种类别，而不进行排序。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TDonor</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">double</span> amount;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"输入捐赠人数："</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> num_donor;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; num_donor;</span><br><span class="line">    TDonor *<span class="keyword">const</span> p_donor = <span class="keyword">new</span> TDonor[num_donor];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = <span class="number">0</span>; i &lt; num_donor; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"输入捐赠人姓名："</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; p_donor[i].name;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"输入捐赠金额："</span>;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; p_donor[i].amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"荣誉捐赠者："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = <span class="number">0</span>; i &lt; num_donor; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p_donor[i].amount &gt;= <span class="number">10000</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; p_donor[i].name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"普通捐赠者："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = <span class="number">0</span>; i &lt; num_donor; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p_donor[i].amount &lt; <span class="number">10000</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; p_donor[i].name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span>[] p_donor;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>编写一个程序，它每次读取一个单词，直到用户只输入q。然后，该程序指出有多少个单词以元音打头，有多少个单词以辅音打头，还有多少个单词不属于这两类。为此，方法之一是，使用isalpha( )来区分以字母和其他字符打头的单词，然后对于通过了isalpha( )测试的单词，使用if或switch语句来确定哪些以元音打头</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> cntVowels = <span class="number">0</span>, cntConsonants = <span class="number">0</span>, cntOthers = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"输入单词，字母q结束："</span>;</span><br><span class="line">    <span class="built_in">string</span> word;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; word &amp;&amp; <span class="string">"q"</span> != word)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> &amp;first_char = word[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">isalpha</span>(first_char))</span><br><span class="line">        &#123;</span><br><span class="line">            ++cntOthers;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">'a'</span> == first_char || <span class="string">'A'</span> == first_char ||</span><br><span class="line">                 <span class="string">'e'</span> == first_char || <span class="string">'E'</span> == first_char ||</span><br><span class="line">                 <span class="string">'i'</span> == first_char || <span class="string">'I'</span> == first_char ||</span><br><span class="line">                 <span class="string">'o'</span> == first_char || <span class="string">'O'</span> == first_char ||</span><br><span class="line">                 <span class="string">'u'</span> == first_char || <span class="string">'U'</span> == first_char)</span><br><span class="line">        &#123;</span><br><span class="line">            ++cntVowels;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            ++cntConsonants;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"元音开头的单词"</span> &lt;&lt; cntVowels &lt;&lt; <span class="string">"个、辅音单词"</span> &lt;&lt; cntConsonants &lt;&lt; <span class="string">"个、其他"</span> &lt;&lt; cntOthers &lt;&lt; <span class="string">"个"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="8"><li>编写一个程序，它打开一个文件文件，逐个字符地读取该文件，直到到达文件末尾，然后指出该文件中包含多少个字符。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> SIZE = <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//-----打开测试文件U6p8test.txt-</span></span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">    <span class="keyword">char</span> filename[SIZE];</span><br><span class="line">    ifstream inFile;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter name of data file: "</span>;</span><br><span class="line">    <span class="built_in">cin</span>.getline(filename, SIZE);</span><br><span class="line">    inFile.open(filename);</span><br><span class="line">    <span class="keyword">if</span> (!inFile.is_open())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Could not open the file "</span> &lt;&lt; filename &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Program terminating.\n"</span>;</span><br><span class="line">        <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//开始读取数据</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> value;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    inFile &gt;&gt; value;</span><br><span class="line">    <span class="keyword">while</span> (inFile.good())</span><br><span class="line">    &#123;</span><br><span class="line">        ++count;</span><br><span class="line">        inFile &gt;&gt; value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//文件读取末尾</span></span><br><span class="line">    <span class="keyword">if</span> (inFile.eof())</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"End of file reached.\n"</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (inFile.fail())</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Input terminated by data mismatch.\n"</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Input terminated for unknown reason.\n"</span>;</span><br><span class="line">    <span class="keyword">if</span> (count == <span class="number">0</span>)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"No data processed.\n"</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"chars: "</span> &lt;&lt; count &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    inFile.close();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="9"><li>完成编程练习6，但从文件中读取所需的信息。该文件的第一项应为捐款人数，余下的内容应为成对的行。在每一对中，第一行为捐款人姓名，第二行为捐款数额</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TDonor</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">double</span> amount;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">ifstream <span class="title">ifs</span><span class="params">(<span class="string">"contributor_(for_linux).txt"</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsigned</span> num_donor;</span><br><span class="line">    ifs &gt;&gt; num_donor;</span><br><span class="line">    TDonor *<span class="keyword">const</span> p_donor = <span class="keyword">new</span> TDonor[num_donor];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = <span class="number">0</span>; i &lt; num_donor; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        ifs.get();</span><br><span class="line">        getline(ifs, p_donor[i].name);</span><br><span class="line">        ifs &gt;&gt; p_donor[i].amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"荣誉捐赠者："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = <span class="number">0</span>; i &lt; num_donor; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p_donor[i].amount &gt;= <span class="number">10000</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; p_donor[i].name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"普通捐赠者："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">unsigned</span> i = <span class="number">0</span>; i &lt; num_donor; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (p_donor[i].amount &lt; <span class="number">10000</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; p_donor[i].name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span>[] p_donor;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第五章：分支语句和逻辑运算&lt;br&gt;
    
    </summary>
    
      <category term="C++" scheme="http://atworking.cn/categories/C/"/>
    
    
      <category term="C++" scheme="http://atworking.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C++基础知识01</title>
    <link href="http://atworking.cn/2019/05/21/C-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%8601/"/>
    <id>http://atworking.cn/2019/05/21/C-基础知识01/</id>
    <published>2019-05-21T02:06:43.000Z</published>
    <updated>2019-05-22T06:39:56.255Z</updated>
    
    <content type="html"><![CDATA[<p>第一章：基础了解<br><a id="more"></a></p><h4 id="基础知识："><a href="#基础知识：" class="headerlink" title="基础知识："></a>基础知识：</h4><p><strong>C++程序的基础模块叫什么</strong>  </p><blockquote><p>函数</p></blockquote><p><strong>#include<iostream>什么作用</iostream></strong></p><blockquote><p>会在编译之前，使用iostream文件内容替换该编译指令</p></blockquote><p><strong>using namespace std什么作用</strong></p><blockquote><p>使程序可以使用std名称空间的定义，<br>放在函数定义之前，让所有函数都能使用名称空间std中所有元素<br>放在指定函数定义中，让该函数能够使用<br>在特定的函数中使用using std::cout，让该函数能够使用指定元素cout。<br>完全不使用编译指令，而使用命名空间元素时 使用</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span>&lt;&lt;<span class="string">"Hello"</span>&lt;&lt;<span class="built_in">std</span>:<span class="built_in">endl</span></span><br></pre></td></tr></table></figure><p><strong>打印hello并开始新的一行</strong>  </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"hello\n"</span>; </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"hello"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p><strong>创建变量</strong></p><blockquote><p>类型 变量名 </p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> num</span><br></pre></td></tr></table></figure><p><strong>赋值</strong></p><blockquote><p>变量=值</p></blockquote><p><strong>键盘输入赋值</strong>  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cin &gt;&gt; num</span><br></pre></td></tr></table></figure><p><strong>打印拼接</strong><br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"num value is"</span>&lt;&lt; num &lt;&lt; <span class="string">"，is int type"</span> &lt;&lt;<span class="built_in">endl</span></span><br></pre></td></tr></table></figure></p><p><strong>函数定义</strong></p><blockquote><p>返回值类型 函数名 （参数）<br>在没有函数返回值的情况下可以不使用“return”，也可以使用“return;”</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">froop</span><span class="params">(<span class="keyword">double</span> t)</span></span>; <span class="comment">//函数传入double类型，返回int类型值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">noreturn</span><span class="params">(<span class="keyword">int</span> n)</span></span>; <span class="comment">//传入一个int参数，没有返回值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prune</span><span class="params">(<span class="keyword">void</span>)</span></span>; <span class="comment">//没有参数传入，但是返回一个int类型值</span></span><br></pre></td></tr></table></figure><h4 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h4><p>1.HelloWorld<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//中文如果乱码将文件改成GBK编码</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line">    <span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"我是小星星,河南人！！"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.用户键盘输入一个整形，并计算返回<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; <span class="comment">//命名空间</span></span><br><span class="line">    <span class="keyword">double</span> inputNum; <span class="comment">//定义一个双精度变量</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"输入一个double类型的数："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; inputNum;    <span class="comment">//获取输入的值并赋给定义的变量</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"计算乘2减3的结果:"</span> &lt;&lt;inputNum * <span class="number">2</span> <span class="number">-3</span> &lt;&lt; <span class="string">"。结束计算"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>3.用户自定义函数<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//命名空间</span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//定义函数1</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_one</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"函数一"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义函数2</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_two</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"函数二"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//调用函数</span></span><br><span class="line">    print_one();</span><br><span class="line">    print_two();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>4.用户输入年两，计算包含多少月<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">void</span>)</span> </span>&#123;     </span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>age;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Enter your age: "</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; age;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Your age in months is "</span> &lt;&lt; age * <span class="number">12</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>5.使用自定义函数完成华氏度和摄氏度的转换  </p><blockquote><p>华氏温度 = 1.8 * 摄氏度 + 32</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cal</span><span class="params">(<span class="keyword">double</span> celsius)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1.8</span> * celsius + <span class="number">32.0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">    <span class="keyword">double</span> celsius;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入当前温度(摄氏度)："</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; celsius;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"当前华氏度："</span> &lt;&lt; cal(celsius) &lt;&lt; <span class="string">"华氏度"</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.用户输入小时和分钟并格式化 xx:xx<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cin</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fmtTime</span><span class="params">(<span class="keyword">int</span> hour, <span class="keyword">int</span> minute)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"当前时间：("</span> &lt;&lt; hour &lt;&lt; <span class="string">":"</span> &lt;&lt; minute &lt;&lt; <span class="string">")."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> hour, minute;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入当前小时:"</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; hour;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入分钟："</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; minute;</span><br><span class="line">    fmtTime(hour, minute);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第一章：基础了解&lt;br&gt;
    
    </summary>
    
      <category term="C++" scheme="http://atworking.cn/categories/C/"/>
    
    
      <category term="C++" scheme="http://atworking.cn/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>VSCODE-C++环境配置</title>
    <link href="http://atworking.cn/2019/05/20/VSCODE-C-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <id>http://atworking.cn/2019/05/20/VSCODE-C-环境配置/</id>
    <published>2019-05-20T02:51:28.000Z</published>
    <updated>2019-06-17T13:21:33.686Z</updated>
    
    <content type="html"><![CDATA[<p><code>PicGO图床快捷方式：粘贴图片路径上传：CTRL+ALT+U选择图片文件上传: CTRL+ALT+E从输入框上传图片：CTRL+ALT+O</code><br><a id="more"></a></p><h3 id="VSCODE下载"><a href="#VSCODE下载" class="headerlink" title="VSCODE下载:"></a>VSCODE下载:</h3><p><a href="https://code.visualstudio.com/" target="_blank" rel="noopener">VSCODE下载地址</a>  </p><h3 id="mingw64离线包下载："><a href="#mingw64离线包下载：" class="headerlink" title="mingw64离线包下载："></a>mingw64离线包下载：</h3><p><a href="https://sourceforge.net/projects/mingw-w64/files/?source=navbar" target="_blank" rel="noopener">mingw64离线包下载：</a></p><h3 id="环境配置："><a href="#环境配置：" class="headerlink" title="环境配置："></a>环境配置：</h3><p>mingw64\bin配置到path变量</p><p>vscode 安装插件!  </p><p><img src="http://mdimg.atworking.cn/2019-05-20-11-59-03.png" alt="c/c++插件"></p><p>选择c++源码文件夹,新建.vscode目录 </p><p>配置“launch.json”</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // 使用 IntelliSense 了解相关属性。 </span><br><span class="line">    // 悬停以查看现有属性的描述。</span><br><span class="line">    // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span><br><span class="line">    "version": "0.2.0",</span><br><span class="line">    "configurations": [</span><br><span class="line">        &#123;</span><br><span class="line">            "name": "(gdb) Launch", // 配置名称，将会在启动配置的下拉菜单中显示  </span><br><span class="line">            "type": "cppdbg",</span><br><span class="line">            "request": "launch",</span><br><span class="line">            "program": "$&#123;workspaceRoot&#125;/$&#123;fileBasenameNoExtension&#125;.exe",// 将要进行调试的程序的路径</span><br><span class="line">            "args": [], // 程序调试时传递给程序的命令行参数，一般设为空即可</span><br><span class="line">            "stopAtEntry": false, // 设为true时程序将暂停在程序入口处，一般设置为false</span><br><span class="line">            "cwd": "$&#123;workspaceRoot&#125;", // 调试程序时的工作目录，一般为$&#123;workspaceRoot&#125;即代码所在目录   </span><br><span class="line">            "environment": [],</span><br><span class="line">            "externalConsole": true, // 调试时是否显示控制台窗口，一般设置为true显示控制台</span><br><span class="line">            "MIMode": "gdb",</span><br><span class="line">            "miDebuggerPath": "C:\\mingw64\\bin\\gdb.exe", //注意这里要与MinGw的路径对应</span><br><span class="line">            "setupCommands": [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">"description"</span>: <span class="string">"Enable pretty-printing for gdb"</span>,</span><br><span class="line">                    <span class="attr">"text"</span>: <span class="string">"-enable-pretty-printing"</span>,</span><br><span class="line">                    <span class="attr">"ignoreFailures"</span>: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            "preLaunchTask": "g++", // 调试会话开始前执行的任务，一般为编译程序，c++为g++, c为gcc  </span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置tasks.json</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"2.0.0"</span>, </span><br><span class="line">    <span class="attr">"command"</span>: <span class="string">"g++"</span>, </span><br><span class="line">    "args": ["-g","$&#123;file&#125;","-o","$&#123;fileBasenameNoExtension&#125;.exe"], // 编译命令参数 </span><br><span class="line">    "problemMatcher": &#123; </span><br><span class="line">        "owner": "cpp", </span><br><span class="line">        "fileLocation": ["relative", "$&#123;workspaceRoot&#125;"], </span><br><span class="line">        "pattern": &#123; </span><br><span class="line">            "regexp": "^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$", </span><br><span class="line">            "file": 1, </span><br><span class="line">            "line": 2, </span><br><span class="line">            "column": 3, </span><br><span class="line">            "severity": 4, </span><br><span class="line">            "message": 5 </span><br><span class="line">            &#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>配置”settings.json”</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"files.exclude"</span>: &#123;</span><br><span class="line">        <span class="attr">"**/.classpath"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"**/.project"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"**/.settings"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"**/.factorypath"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;PicGO图床快捷方式：
粘贴图片路径上传：CTRL+ALT+U
选择图片文件上传: CTRL+ALT+E
从输入框上传图片：CTRL+ALT+O&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
      <category term="VSCODE" scheme="http://atworking.cn/categories/VSCODE/"/>
    
    
      <category term="IDE" scheme="http://atworking.cn/tags/IDE/"/>
    
      <category term="VSCODE" scheme="http://atworking.cn/tags/VSCODE/"/>
    
  </entry>
  
</feed>
